From help at tuyizere.org  Mon Jan 29 00:37:59 2018
From: help at tuyizere.org (gnuforever)
Date: Sun, 28 Jan 2018 23:37:59 +0000
Subject: [Gnuk-users] Bricked FST-01 running tip-of-tree gnuk
In-Reply-To: <CACi+kjqVcSEjoEyEBU3vdZm3bo9Rw60ANBx0RXWTD8ZTEV8Okg@mail.gmail.com>
 (Mike Tsao's message of "Wed, 10 Jan 2018 07:09:19 +0000")
References: <CACi+kjqVcSEjoEyEBU3vdZm3bo9Rw60ANBx0RXWTD8ZTEV8Okg@mail.gmail.com>
Message-ID: <87k1w1eeqw.fsf@tuyizere.org>


Mike Tsao <mike at sowbug.com> writes:

> My FST-01 is in a state where it can't be unblocked using gpg, nor can it be reflashed using
> an SWD connection. Here is my story.
>
> I ordered two FST-01 devices from SeeedStudio. They arrived today.

Do they still sell the FST-01? I can't find it on their website.
Could you please share the link?

Thanks.

Steve


From mike at sowbug.com  Mon Jan 29 05:56:59 2018
From: mike at sowbug.com (Mike Tsao)
Date: Mon, 29 Jan 2018 04:56:59 +0000
Subject: [Gnuk-users] Bricked FST-01 running tip-of-tree gnuk
In-Reply-To: <87k1w1eeqw.fsf@tuyizere.org>
References: <CACi+kjqVcSEjoEyEBU3vdZm3bo9Rw60ANBx0RXWTD8ZTEV8Okg@mail.gmail.com>
 <87k1w1eeqw.fsf@tuyizere.org>
Message-ID: <CACi+kjrPjbZmz_K68=O1pLiz9Mi5n+DSb=hzbNjBjscgm9gAvg@mail.gmail.com>

Seeed removed the link because it's out of stock, and I believe Niibe-san
is working on a newer version (FST-01G) which is functionally identical,
but with components that are easier to source. Thus it is possible that
Seeed will not restock the FST-01 (this is speculation on my part).

If you simply want some generic hardware to try gnuk, you can get the
STM32F103C8T6 Minimum System Board (example
<https://www.aliexpress.com/item/Free-shipping-1pcs-STM32F103C8T6-ARM-STM32-Minimum-System-Development-Board-Module-For-arduino-Sensing-Evaluation-for/32838090315.html?ws_ab_test=searchweb0_0,searchweb201602_1_10065_10344_10068_10342_10325_10546_10343_10340_10548_10341_10084_10083_10618_10615_10307_10313_10059_10534_100031_10103_441_10624_442_10623_10622_10621_10620_10142,searchweb201603_25,ppcSwitch_5&algo_expid=7e0a6a78-4125-4937-9e5f-b6f80cd14ebb-10&algo_pvid=7e0a6a78-4125-4937-9e5f-b6f80cd14ebb&priceBeautifyAB=1>),
a.k.a. "Blue Pill <http://wiki.stm32duino.com/index.php?title=Blue_Pill>,"
and build for that target. It is not as beautiful or usable a board as the
FST-01 for the use case of a portable OpenPGP smart card, but it works.

Note that the STM32F103C8T6 reports that it has only 64K flash, which is
not enough for gnuk, but the chip almost always has 128K flash and will
work fine. You must change your build of texane/stlink to get it to ignore
the 64K flash size (excellent patch here
<https://github.com/texane/stlink/issues/305#issuecomment-141833509>).

On Mon, Jan 29, 2018 at 7:38 AM gnuforever <help at tuyizere.org> wrote:

>
> Mike Tsao <mike at sowbug.com> writes:
>
> > My FST-01 is in a state where it can't be unblocked using gpg, nor can
> it be reflashed using
> > an SWD connection. Here is my story.
> >
> > I ordered two FST-01 devices from SeeedStudio. They arrived today.
>
> Do they still sell the FST-01? I can't find it on their website.
> Could you please share the link?
>
> Thanks.
>
> Steve
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20180129/2e570a37/attachment.html>

From help at tuyizere.org  Mon Jan 29 07:27:14 2018
From: help at tuyizere.org (gnuforever)
Date: Mon, 29 Jan 2018 06:27:14 +0000
Subject: [Gnuk-users] Bricked FST-01 running tip-of-tree gnuk
In-Reply-To: <CACi+kjrPjbZmz_K68=O1pLiz9Mi5n+DSb=hzbNjBjscgm9gAvg@mail.gmail.com>
 (Mike Tsao's message of "Mon, 29 Jan 2018 04:56:59 +0000")
References: <CACi+kjqVcSEjoEyEBU3vdZm3bo9Rw60ANBx0RXWTD8ZTEV8Okg@mail.gmail.com>
 <87k1w1eeqw.fsf@tuyizere.org>
 <CACi+kjrPjbZmz_K68=O1pLiz9Mi5n+DSb=hzbNjBjscgm9gAvg@mail.gmail.com>
Message-ID: <871si9kwn1.fsf@tuyizere.org>


Mike Tsao <mike at sowbug.com> writes:

> If you simply want some generic hardware to try gnuk, you can get the STM32F103C8T6
> Minimum System Board (example), a.k.a. "Blue Pill," and build for that
> target.

Thanks. I will definetly have a look.
I am also looking forward the new FST-01 version.


From gniibe at fsij.org  Mon Jan 29 08:46:27 2018
From: gniibe at fsij.org (NIIBE Yutaka)
Date: Mon, 29 Jan 2018 16:46:27 +0900
Subject: FST-01G distribution channel
In-Reply-To: <871si9kwn1.fsf@tuyizere.org>
References: <CACi+kjqVcSEjoEyEBU3vdZm3bo9Rw60ANBx0RXWTD8ZTEV8Okg@mail.gmail.com>
 <87k1w1eeqw.fsf@tuyizere.org>
 <CACi+kjrPjbZmz_K68=O1pLiz9Mi5n+DSb=hzbNjBjscgm9gAvg@mail.gmail.com>
 <871si9kwn1.fsf@tuyizere.org>
Message-ID: <874ln5ds4s.fsf@fsij.org>

gnuforever <help at tuyizere.org> wrote:
> I am also looking forward the new FST-01 version.

I shipped FST-01G (w/ NeuG 1.0.7) to FSF shop for 2018, last week.  It
will be ready for Libre Planet 2018.

I will bring some of FST-01G to FOSDEM 2018.

Those two (FSF and me in person) are current distribution channels.

Well, while keeping the availability at Seeed was good, I have a
problem.  In the period of five years for 1000 pieces of FST-01, some
boards were gone as stock loss at Seeed, and some sales for boards were
gone somewhere.  (I mean, the amount was a bit bigger than I expected.)

While there has been an improvement at Seeed, I am not yet decided
if I will ask distribution of FST-01G at Seeed again.
-- 


From help at tuyizere.org  Mon Jan 29 16:56:55 2018
From: help at tuyizere.org (gnuforever)
Date: Mon, 29 Jan 2018 15:56:55 +0000
Subject: FST-01G distribution channel
In-Reply-To: <874ln5ds4s.fsf@fsij.org> (NIIBE Yutaka's message of "Mon, 29 Jan
 2018 16:46:27 +0900")
References: <CACi+kjqVcSEjoEyEBU3vdZm3bo9Rw60ANBx0RXWTD8ZTEV8Okg@mail.gmail.com>
 <87k1w1eeqw.fsf@tuyizere.org>
 <CACi+kjrPjbZmz_K68=O1pLiz9Mi5n+DSb=hzbNjBjscgm9gAvg@mail.gmail.com>
 <871si9kwn1.fsf@tuyizere.org> <874ln5ds4s.fsf@fsij.org>
Message-ID: <87shaobquw.fsf@tuyizere.org>


NIIBE Yutaka <gniibe at fsij.org> writes:

> I will bring some of FST-01G to FOSDEM 2018.

Great!

I will be at FOSDEM as well.
Where can I meet you? Will you have a stand?
Will you also sell the equipments to flash?
If not, what do you recommend?

Thanks a lot.

Steve


From gniibe at fsij.org  Tue Jan 30 01:13:49 2018
From: gniibe at fsij.org (NIIBE Yutaka)
Date: Tue, 30 Jan 2018 09:13:49 +0900
Subject: FST-01G distribution channel
In-Reply-To: <87shaobquw.fsf@tuyizere.org>
References: <CACi+kjqVcSEjoEyEBU3vdZm3bo9Rw60ANBx0RXWTD8ZTEV8Okg@mail.gmail.com>
 <87k1w1eeqw.fsf@tuyizere.org>
 <CACi+kjrPjbZmz_K68=O1pLiz9Mi5n+DSb=hzbNjBjscgm9gAvg@mail.gmail.com>
 <871si9kwn1.fsf@tuyizere.org> <874ln5ds4s.fsf@fsij.org>
 <87shaobquw.fsf@tuyizere.org>
Message-ID: <87tvv4b3uq.fsf@iwagami.gniibe.org>

gnuforever <help at tuyizere.org> wrote:
> Where can I meet you? Will you have a stand?

No, I won't have a stand.  I will have a talk on Sunday, let's meet
there.

> Will you also sell the equipments to flash?

No, not myself.

Well, last week, I was asked if selling ST-Link/V2 clone makes sense.
His intention was flashing the hardware of ST-Link/V2 clone to Gnuk
Token.  I answered "Yes, but I'd recommend buying two; one as a
programmer, one for Gnuk Token".  So, he will bring some, perhaps.

ST-Link/V2 clone is something like this:

    https://alitronik.com/st-link-v2-clone/

I don't know if this product has nRST pin support.  If there is support
of nRST pin, it's better.  Since FST-01G doesn't offer access to reset
pin, it doesn't matter for FST-01G.  For example, FSM-55 (another board
of mine) requires nRST pin support to be flashed.

> If not, what do you recommend?

While ST-Link/V2 and its clone are useful, the problem here is it's
proprietary.  Here are some links for ST-Link/V2 information:

    http://wiki.stm32duino.com/index.php?title=ST-LINK_clone
    http://e.pavlin.si/2016/02/22/st-link-v2-on-a-single-sided-diy-pcb/
    https://lujji.github.io/blog/reverse-engineering-stlink-firmware-part2/

These days, the best programmer would be CMSIS-DAP, since the protocol
is documented and published, as well as the implementation.

It's not only the flash programmer itself, but the whole environment; If
you are using computer with something like GNU/Linux which you control
(sans Intel ME), good, you can focus on the problem of good flash
programmer.

For the manufacturing of FST-01G, I asked Seeed to use BBG-SWD:

    https://www.hackster.io/gniibe/bbg-swd-f6a408

(Because I cared about attack vectors in the manufacturing process,
and BBG is their own product.)

Unfortunately, I developed BBG-SWD based on the snapshot of OpenOCD.
Perhaps, I will port it to newer OpenOCD and let run it on PocketBeagle,
when I will have next opportunity of manufacturing.

My talk on Sunday:

    https://fosdem.org/2018/schedule/event/hwenablement_gnuk_token_and_gnupg_scdaemon/

And my photo:

    https://fosdem.org/2018/schedule/speaker/yutaka_niibe/

See you at FOSDEM!
-- 


From gniibe at fsij.org  Tue Jan 30 12:26:24 2018
From: gniibe at fsij.org (NIIBE Yutaka)
Date: Tue, 30 Jan 2018 20:26:24 +0900
Subject: Major change in Gnuk 1.2.8
Message-ID: <87lggf37vj.fsf@fsij.org>

Hello,

Since version 1.2.8 of Gnuk, build/gnuk.elf doesn't have valid VID:PID.
It is substituted by typing:

	make build/gnuk-vidpid.elf

and it is build/gnuk-vidpid.elf which should be used for the flashing
process.

Never use build/gnuk.elf for flashing the device, please.
-- 


From help at tuyizere.org  Tue Jan 30 19:28:16 2018
From: help at tuyizere.org (gnuforever)
Date: Tue, 30 Jan 2018 18:28:16 +0000
Subject: FST-01G distribution channel
In-Reply-To: <87tvv4b3uq.fsf@iwagami.gniibe.org> (NIIBE Yutaka's message of
 "Tue, 30 Jan 2018 09:13:49 +0900")
References: <CACi+kjqVcSEjoEyEBU3vdZm3bo9Rw60ANBx0RXWTD8ZTEV8Okg@mail.gmail.com>
 <87k1w1eeqw.fsf@tuyizere.org>
 <CACi+kjrPjbZmz_K68=O1pLiz9Mi5n+DSb=hzbNjBjscgm9gAvg@mail.gmail.com>
 <871si9kwn1.fsf@tuyizere.org> <874ln5ds4s.fsf@fsij.org>
 <87shaobquw.fsf@tuyizere.org> <87tvv4b3uq.fsf@iwagami.gniibe.org>
Message-ID: <87r2q7nqv3.fsf@tuyizere.org>


NIIBE Yutaka <gniibe at fsij.org> writes:

> No, I won't have a stand.  I will have a talk on Sunday, let's meet
> there.

Sure. I will be there.

> While ST-Link/V2 and its clone are useful, the problem here is it's
> proprietary.

I stand for Free software and free hardware design. Will not use it.

> These days, the best programmer would be CMSIS-DAP, since the protocol
> is documented and published, as well as the implementation.

I will investigate how to use the CMSIS-DAP to flash Gnuk and NeuG

> See you at FOSDEM!

Sure. See you on Sunday.

If I am not wrong there 3 versions of the FST-01G. I am interested in the
one with an enclosure you can open and close for flash.
Could you please reserve 2 for me? Thank you.

Steve


From help at tuyizere.org  Thu Feb  1 18:13:47 2018
From: help at tuyizere.org (gnuforever)
Date: Thu, 01 Feb 2018 17:13:47 +0000
Subject: FST-01G distribution channel
In-Reply-To: <87tvv4b3uq.fsf@iwagami.gniibe.org> (NIIBE Yutaka's message of
 "Tue, 30 Jan 2018 09:13:49 +0900")
References: <CACi+kjqVcSEjoEyEBU3vdZm3bo9Rw60ANBx0RXWTD8ZTEV8Okg@mail.gmail.com>
 <87k1w1eeqw.fsf@tuyizere.org>
 <CACi+kjrPjbZmz_K68=O1pLiz9Mi5n+DSb=hzbNjBjscgm9gAvg@mail.gmail.com>
 <871si9kwn1.fsf@tuyizere.org> <874ln5ds4s.fsf@fsij.org>
 <87shaobquw.fsf@tuyizere.org> <87tvv4b3uq.fsf@iwagami.gniibe.org>
Message-ID: <87vafgy6no.fsf@tuyizere.org>


NIIBE Yutaka <gniibe at fsij.org> writes:

> Unfortunately, I developed BBG-SWD based on the snapshot of OpenOCD.
> Perhaps, I will port it to newer OpenOCD and let run it on PocketBeagle,
> when I will have next opportunity of manufacturing.

Do you accept donation? I would like to contribute.
Thank you for your great work!


From tomli at tomli.me  Sun Feb  4 20:27:51 2018
From: tomli at tomli.me (tomli at tomli.me)
Date: Mon, 5 Feb 2018 03:27:51 +0800
Subject: The VID/PID Problem of Gnuk Devices
Message-ID: <20180204192751.GA8095@x220>

Hello,

(TL;DR: start reading from the 5th-paragraph of the mail.)

I'm a core member from Beijing GNU/Linux User Group - an informal
association for advocating free and open source software and the
use of cryptography to protect users' freedom, security and privacy.

Recently, we are working on a project to assemble a small quatity (around
10 pieces) of homemade FST-01 compatible hardware tokens. We intended
to distribute this token as a gift for our members, contributors and
friends.

We also planned to sell these tokens with preloaded Gnuk firmware
(again, in small quatities), for several reasons. First, since SeeedStudio
no longer sells the original FST-01 tokens, for local users who need
them, getting it from a local Linux User Group is much more convenient
than ordering it from any remote vendors. Second, it can be a good
opportunity to promoto the use of free software and cryptography. Third,
it would also allow us to recover a portion of the fabrication costs
to ensure the balance of our limited budgets. Finally, we also hope the
act of making, using and distributing self-assembled Gnuk tokens would
encourage the decentralization of the supply of cryptographic devices.

I've already created our custom PCBs for these FST-01 tokens, the PCB is
a direct copy of the FST-01G design, with our logo and version number.
We've attributed Flying Stone Technology as the original designer, as
required by CC-BY-SA 3.0.

The only problem left is the VID/PID problem. We could distribute these
Gnuk tokens with our own VID/PID, but PC-SC and GnuPG would not recongize
these tokens as smartcard readers or OpenPGP Cards. We'll have to submit
patches to the upstream projects to include our IDs and wait for the
next release schedule.

Meanwhile, all users would also have to upgrade their local systems to
use the latest software packages, otherwise the Gnuk token will be an
unknown and unusable device on their systems.

This has severely limited the usefulness of these tokens, for example,
most people cannot use it since their systems don't recongize it
out-of-box, it will be a even bigger problems on specialized GNU/Linux
distros, such as a Tails LiveCD - the user may not have the chance
to upgrade at all.

In conclusion, I have three questions, first, how to patch GnuPG and
PC-SC to make them recongize it as a card reader with customized VID/PID?
And what is the easiest way to solve the interoperability problem?
I've read that FSIJ may accept 3rd-party to use the FSIJ's VID as
an authorized "second-source manufacturer", is it possible for us to
apply? Also, if we decided to use our own VID/PID in the end, is there
a way to avoid this nasty interoperability problem on existing systems?

Sincerely,
Tom Li
Beijing GNU/Linux User Group
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 851 bytes
Desc: Digital signature
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20180205/14f99a58/attachment.sig>

From gniibe at fsij.org  Tue Feb  6 02:09:44 2018
From: gniibe at fsij.org (NIIBE Yutaka)
Date: Tue, 06 Feb 2018 10:09:44 +0900
Subject: GD32F103
Message-ID: <87607a6i07.fsf@iwagami.gniibe.org>

Hello,

At FOSDEM, from a friend, I learned this chip: GD32F103

    http://gd32mcu.21ic.com/en/index

It looks interesting.

It is composed by two dies; A die of serial Flash ROM, and a die of MCU
core.  Apparently, the flash ROM content is encrypted, but the method is
unknown (for me).  At least, the encryption can not be controlled by a
programmer who writes the firmware.  The ad says it uses "patented"
technology for the encryption, so, some information might be available,
possibly in Chinese.

I wonder if it is more difficult than STM32F103 against opening-the-chip
attack.

Well, it can run faster (up to 108MHz) and power consumption is lower.
These benefits themselves are worth to try.  And it's good if we have an
alternative.

I would try this chip, if I will have an opportunity.  It seems that
36-pin QFN version is not yet available at aliexpress.
-- 


From gniibe at fsij.org  Tue Feb  6 02:45:10 2018
From: gniibe at fsij.org (NIIBE Yutaka)
Date: Tue, 06 Feb 2018 10:45:10 +0900
Subject: The VID/PID Problem of Gnuk Devices
In-Reply-To: <20180204192751.GA8095@x220>
References: <20180204192751.GA8095@x220>
Message-ID: <87372e6gd5.fsf@iwagami.gniibe.org>

Hello,

> Recently, we are working on a project to assemble a small quatity (around
> 10 pieces) of homemade FST-01 compatible hardware tokens. We intended
> to distribute this token as a gift for our members, contributors and
> friends.
>
> We also planned to sell these tokens with preloaded Gnuk firmware
> (again, in small quatities), for several reasons. First, since SeeedStudio
> no longer sells the original FST-01 tokens, for local users who need
> them, getting it from a local Linux User Group is much more convenient
> than ordering it from any remote vendors. Second, it can be a good
> opportunity to promoto the use of free software and cryptography. Third,
> it would also allow us to recover a portion of the fabrication costs
> to ensure the balance of our limited budgets. Finally, we also hope the
> act of making, using and distributing self-assembled Gnuk tokens would
> encourage the decentralization of the supply of cryptographic devices.

Great.  That's exactly what wanted to do many times, at many times.  But
I was unable to achieve that goal by myself.  I only had a Gnuk workshop
(with five people or so) in Japan.  Currently, the distribution channel
is only FSF shop and me in person.

I am pleased that you are going to do.

> In conclusion, I have three questions, first, how to patch GnuPG and
> PC-SC to make them recongize it as a card reader with customized VID/PID?

As upstream GnuPG developer, I think that no changes are required for
GnuPG scdaemon itself, for a token with customized VID:PID.  All that we
need is configuration for accessing the hardware, in a distribution; For
example, in Debian, we have an entry for Gnuk Token (of FSIJ):

    https://anonscm.debian.org/git/pkg-gnupg/gnupg2.git/tree/debian/scdaemon.udev

For PC/SC, you can send the information to upstream:

    http://pcsclite.alioth.debian.org/ccid.html#CCID_compliant

But, IIRC, it is not mandatory condition to use PC/SC reader.

Please note that for GNU/Linux machines, PC/SC is not required, we can
just use in-stock CCID driver of GnuPG which accesses directly using
libusb.

Please try some experiments with customized VID:PID.

Well, I'm afraid... some changes are needed for scripts in Gnuk.
VID:PID is hard-coded at some places.  And the VID:PID is assumed in
some examples in documents.

> And what is the easiest way to solve the interoperability problem?

For Gnuk Token with customized VID:PID, while Nitrokey had an
experience, I suppose, we don't know the detail.  So, I think that you
need to pursue by yourself.  Sure, we will help.

> I've read that FSIJ may accept 3rd-party to use the FSIJ's VID as
> an authorized "second-source manufacturer", is it possible for us to
> apply?

Yes.  I'll ask to members if it will be acceptable.

> Also, if we decided to use our own VID/PID in the end, is there a way
> to avoid this nasty interoperability problem on existing systems?

While I haven't identified the problems, it's not that hard, if any.
-- 


From tomli at tomli.me  Tue Feb  6 20:12:37 2018
From: tomli at tomli.me (tomli at tomli.me)
Date: Wed, 7 Feb 2018 03:12:37 +0800
Subject: GD32F103
In-Reply-To: <87607a6i07.fsf@iwagami.gniibe.org>
References: <87607a6i07.fsf@iwagami.gniibe.org>
Message-ID: <20180206191237.GA2872@x220>

> At FOSDEM, from a friend, I learned this chip: GD32F103
> It looks interesting.

Thanks for the information. Since I'm working on my FST-01-compatible 
prototype, and just wondering whether there's an "improved" version of this chip
available for experiments.

This is exactly what I need. I never realized the existence of this chip!

> Well, it can run faster (up to 108MHz) and power consumption is lower.
> These benefits themselves are worth to try.  And it's good if we have an
> alternative

Even better, the price of the chip is also lower than its STM32F103
counterpart. In addition, GD32F103 has better ESD-ratings: 4 kV (HBM),
while STM32F103 can only withstand 2 kV, it can increase the chance of
survival of our Gnuk in case of an accident (I've accidentally destroyed
two official FST-01s while trying to reprogram it, ESD is the only possible
explanation came to my mind, so I learned how to properly ground myself
and my workbench as a result, not too bad...)

> It is composed by two dies; A die of serial Flash ROM, and a die of MCU
> core.  Apparently, the flash ROM content is encrypted, but the method is
> unknown (for me).

GigaDevice is knownly for its flash chips so they also incorporated their
flash chips inside the MCU, unsurprisingly. Here are photographs of the	chip's
die: https://zeptobars.com/en/read/GD32F103CBT6-mcm-serial-flash-Giga-Devices

> The ad says it uses "patented" technology for the encryption, so, some information
> might be available, possibly in Chinese. I wonder if it is more difficult than
> STM32F103 against opening-the-chip attack.

I searched in Chinese, and found the information is limited. If my understanding
is correct, in addition to the standard readout protection, GD32F103 implemented
an algorithm to distribute and map the data on continuous logical addresses to
discontinuous physical address on the flash hardware. Physical attackers need to
rearrange the data to correct orders, so yes, it can probably increase costs of
attacks.

> At least, the encryption can not be controlled by a programmer who writes
> the firmware.

Just like the readout protection, these security features are transparent to
developers, it's good to have them, but we as developers should implement proper
encryption inside the firmware (like the AES encryption in Gnuk) instead not
relying on these hardware features. We'll be okay.

I wonder if we can use a security coprocessor to make an attack more difficult,
without really relying on the security coprocessor.

For example, if we add a SHA coprocessor, we can ask the coprocessor to do an extra
1000-round SHA-HMAC iteration from the key derived by Gnuk with a random salt. In this
way, even if the coprocessor is backdoored and doesn't do anything, Gnuk is still the
bottom line of our security. Users' computing freedom and hackability are also unaffected,
since they are the ultimate controller of the security coprocessor.

It's difficult to find a "secure" MCU without NDA, but it looks like they are lots of
simple TPMs avaliable for the mass market. What is your opinion?

> I would try this chip, if I will have an opportunity.  It seems that
> 36-pin QFN version is not yet available at aliexpress.

I just placed an order for this chip, and I'm going to try the chip as soon as I receive
them. Perhaps I can send a few pieces to Japan via FedEx? I also found some Chinese application
notes for porting the program, and some posts on the Internet that document some traps of
the chip, I'd like to translate them to English if it is useful for Gnuk development.

Finally, I remembered seeing a post about a possible future design of the FST-01 board,
including drawing the USB traces on the PCB instead of using a external connector, and
the possible shift to newer chips, but I cannot find the mail anymore. Can you send me
a link?

Happy Hacking,
Tom Li
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 851 bytes
Desc: Digital signature
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20180207/d7f25e3f/attachment.sig>

From gniibe at fsij.org  Wed Feb  7 00:01:56 2018
From: gniibe at fsij.org (NIIBE Yutaka)
Date: Wed, 07 Feb 2018 08:01:56 +0900
Subject: GD32F103
In-Reply-To: <20180206191237.GA2872@x220>
References: <87607a6i07.fsf@iwagami.gniibe.org> <20180206191237.GA2872@x220>
Message-ID: <87zi4len8b.fsf@fsij.org>

Hello,

Thanks for information for GD32F103.  Let's see.

tomli at tomli.me writes:
> I wonder if we can use a security coprocessor to make an attack more
> difficult, without really relying on the security coprocessor.

In general, I don't want such a feature in device side.  It could be a
honey-pot.  Or, it tends to be immature like ROCA problem.

To achieve same, it's far better done in host side.  In OpenPGP card V3
specification, I proposed KDF Data Object, so that host side can do more
iteration:

    https://dev.gnupg.org/T3152

In recent Gnuk, it is already implemented.  Host side implementation is
ready in GnuPG, just waiting next release.  https://dev.gnupg.org/T3201

> Finally, I remembered seeing a post about a possible future design of
> the FST-01 board, including drawing the USB traces on the PCB instead
> of using a external connector, and the possible shift to newer chips,
> but I cannot find the mail anymore. Can you send me a link?

Do you mean this?

    https://www.gniibe.org/memo/development/fs-bb48/fs-bb48-idea.html

I made prototype.  It found that the multiplier is too slow in
Cortex-M0+.  It would be OK for ECC though.

For FS-BB48, I designed 3D part:

    https://git.gniibe.org/gitweb/?p=gnuk/fs-geta083.git

In 2016, I was unable to find better way to manufacture something like
FS-GETA083.  At that time, using standard USB-A plug is more cheaper and
easier.

Thus, in 2016, my conclusion was update to FST-01G.

    https://www.gniibe.org/memo/development/fst-01/fst-01-revision-g.html

-- 


From tomli at tomli.me  Wed Feb  7 12:57:18 2018
From: tomli at tomli.me (tomli at tomli.me)
Date: Wed, 7 Feb 2018 19:57:18 +0800
Subject: GD32F103
In-Reply-To: <87zi4len8b.fsf@fsij.org>
References: <87607a6i07.fsf@iwagami.gniibe.org> <20180206191237.GA2872@x220>
 <87zi4len8b.fsf@fsij.org>
Message-ID: <20180207115718.GA13025@x220>

> > I wonder if we can use a security coprocessor to make an attack more
> > difficult, without really relying on the security coprocessor.
>
> In general, I don't want such a feature in device side.  It could be a
> honey-pot.  Or, it tends to be immature like ROCA problem.

Yes, this problem is a serious concern. 

The idea is to make it fail-safe, in other words, use the security coprocessor
without trusting it, double-encrypting the already-encrypted data. If the security
coprocessor is a honeypot, the worst-case scenario is merely a denial-of-service
attack.

Unless the coprocessor is customized to launch a hardware-level exploit to the
main processor, e.g. doing a power-analysis in real time when the main chip is
being used, and saving the results inside the chip for attacks to gain physical
access later.

These security coprocessors are mainly design to prevent low-cost opening-the-chip
attacks by the competitors to copy their programs on mass-market products, rather
than cryptography applications. It looks like there are some, don't even require
an NSA^H^H^H NDA. These coprocessors may be ineffective, but I don't think they are
capable to do these types of malicious attacks.

So I don't think there is a problem on security, but in my opinion, the bigger problem
is the lack of free software toolchains (no idea about their toolchains) for these
coprocessors, but it seems easy to port existing tools since they are using the same
common commodity "IP" cores like 8051. Debugging might be another problem.

You may not prefer these popentially-questionable chips, but for me I think it's worth to
investigate the good, the bad, and the ugly about them. I have a few candidates and I'm
going to report everything I have discovered.

> To achieve same, it's far better done in host side.  In OpenPGP card V3
> specification, I proposed KDF Data Object, so that host side can do more
> iteration:
> 
>     https://dev.gnupg.org/T3152
> 
> In recent Gnuk, it is already implemented.  Host side implementation is
> ready in GnuPG, just waiting next release.  https://dev.gnupg.org/T3201

Well done, this is exactly what we need. It's going to dramatically increase
our last-line resistance of brute-force attacks after the chip is opened.

> Do you mean this?
> 
>     https://www.gniibe.org/memo/development/fs-bb48/fs-bb48-idea.html
> 
> I made prototype.  It found that the multiplier is too slow in
> Cortex-M0+.  It would be OK for ECC though.
> 
> For FS-BB48, I designed 3D part:
> 
>     https://git.gniibe.org/gitweb/?p=gnuk/fs-geta083.git
> 
> In 2016, I was unable to find better way to manufacture something like
> FS-GETA083.  At that time, using standard USB-A plug is more cheaper and
> easier.
> 
> Thus, in 2016, my conclusion was update to FST-01G.
> 
>     https://www.gniibe.org/memo/development/fst-01/fst-01-revision-g.html

Bookmarked.

Happy Hacking,
Tom Li
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 851 bytes
Desc: Digital signature
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20180207/8d33b458/attachment.sig>

From gniibe at fsij.org  Fri Feb  9 01:26:12 2018
From: gniibe at fsij.org (NIIBE Yutaka)
Date: Fri, 09 Feb 2018 09:26:12 +0900
Subject: GD32F103
In-Reply-To: <20180206191237.GA2872@x220>
References: <87607a6i07.fsf@iwagami.gniibe.org> <20180206191237.GA2872@x220>
Message-ID: <87y3k3atzv.fsf@fsij.org>

tomli at tomli.me wrote:
> In addition, GD32F103 has better ESD-ratings: 4 kV (HBM),
> while STM32F103 can only withstand 2 kV, it can increase the chance of
> survival of our Gnuk in case of an accident (I've accidentally destroyed
> two official FST-01s while trying to reprogram it, ESD is the only possible
> explanation came to my mind, so I learned how to properly ground myself
> and my workbench as a result, not too bad...)

You mean ESD-rating of the chip itself.

Well, I'd imagine ESD spark in Beijing in winter. :-)

For ESD protection from lines, I put a chip.  I think it works, if it's
from lines.

I don't put much efforts against ESD for the PCB design itself, but I
believe that most important factor is the strength of the chip itself.
If any suggestions, it's welcome.
-- 


From tomli at tomli.me  Sat Feb 10 19:27:17 2018
From: tomli at tomli.me (tomli at tomli.me)
Date: Sun, 11 Feb 2018 02:27:17 +0800
Subject: Status Update: HW Mysteriously Stopped Working. Development Suspended.
Message-ID: <20180210182717.GA146560@x220>

Hi.

I've received 5 pieces of GD32F103 for testing yesterday!

However, I tried to program the new board with a ST-Link-v2-compatible clone,
but it didn't work. Then I tried to program a knownly-working FST-01 board,
but found it still refused to work, despite the fact that the board was just
programmed by this programmer one day ago and working as a Gnuk token on the
computer. OpenOCD kept showing the wrong (low) target voltage.

I thought it was a wiring program, and tried to hook up the wires again, and
suddenly, the magic smoke came out from STM32F103 chip, unbelievable, the power
supply never exceeded 3 volts (and it was how I destroyed the other two FST-01s
in previous years, that I've mentioned in the mail earlier, the culprit was not
ESD but some hidden trap in my broken ST-Link clone?)

Today, I tried to use my Raspberry Pi as a SWD programmer by bitbanging, OpenOCD
was also to detect the presence of the device, but trapped into a infinite loop of
SWD handshaking as soon as SWD was detected.

I don't know if it's related to Gnuk. But I found that for cheap ST-Link clones,
it is problematic to issue RESET commands under some circumstances, like sleep
mode.

Tom Li
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 851 bytes
Desc: Digital signature
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20180211/9c901ddb/attachment.sig>

From f at 0x52.eu  Sat Feb 10 22:46:41 2018
From: f at 0x52.eu (Fox)
Date: Sat, 10 Feb 2018 22:46:41 +0100
Subject: Can't flash STM32F101
Message-ID: <d8911ff8-d9fb-1868-7612-c3d40ad45082@0x52.eu>

I have a St-link v2 STM32F101 from aliexpress (clone), and Im trying to
flash it with another one.
When I run tools/stlinkv2.py I get:
ST-Link/V2 version info: 2 17 4
Change ST-Link/V2 mode 0002 -> 0001
Core does not halt, try API V2 halt.
ValueError('Status of core is not halt.', 128)

What am I doing wrong?

-f0x



From gniibe at fsij.org  Tue Feb 13 04:18:42 2018
From: gniibe at fsij.org (NIIBE Yutaka)
Date: Tue, 13 Feb 2018 12:18:42 +0900
Subject: Can't flash STM32F101
In-Reply-To: <d8911ff8-d9fb-1868-7612-c3d40ad45082@0x52.eu>
References: <d8911ff8-d9fb-1868-7612-c3d40ad45082@0x52.eu>
Message-ID: <87r2ppy3u5.fsf@iwagami.gniibe.org>

Fox <f at 0x52.eu> wrote:
> I have a St-link v2 STM32F101 from aliexpress (clone), and Im trying to
> flash it with another one.
> When I run tools/stlinkv2.py I get:
> ST-Link/V2 version info: 2 17 4
> Change ST-Link/V2 mode 0002 -> 0001
> Core does not halt, try API V2 halt.
> ValueError('Status of core is not halt.', 128)

tools/stlinkv2.py would not be good.

You can try OpenOCD with options like:

    -f interface/stlink-v2.cfg -f target/stm32f1x.cfg

Or, if the firmware supports sleep mode, you need to connect nRST pin.
There are many variants of ST-Link/V2 clone, and some doesn't support
nRST pin.  Please describe which variant you have.
-- 


From mike at sowbug.com  Thu Feb 22 18:39:45 2018
From: mike at sowbug.com (Mike Tsao)
Date: Thu, 22 Feb 2018 17:39:45 +0000
Subject: Can't flash STM32F101
In-Reply-To: <d8911ff8-d9fb-1868-7612-c3d40ad45082@0x52.eu>
References: <d8911ff8-d9fb-1868-7612-c3d40ad45082@0x52.eu>
Message-ID: <CACi+kjpSE7YWrg+Oa_iVXsYvf0Yed3DBpoHB+u4tniDOQX2Hiw@mail.gmail.com>

This guide is very helpful: https://nx3d.org/gnuk-st-link-v2/ In
particular, pay attention to the photo at the bottom showing how to trigger
the reset functionality.

I was having trouble getting the reset timing right, so I did something
like this:

$ for i in `seq 1 500`; do stlink reset; stlink erase; stlink write [bin
filename] 0x08000000; done

which gave me enough time to hold the CLK/IO jumpers in place with one hand
and then drag another jumper across pins 7 and 8 on the STM32 chip to reset
it. Note that I was using https://github.com/texane/stlink/ with the
C8T6HACK modification at https://github.com/cabo/stlink. The arguments in
the bash command above are by memory and are likely incorrect, but you get
the idea: wrap a reset/erase/write sequence in a big loop.

Finally, note that there are at least three different manufacturers of
ST-Link v2 clones, and for some unknown reason they do not all use the same
pinout for the four terminal points. You will need a continuity tester to
establish the function of the four points, or if you are reckless, you can
use trial and error and hope you figure it out without shorting out a
component. For one of mine, the power terminals were the outer two points,
and SWDIO was the middle one closer to the USB plug, and SWCLK was the
other one in the middle.

On Sat, Feb 10, 2018 at 3:48 PM Fox <f at 0x52.eu> wrote:

> I have a St-link v2 STM32F101 from aliexpress (clone), and Im trying to
> flash it with another one.
> When I run tools/stlinkv2.py I get:
> ST-Link/V2 version info: 2 17 4
> Change ST-Link/V2 mode 0002 -> 0001
> Core does not halt, try API V2 halt.
> ValueError('Status of core is not halt.', 128)
>
> What am I doing wrong?
>
> -f0x
>
>
> _______________________________________________
> Gnuk-users mailing list
> Gnuk-users at gnupg.org
> https://lists.gnupg.org/mailman/listinfo/gnuk-users
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20180222/7532a22a/attachment.html>

From tomli at tomli.me  Sat Feb 24 11:18:20 2018
From: tomli at tomli.me (tomli at tomli.me)
Date: Sat, 24 Feb 2018 18:18:20 +0800
Subject: Status Update: Initial Experiments with the GD32 chip
Message-ID: <20180224101820.GA63080@x220>

Hello Niibe.

I got a new working ST-Link programmer and did some experiments on this GD32
chip in this week.

But the USB was not working, presumably due to timings and clock differences
between the two chips. I'm going to purchase an official development board
to help with my continued experiments, otherwise it's difficult to trace
the program dlown.

Here's my progress:

1. Because the property of the underlying flash technology by GigaDevice,
the first 32 KiB of the flash is zero-wait for reading, but the writing and
erasing of the chip is significantly much more longer than STM32, as a
result, the programming software needs some modifications.

The official application notes recommends:

    i)  increase the erase timeout per page to 300ms,
        increase the mass erase timeout to 3s.

    ii) increase the program time per word to 2ms,
        increase the program time per page to 300ms.

In addition, the access time for data behind of first 32 KiB is slow,
one should put timing-crtitial data at the beginning of the flash chip.

Gnuk also needs to adjust the timeout values for erasing and writing to
the flash.

2. The GigaDevice flash doesn't support "block write" mode, which is the
default mode to program the flash on OpenOCD, further, OpenOCD will fall
back to single halfword (16-bit) accesses when block write is not available,
however, it's also doesn't work on this flash. The only known working mode
on this chip is the 32-bit fullword access.

I've implemented a patch to hack OpenOCD quickly and dirtily and make it work
with GD32, but it will break STM32 chips, the longterm solution is adding
additional code and merge it to the upstream.

3. GD32 implemented extra readout protection modes, custom instructions is
needed to remove the protections for programming and testing. The protections
are observed to switch on automatically after __every power cycle__. I believe
it's a proactive protection againist physical tampering.

4. Because it only has a USB prescaler of 1, 1.5, 2 and 2.5, it is not possible to
get the 48 MHz USB clock on the standard maximum frequence, 105 MHz. The maximum
frequency with a working USB is 96 MHz, or a overclocked, out-of-spec 120 MHz.
Nevertheless, 96 MHz is still a huge improvement.

5. Even on the same frequency, the application notes claimed some instructions may
run faster than its STM32 counterpart. According to the application notes,

    void delay(void)
    { 
        uint8_t i;
        for(i = 0; i < 75; i++);
    }

7.4 us on STM32,
5.4 us on GD32.

By the way, the HSE clock needs a longer time to start and settle, but it's
irrelevant to Gnuk since chopstx uses a infinite loop to wait for HSE.

6. I still have problem with USB enumeration and the chip cannot be recognized
by the computer. Sometimes the USB CDC demo in chopstx works, sometimes it doesn't,
Gnuk simply hangs.

This is probably a problem caused by the differences of the clocks and timings
of the two chips, perhaps a software thing, perhaps a hardware thing.

I'm going to order and wait for the official development board and uses it as the
reference platform for further testing, otherwise it's going to be clueless.

I think I'd better not to send my chips to you for now, or it will be very confusing
and frustrating with the chip. Meanwhile, you could see if there are avaliable development
board for sale on AliExpress, once the program runs flawlessly on the development board,
I can send a bunch of the QFN chips to you for the new FST-01.

7. The hacky patch is attached at the bottom of this email. After applying the patch,
to program a GD32 chip, one needs the following:

# Disable Readout Protection 
openocd -f interface/stlink-v2.cfg -f target/stm32f1x.cfg -c init -c 'reset halt' \
        -c 'mdb 0x1ffff800 12'         -c 'sleep 100' \
        -c 'mww 0x40022004 0x45670123' -c 'sleep 100' \
        -c 'mww 0x40022004 0xcdef89ab' -c 'sleep 100' \
        -c 'mww 0x40022008 0x45670123' -c 'sleep 100' \
        -c 'mww 0x40022008 0xcdef89ab' -c 'sleep 100' \
        -c 'mww 0x40022010 0x00000260' -c 'sleep 100' \
        -c 'mww 0x40022010 0x00000210' -c 'sleep 100' \
        -c 'mwh 0x1ffff800 0x5aa5'     -c 'sleep 100' \
        -c 'shutdown'

# Disable Page Write Protection
# TODO: What is this exactly? What code is needed to change for Gnuk?
openocd -f interface/stlink-v2.cfg -f target/stm32f1x.cfg -c init -c 'reset halt' \
        -c 'mdb 0x1ffff800 12'         -c 'sleep 100' \
        -c 'mww 0x40022004 0x45670123' -c 'sleep 100' \
        -c 'mww 0x40022004 0xcdef89ab' -c 'sleep 100' \    
        -c 'mww 0x40022008 0x45670123' -c 'sleep 100' \
        -c 'mww 0x40022008 0xcdef89ab' -c 'sleep 100' \
        -c 'mww 0x40022010 0x00000210' -c 'sleep 100' \        
        -c 'mwh 0x1ffff802 0xff00'     -c 'sleep 100' \    
        -c 'mwh 0x1ffff804 0xff00'     -c 'sleep 100' \
        -c 'mwh 0x1ffff806 0xff00'     -c 'sleep 100' \
        -c 'mwh 0x1ffff808 0x00ff'     -c 'sleep 100' \
        -c 'mwh 0x1ffff80a 0x00ff'     -c 'sleep 100' \
        -c 'mww 0x40022010 0x00000080' -c 'sleep 100' \
        -c 'mdb 0x1ffff800 12'         -c 'mdw 0x4002201c 1' \
        -c 'shutdown'

# Mass Erase
openocd -f interface/stlink-v2.cfg -f target/stm32f1x.cfg -c init -c 'reset halt' \
        -c 'flash erase_sector 0 0 31' \
        -c 'shutdown'

# Program a .bin to 0x08000000, ELF should be okay too
openocd -f interface/stlink-v2.cfg -f target/stm32f1x.cfg -c init -c 'reset halt' \
        -c 'flash write_image gnuk-vidpid.bin 0x8000000 bin'
        -c 'shutdown'

Using other commands such as "mass_erase" or "program" may not work, because of the
differences mentioned above.


Happy Hacking,
Tom Li

---
diff -uprN openocd-0.10.0/src/flash/nor/stm32f1x.c openocd-0.10.0.hack/src/flash/nor/stm32f1x.c
--- openocd-0.10.0/src/flash/nor/stm32f1x.c	2016-12-25 22:12:54.000000000 +0800
+++ openocd-0.10.0/src/flash/nor/stm32f1x.c	2018-02-19 07:26:57.097567934 +0800
@@ -102,8 +102,8 @@
 
 /* timeout values */
 
-#define FLASH_WRITE_TIMEOUT 10
-#define FLASH_ERASE_TIMEOUT 100
+#define FLASH_WRITE_TIMEOUT 255
+#define FLASH_ERASE_TIMEOUT 255
 
 struct stm32x_options {
 	uint16_t RDP;
@@ -163,7 +163,7 @@ static inline int stm32x_get_flash_statu
 	return target_read_u32(target, stm32x_get_flash_reg(bank, STM32_FLASH_SR), status);
 }
 
-static int stm32x_wait_status_busy(struct flash_bank *bank, int timeout)
+static int stm32x_wait_status_busy(struct flash_bank *bank, unsigned int timeout)
 {
 	struct target *target = bank->target;
 	uint32_t status;
@@ -736,30 +736,21 @@ static int stm32x_write(struct flash_ban
 	if (retval != ERROR_OK)
 		goto cleanup;
 
-	/* try using a block write */
-	retval = stm32x_write_block(bank, buffer, offset, words_remaining);
+	while (words_remaining > 0) {
+		uint32_t value;
+		memcpy(&value, buffer, sizeof(uint32_t));
 
-	if (retval == ERROR_TARGET_RESOURCE_NOT_AVAILABLE) {
-		/* if block write failed (no sufficient working area),
-		 * we use normal (slow) single halfword accesses */
-		LOG_WARNING("couldn't use block writes, falling back to single memory accesses");
-
-		while (words_remaining > 0) {
-			uint16_t value;
-			memcpy(&value, buffer, sizeof(uint16_t));
-
-			retval = target_write_u16(target, bank->base + offset, value);
-			if (retval != ERROR_OK)
-				goto reset_pg_and_lock;
-
-			retval = stm32x_wait_status_busy(bank, 5);
-			if (retval != ERROR_OK)
-				goto reset_pg_and_lock;
-
-			words_remaining--;
-			buffer += 2;
-			offset += 2;
-		}
+		retval = target_write_u32(target, bank->base + offset, value);
+		if (retval != ERROR_OK)
+			goto reset_pg_and_lock;
+
+		retval = stm32x_wait_status_busy(bank, FLASH_ERASE_TIMEOUT);
+		if (retval != ERROR_OK)
+			goto reset_pg_and_lock;
+
+		words_remaining -= 2;
+		buffer += 4;
+		offset += 4;
 	}
 
 reset_pg_and_lock:
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 851 bytes
Desc: Digital signature
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20180224/3687ccd8/attachment.sig>

From gniibe at fsij.org  Thu Mar  1 02:58:51 2018
From: gniibe at fsij.org (NIIBE Yutaka)
Date: Thu, 01 Mar 2018 10:58:51 +0900
Subject: Status Update: Initial Experiments with the GD32 chip
In-Reply-To: <20180224101820.GA63080@x220>
References: <20180224101820.GA63080@x220>
Message-ID: <878tbcblpg.fsf@iwagami.gniibe.org>

tomli at tomli.me wrote:
> I got a new working ST-Link programmer and did some experiments on this GD32
> chip in this week.

Thanks a lot for sharing your experience.  It is quite interesting.

Could you please confirm two things.

  (1) Zero-wait state access to flash
  (2) 16-bit halfword access in flash programming

According to my reading of the GD32F103x User Manual, both are
supported (in the section 2. Flash memory controller).

> 1. Because the property of the underlying flash technology by GigaDevice,
> the first 32 KiB of the flash is zero-wait for reading, but the writing and
> erasing of the chip is significantly much more longer than STM32, as a
> result, the programming software needs some modifications.
>
> The official application notes recommends:
>
>     i)  increase the erase timeout per page to 300ms,
>         increase the mass erase timeout to 3s.
>
>     ii) increase the program time per word to 2ms,
>         increase the program time per page to 300ms.

While this is acceptable...

> In addition, the access time for data behind of first 32 KiB is slow,
> one should put timing-crtitial data at the beginning of the flash chip.

... This would be not.  I thought as if internal SRAM copies full of
128KiB.  I wonder how slow it is.. and/or if it is OK (in China)
advertising the chip as "zero-wait access" when it's only partially
(quarter) true.

If it's only for the first 32KiB, I would not like to use this chip...

Zero-wait is important for killing an attack vector of possible timing
attack.

> 2. The GigaDevice flash doesn't support "block write" mode, which is the
> default mode to program the flash on OpenOCD, further, OpenOCD will fall
> back to single halfword (16-bit) accesses when block write is not available,
> however, it's also doesn't work on this flash. The only known working mode
> on this chip is the 32-bit fullword access.

Currently, the use of data in flash by Gnuk (the data format) depends on
halfword size access.

We will need major change if 16-bit access is not supported.

> 6. I still have problem with USB enumeration and the chip cannot be
> recognized by the computer. Sometimes the USB CDC demo in chopstx
> works, sometimes it doesn't, Gnuk simply hangs.

It sounds like it's an issue (or two) of USB driver.  I mean, software.

> I'm going to order and wait for the official development board and
> uses it as the reference platform for further testing, otherwise it's
> going to be clueless.

OK.  Let's see.

Today, I find this one:

   https://www.tindie.com/products/maxtch/sushibits-arm-development-kits/

It seems it's from Shanghai.  I'll try to find other.
-- 


From alex at nitrokey.com  Mon Mar  5 10:26:16 2018
From: alex at nitrokey.com (Alexander Paetzelt | Nitrokey)
Date: Mon, 5 Mar 2018 10:26:16 +0100
Subject: Gnuk version 1.2.8 considered stable for production use?
Message-ID: <42c2a815-c3c3-49f5-26bd-a9740571f3cd@nitrokey.com>

Hi NIIBE,

would you recommend to make use of the newest version of Gnuk (1.2.8) in
production (after some testing of course). As you did some vital changes
due to the admin-less factory-reset we would be interested in using it
for our Nitrokey Start...

Kind regards
Alex



From gniibe at fsij.org  Tue Mar  6 07:31:00 2018
From: gniibe at fsij.org (NIIBE Yutaka)
Date: Tue, 06 Mar 2018 15:31:00 +0900
Subject: Gnuk version 1.2.8 considered stable for production use?
In-Reply-To: <42c2a815-c3c3-49f5-26bd-a9740571f3cd@nitrokey.com>
References: <42c2a815-c3c3-49f5-26bd-a9740571f3cd@nitrokey.com>
Message-ID: <87k1upemvv.fsf@iwagami.gniibe.org>

Alexander Paetzelt | Nitrokey <alex at nitrokey.com> wrote:
> would you recommend to make use of the newest version of Gnuk (1.2.8) in
> production (after some testing of course).

I sold FST-01G with Gnuk 1.2.8 at FOSDEM.  So, it is relatively better
release, I suppose.

After the release, I found a bug of KDF DO object access.  It's better
to be applied.

For next step, I'm currently considering about possible format change of
counters (signature counter, PIN error counter), data objects, and
private keys.  Typical use case is that only information of counters is
updated, data objects and keys are only written at personalization time.
Current code highly depends on the MCU; That is, NOR flash of 16-bit
word-size, which allows update by writing zero.
-- 


From gniibe at fsij.org  Tue Mar 13 06:13:38 2018
From: gniibe at fsij.org (NIIBE Yutaka)
Date: Tue, 13 Mar 2018 14:13:38 +0900
Subject: Gnuk version 1.2.8 considered stable for production use?
In-Reply-To: <87k1upemvv.fsf@iwagami.gniibe.org>
References: <42c2a815-c3c3-49f5-26bd-a9740571f3cd@nitrokey.com>
 <87k1upemvv.fsf@iwagami.gniibe.org>
Message-ID: <874llk5zi5.fsf@iwagami.gniibe.org>

Today, I found a bug of factory-reset.  Fix is now pushed.

Please note that you need to update your installation procedure;
Typing "make" only builds build/gnuk.elf (and others).  You need to
invoke "make build/gnuk-vidpid.elf" to get the image with VID:PID.
And it is gnuk-vidpid.bin to be flashed.
-- 


From gniibe at fsij.org  Thu Apr  5 08:32:48 2018
From: gniibe at fsij.org (NIIBE Yutaka)
Date: Thu, 05 Apr 2018 15:32:48 +0900
Subject: Gnuk version 1.2.9
Message-ID: <87zi2i2men.fsf@iwagami.gniibe.org>

Hello,

Gnuk version 1.2.9 is released.

	tag release/1.2.9
	Tagger: NIIBE Yutaka <gniibe at fsij.org>
	Date:   Thu Apr 5 14:02:20 2018 +0900
	commit 24adc0940641f9108aafa03f1d9681d3c63173bb


While I implement --card-edit/kdf-setup command in GnuPG (in forthcoming
2.2.6), I also put some tests in gnuk/tests/.

Then, some bugs were found and fixed.

Since I realized that full KDF Data Object is not compatible to
admin-less mode, I added "single-salt" KDF Data Object, which share the
single salt among user/admin/resetcode.

Please note that when you setup KDF on your token, you can only use it
with newer GnuPG.
-- 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 227 bytes
Desc: not available
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20180405/96f6c35d/attachment.sig>

From marian.buschsieweke at ovgu.de  Fri Apr  6 18:26:18 2018
From: marian.buschsieweke at ovgu.de (Marian Buschsieweke)
Date: Fri, 6 Apr 2018 18:26:18 +0200
Subject: USB vendor ID 0000 on Blue Pill
Message-ID: <20180406182618.2d3ff0d3@faultier2go>

Hi,

I tried to flash gnuk on my STM32F103 blue pill board, but the USB vendor ID
is detected as 0000.

Steps to reproduce:

1. Build:
  ./configure --vidpid=234b:0000 --target=BLUE_PILL && make

2. Connect Blue Pill via USB-TTL adapter:
  A9   <--> RX
  A10  <--> TX
  3.3V <--> 3.3 V
  GND  <--> GND

3. Flash
  - Set boot0 to 1, boot1 to 0, plug USB-TTL adapter in
  - stm32flash -w build/gnuk.bin -v -g 0x0 /dev/ttyUSB0

4. Remove cables and set boot0 to 0, boot1 to 0 and connect Blue Pill board to
   USB

Output of dmesg:

[26499.499164] usb 1-3.2: new full-speed USB device number 77 using xhci_hcd
[26499.605549] usb 1-3.2: New USB device found, idVendor=0000, idProduct=0000
                                                         ^^^^
                                                         Wrong vendor ID
[26499.605556] usb 1-3.2: New USB device strings: Mfr=1, Product=2, SerialNumber=3
[26499.605559] usb 1-3.2: Product: Gnuk Token
[26499.605562] usb 1-3.2: Manufacturer: Free Software Initiative of Japan
[26499.605565] usb 1-3.2: SerialNumber: FSIJ-1.2.9-43223327

Does anyone know what went wrong? Thanks for your help!

Kind regards,
Marian

PS: I'm using the Blue Pill clone:
http://wiki.stm32duino.com/index.php?title=RobotDyn_Black_Pill


From mike at sowbug.com  Sat Apr  7 02:03:12 2018
From: mike at sowbug.com (Mike Tsao)
Date: Sat, 07 Apr 2018 00:03:12 +0000
Subject: USB vendor ID 0000 on Blue Pill
In-Reply-To: <20180406182618.2d3ff0d3@faultier2go>
References: <20180406182618.2d3ff0d3@faultier2go>
Message-ID: <CACi+kjpAQscCpo8HTrNWPiPNfg0zdVHQf7BKfviajBQPoRZL7A@mail.gmail.com>

You have to build the VID/PID into the image you're flashing:

$ make build/gnuk-vidpid.elf

This is a recent change to the project. I missed it at first, too, but it's
mentioned in the README at line 410. I don't know why make is a separate
step from make build/gnuk-vidpid.elf.

I don't remember off the top of my head whether you have to flash the
gnuk-vidpid.hex file rather than just gnuk.hex.

On Fri, Apr 6, 2018 at 12:10 PM Marian Buschsieweke <
marian.buschsieweke at ovgu.de> wrote:

> Hi,
>
> I tried to flash gnuk on my STM32F103 blue pill board, but the USB vendor
> ID
> is detected as 0000.
>
> Steps to reproduce:
>
> 1. Build:
>   ./configure --vidpid=234b:0000 --target=BLUE_PILL && make
>
> 2. Connect Blue Pill via USB-TTL adapter:
>   A9   <--> RX
>   A10  <--> TX
>   3.3V <--> 3.3 V
>   GND  <--> GND
>
> 3. Flash
>   - Set boot0 to 1, boot1 to 0, plug USB-TTL adapter in
>   - stm32flash -w build/gnuk.bin -v -g 0x0 /dev/ttyUSB0
>
> 4. Remove cables and set boot0 to 0, boot1 to 0 and connect Blue Pill
> board to
>    USB
>
> Output of dmesg:
>
> [26499.499164] usb 1-3.2: new full-speed USB device number 77 using
> xhci_hcd
> [26499.605549] usb 1-3.2: New USB device found, idVendor=0000,
> idProduct=0000
>                                                          ^^^^
>                                                          Wrong vendor ID
> [26499.605556] usb 1-3.2: New USB device strings: Mfr=1, Product=2,
> SerialNumber=3
> [26499.605559] usb 1-3.2: Product: Gnuk Token
> [26499.605562] usb 1-3.2: Manufacturer: Free Software Initiative of Japan
> [26499.605565] usb 1-3.2: SerialNumber: FSIJ-1.2.9-43223327
>
> Does anyone know what went wrong? Thanks for your help!
>
> Kind regards,
> Marian
>
> PS: I'm using the Blue Pill clone:
> http://wiki.stm32duino.com/index.php?title=RobotDyn_Black_Pill
>
> _______________________________________________
> Gnuk-users mailing list
> Gnuk-users at gnupg.org
> https://lists.gnupg.org/mailman/listinfo/gnuk-users
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20180407/f050128d/attachment.html>

From marian.buschsieweke at ovgu.de  Sat Apr  7 17:41:58 2018
From: marian.buschsieweke at ovgu.de (Marian Buschsieweke)
Date: Sat, 7 Apr 2018 17:41:58 +0200
Subject: USB vendor ID 0000 on Blue Pill
In-Reply-To: <CACi+kjpAQscCpo8HTrNWPiPNfg0zdVHQf7BKfviajBQPoRZL7A@mail.gmail.com>
References: <20180406182618.2d3ff0d3@faultier2go>
 <CACi+kjpAQscCpo8HTrNWPiPNfg0zdVHQf7BKfviajBQPoRZL7A@mail.gmail.com>
Message-ID: <20180407174158.2bd49482@faultier2go>

Hi,

thank you very much :-)

Any chance the default make gets changed so that build/gnuk-vidpid.elf is build
by default?

A quick and dirty hack to achieve this behavior is attached.

Kind regards,
Marian

On Sat, 07 Apr 2018 00:03:12 +0000
Mike Tsao <mike at sowbug.com> wrote:

> You have to build the VID/PID into the image you're flashing:
> 
> $ make build/gnuk-vidpid.elf
> 
> This is a recent change to the project. I missed it at first, too, but it's
> mentioned in the README at line 410. I don't know why make is a separate
> step from make build/gnuk-vidpid.elf.
> 
> I don't remember off the top of my head whether you have to flash the
> gnuk-vidpid.hex file rather than just gnuk.hex.
> 
> On Fri, Apr 6, 2018 at 12:10 PM Marian Buschsieweke <
> marian.buschsieweke at ovgu.de> wrote:  
> 
> > Hi,
> >
> > I tried to flash gnuk on my STM32F103 blue pill board, but the USB vendor
> > ID
> > is detected as 0000.
> >
> > Steps to reproduce:
> >
> > 1. Build:
> >   ./configure --vidpid=234b:0000 --target=BLUE_PILL && make
> >
> > 2. Connect Blue Pill via USB-TTL adapter:
> >   A9   <--> RX
> >   A10  <--> TX
> >   3.3V <--> 3.3 V
> >   GND  <--> GND
> >
> > 3. Flash
> >   - Set boot0 to 1, boot1 to 0, plug USB-TTL adapter in
> >   - stm32flash -w build/gnuk.bin -v -g 0x0 /dev/ttyUSB0
> >
> > 4. Remove cables and set boot0 to 0, boot1 to 0 and connect Blue Pill
> > board to
> >    USB
> >
> > Output of dmesg:
> >
> > [26499.499164] usb 1-3.2: new full-speed USB device number 77 using
> > xhci_hcd
> > [26499.605549] usb 1-3.2: New USB device found, idVendor=0000,
> > idProduct=0000
> >                                                          ^^^^
> >                                                          Wrong vendor ID
> > [26499.605556] usb 1-3.2: New USB device strings: Mfr=1, Product=2,
> > SerialNumber=3
> > [26499.605559] usb 1-3.2: Product: Gnuk Token
> > [26499.605562] usb 1-3.2: Manufacturer: Free Software Initiative of Japan
> > [26499.605565] usb 1-3.2: SerialNumber: FSIJ-1.2.9-43223327
> >
> > Does anyone know what went wrong? Thanks for your help!
> >
> > Kind regards,
> > Marian
> >
> > PS: I'm using the Blue Pill clone:
> > http://wiki.stm32duino.com/index.php?title=RobotDyn_Black_Pill
> >
> > _______________________________________________
> > Gnuk-users mailing list
> > Gnuk-users at gnupg.org
> > https://lists.gnupg.org/mailman/listinfo/gnuk-users
> >  

-------------- next part --------------
A non-text attachment was scrubbed...
Name: 0001-Makefile-Added-default-target.patch
Type: text/x-patch
Size: 740 bytes
Desc: not available
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20180407/78d9a342/attachment.bin>

From gniibe at fsij.org  Mon Apr  9 04:15:31 2018
From: gniibe at fsij.org (NIIBE Yutaka)
Date: Mon, 09 Apr 2018 11:15:31 +0900
Subject: USB vendor ID 0000 on Blue Pill
In-Reply-To: <20180407174158.2bd49482@faultier2go>
References: <20180406182618.2d3ff0d3@faultier2go>
 <CACi+kjpAQscCpo8HTrNWPiPNfg0zdVHQf7BKfviajBQPoRZL7A@mail.gmail.com>
 <20180407174158.2bd49482@faultier2go>
Message-ID: <87sh85cegs.fsf@iwagami.gniibe.org>

Marian Buschsieweke <marian.buschsieweke at ovgu.de> wrote:
> Any chance the default make gets changed so that build/gnuk-vidpid.elf
> is build by default?

The last step was introduced, so that people can do:

(1) Distribute the binary image gnuk.elf, gnuk.bin, gnuk.hex (or
    whatever) without VID-PID

and it means:

(2) Encourage reproducible build, or make it easier to check if
    it's correctly built or not

I wanted to make sure that the image by default build doesn't contain
VID-PID, even if it is specified at configure time.

Adding "default" to build/gnuk-vidpid.elf will go other way, I'm afraid.

Or... is it better to default to the image with VID-PID, changing the
last step to generate distribution image withno VID-PID?  I wonder.
-- 


From marian.buschsieweke at ovgu.de  Mon Apr  9 11:07:31 2018
From: marian.buschsieweke at ovgu.de (Marian Buschsieweke)
Date: Mon, 9 Apr 2018 11:07:31 +0200
Subject: USB vendor ID 0000 on Blue Pill
In-Reply-To: <c307c94b-039d-58b9-4dd4-129488a5f627@digitalbrains.com>
References: <20180406182618.2d3ff0d3@faultier2go>
 <CACi+kjpAQscCpo8HTrNWPiPNfg0zdVHQf7BKfviajBQPoRZL7A@mail.gmail.com>
 <20180407174158.2bd49482@faultier2go>
 <87sh85cegs.fsf@iwagami.gniibe.org>
 <c307c94b-039d-58b9-4dd4-129488a5f627@digitalbrains.com>
Message-ID: <20180409110731.1d2671d5@faultier2go>

Hi,

imho the new naming convention suggested by Peter Lebbing is more obvious and
has the advantage to remain compatible with old HowTos.

Also, I personally believe there is no harm in building building both versions
by default. This also seems to me the more common case that users want the
image with vid & pid included, so it would be nice to have this case covered by
default.

Kind regards,
Marian

-------------------------------------------------------------
M.Sc. Marian Buschsieweke
Dept. Communication and Networked Systems (ComSys)
Institute for Intelligent Cooperating Systems (IKS)
Otto-von-Guericke-University of Magdeburg
Universit?tsplatz 2, Building 29, Room 314
39106 Magdeburg
Germany

http://www.comsys.ovgu.de/Team/Marian+Buschsieweke.html
Tel.: +49 - 391 - 67 - 52673
Fax:  +49 - 391 - 67 - 41161

-------------------------------------------------------------

On Mon, 9 Apr 2018 10:55:23 +0200
Peter Lebbing <peter at digitalbrains.com> wrote:

> On 09/04/18 04:15, NIIBE Yutaka wrote:
> > Or... is it better to default to the image with VID-PID, changing the
> > last step to generate distribution image withno VID-PID?  I wonder.  
> 
> Right now, you explicitly name the image /with/ a VID and PID. But maybe
> people will pick up quicker on the way it works when you explicitly name
> the image /without/ a VID and PID.
> 
> Instead of
> gnuk.bin/.hex/.elf/...
> gnuk-vidpid.bin/.hex/.elf/...
> 
> Name them
> gnuk-novidpid.bin/...
> gnuk.bin/...
> 
> That way, the name is a red flag to anyone trying to flash the former,
> and they will consult the documentation to find out what step they are
> missing.
> 
> HTH,
> 
> Peter.
> 

-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 228 bytes
Desc: OpenPGP digital signature
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20180409/d1d19164/attachment.sig>

From peter at digitalbrains.com  Mon Apr  9 10:55:23 2018
From: peter at digitalbrains.com (Peter Lebbing)
Date: Mon, 9 Apr 2018 10:55:23 +0200
Subject: USB vendor ID 0000 on Blue Pill
In-Reply-To: <87sh85cegs.fsf@iwagami.gniibe.org>
References: <20180406182618.2d3ff0d3@faultier2go>
 <CACi+kjpAQscCpo8HTrNWPiPNfg0zdVHQf7BKfviajBQPoRZL7A@mail.gmail.com>
 <20180407174158.2bd49482@faultier2go> <87sh85cegs.fsf@iwagami.gniibe.org>
Message-ID: <c307c94b-039d-58b9-4dd4-129488a5f627@digitalbrains.com>

On 09/04/18 04:15, NIIBE Yutaka wrote:
> Or... is it better to default to the image with VID-PID, changing the
> last step to generate distribution image withno VID-PID?  I wonder.

Right now, you explicitly name the image /with/ a VID and PID. But maybe
people will pick up quicker on the way it works when you explicitly name
the image /without/ a VID and PID.

Instead of
gnuk.bin/.hex/.elf/...
gnuk-vidpid.bin/.hex/.elf/...

Name them
gnuk-novidpid.bin/...
gnuk.bin/...

That way, the name is a red flag to anyone trying to flash the former,
and they will consult the documentation to find out what step they are
missing.

HTH,

Peter.

-- 
I use the GNU Privacy Guard (GnuPG) in combination with Enigmail.
You can send me encrypted mail if you want some privacy.
My key is available at <http://digitalbrains.com/2012/openpgp-key-peter>


From marian.buschsieweke at ovgu.de  Tue Apr 10 11:36:25 2018
From: marian.buschsieweke at ovgu.de (Marian Buschsieweke)
Date: Tue, 10 Apr 2018 11:36:25 +0200
Subject: Setting the Gnuk serial
Message-ID: <20180410113625.56b83ee3@faultier2go>

Hi,

sadly I'm unable to set the serial of my Gnuk device. Any pointers what went
wrong?

env EMAIL=marian.buschsieweke at ovgu.de ./gnuk_put_binary_libusb.py -p -s ../GNUK_SERIAL_NUMBER 
Admin password: 
Writing serial number
Device: 
Configuration: 1
Interface: 0
Traceback (most recent call last):
  File "./gnuk_put_binary_libusb.py", line 111, in <module>
    main(fileid, is_update, data, passwd)
  File "./gnuk_put_binary_libusb.py", line 54, in main
    gnuk.cmd_write_binary(fileid, data, is_update)
  File "/home/maribu/Repos/software/gnuk/tool/gnuk_token.py", line 288, in cmd_write_binary
    raise ValueError("cmd_write_binary 0", "%02x%02x" % (sw[0], sw[1]))
ValueError: ('cmd_write_binary 0', '6581')

Kind regards,
Marian
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 228 bytes
Desc: OpenPGP digital signature
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20180410/5ba40e66/attachment.sig>

From lovro at oreskovic.me  Thu Apr 12 18:36:16 2018
From: lovro at oreskovic.me (=?UTF-8?B?TG92cm8gT3JlxaFrb3ZpxIc=?=)
Date: Thu, 12 Apr 2018 18:36:16 +0200
Subject: I'm not able to set vid and pid
Message-ID: <CAKbgnVXZCpS8b=Erejw_caoonSuiFhR9LiTctHwm_Lm-WARc4A@mail.gmail.com>

So let me start from the end

I can see the FST01 with gnuk firmware on it with lsusb, you can see the
verbose output at the end of the email [1].
The problem is the vid and pid are set to 0000:0000

I tried building the binary a couple of ways, but it is also the same when
I use docker (versions of programs installed on my machine should not be a
problem this way)
I am using this command to build it:
env GNUK_CONFIG="--target=FST_01 --vidpid=234b:0000" make all

I can see the gnuk when I start gpg --card-status as root. [2]

I am using stlinkv2 (chinese clone) (both with  2.17.4 and  2.30.7 firmware
versions)

Let me just add to unlock the rom I first need to run this command
sudo openocd -f /usr/local/share/openocd/scripts/interface/stlink-v2.cfg
-f /usr/local/share/openocd/scripts/target/stm32f1x.cfg -c "init; reset
halt; shutdown"
while pulling reset to ground then letting it go half way through the
command, if I do not do that I get ValueError('Status of core is not
halt.', 128) when trying to run sudo python2 ../tool/stlinkv2.py -u

I have tried a lot of combinations but in the end all of them end up with
the FST01 having vid and pid set to 0000:0000.

So, thnx in advance,
does anybody have any pointers?

Lovro

[1]
Bus 002 Device 096: ID 0000:0000
Device Descriptor:
  bLength                18
  bDescriptorType         1
  bcdUSB               2.00
  bDeviceClass            0 (Defined at Interface level)
  bDeviceSubClass         0
  bDeviceProtocol         0
  bMaxPacketSize0        64
  idVendor           0x0000
  idProduct          0x0000
  bcdDevice            0.00
  iManufacturer           1 Free Software Initiative of Japan
  iProduct                2 Gnuk Token
  iSerial                 3 FSIJ-1.2.9-87022328
  bNumConfigurations      1
  Configuration Descriptor:
    bLength                 9
    bDescriptorType         2
    wTotalLength           93
    bNumInterfaces          1
    bConfigurationValue     1
    iConfiguration          0
    bmAttributes         0x80
      (Bus Powered)
    MaxPower              100mA
    Interface Descriptor:
      bLength                 9
      bDescriptorType         4
      bInterfaceNumber        0
      bAlternateSetting       0
      bNumEndpoints           3
      bInterfaceClass        11 Chip/SmartCard
      bInterfaceSubClass      0
      bInterfaceProtocol      0
      iInterface              0
      ChipCard Interface Descriptor:
        bLength                54
        bDescriptorType        33
        bcdCCID              1.10  (Warning: Only accurate for version 1.0)
        nMaxSlotIndex           0
        bVoltageSupport         1  5.0V
        dwProtocols             2  T=1
        dwDefaultClock       4000
        dwMaxiumumClock      4000
        bNumClockSupported      0
        dwDataRate           9600 bps
        dwMaxDataRate        9600 bps
        bNumDataRatesSupp.      0
        dwMaxIFSD             254
        dwSyncProtocols  00000000
        dwMechanical     00000000
        dwFeatures       0002047A
          Auto configuration based on ATR
          Auto voltage selection
          Auto clock change
          Auto baud rate change
          Auto parameter negotation made by CCID
          Auto IFSD exchange
          Short APDU level exchange
        dwMaxCCIDMsgLen       271
        bClassGetResponse    echo
        bClassEnvelope         FF
        wlcdLayout           none
        bPINSupport             0
        bMaxCCIDBusySlots       1
      Endpoint Descriptor:
        bLength                 7
        bDescriptorType         5
        bEndpointAddress     0x81  EP 1 IN
        bmAttributes            2
          Transfer Type            Bulk
          Synch Type               None
          Usage Type               Data
        wMaxPacketSize     0x0040  1x 64 bytes
        bInterval               0
      Endpoint Descriptor:
        bLength                 7
        bDescriptorType         5
        bEndpointAddress     0x01  EP 1 OUT
        bmAttributes            2
          Transfer Type            Bulk
          Synch Type               None
          Usage Type               Data
        wMaxPacketSize     0x0040  1x 64 bytes
        bInterval               0
      Endpoint Descriptor:
        bLength                 7
        bDescriptorType         5
        bEndpointAddress     0x82  EP 2 IN
        bmAttributes            3
          Transfer Type            Interrupt
          Synch Type               None
          Usage Type               Data
        wMaxPacketSize     0x0004  1x 4 bytes
        bInterval             255
Device Status:     0x0000
  (Bus Powered)

[2]
Reader ...........: 0000:0000:FSIJ-1.2.9-87022328:0
Application ID ...: D276000124010200FFFE870223280000
Version ..........: 2.0
Manufacturer .....: unmanaged S/N range
Serial number ....: 87022328
Name of cardholder: [not set]
Language prefs ...: [not set]
Sex ..............: unspecified
URL of public key : [not set]
Login data .......: [not set]
Signature PIN ....: forced
Key attributes ...: rsa2048 rsa2048 rsa2048
Max. PIN lengths .: 127 127 127
PIN retry counter : 3 3 3
Signature counter : 0
Signature key ....: [none]
Encryption key....: [none]
Authentication key: [none]
General key info..: [none]

-- 
http://lovro.oreskovic.me
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20180412/e3159c25/attachment.html>

From marian.buschsieweke at ovgu.de  Thu Apr 12 21:05:44 2018
From: marian.buschsieweke at ovgu.de (Marian Buschsieweke)
Date: Thu, 12 Apr 2018 21:05:44 +0200
Subject: I'm not able to set vid and pid
In-Reply-To: <CAKbgnVXZCpS8b=Erejw_caoonSuiFhR9LiTctHwm_Lm-WARc4A@mail.gmail.com>
References: <CAKbgnVXZCpS8b=Erejw_caoonSuiFhR9LiTctHwm_Lm-WARc4A@mail.gmail.com>
Message-ID: <20180412210544.2fbff04f@faultier2go>

Dear Lovro Ore?kovi?,

instead of "make all" please run "make build/gnuk-vidpid.elf", as the images
gnuk.elf/gnuk.hex/gnuk.bin no longer contain the vid/pid set with configure.

This was introduced to allow reproduceable builds. I had the same issue a few
days ago ;-)

While the documentation of gnuk was updated accordingly, a lot of 3rd party
guides and tutorials exist that still refer to the old way to build the
firmware.

Kind regards,
Marian

On Thu, 12 Apr 2018 18:36:16 +0200
Lovro Ore?kovi? <lovro at oreskovic.me> wrote:

> So let me start from the end
> 
> I can see the FST01 with gnuk firmware on it with lsusb, you can see the
> verbose output at the end of the email [1].
> The problem is the vid and pid are set to 0000:0000
> 
> I tried building the binary a couple of ways, but it is also the same when
> I use docker (versions of programs installed on my machine should not be a
> problem this way)
> I am using this command to build it:
> env GNUK_CONFIG="--target=FST_01 --vidpid=234b:0000" make all
> 
> I can see the gnuk when I start gpg --card-status as root. [2]
> 
> I am using stlinkv2 (chinese clone) (both with  2.17.4 and  2.30.7 firmware
> versions)
> 
> Let me just add to unlock the rom I first need to run this command
> sudo openocd -f /usr/local/share/openocd/scripts/interface/stlink-v2.cfg
> -f /usr/local/share/openocd/scripts/target/stm32f1x.cfg -c "init; reset
> halt; shutdown"
> while pulling reset to ground then letting it go half way through the
> command, if I do not do that I get ValueError('Status of core is not
> halt.', 128) when trying to run sudo python2 ../tool/stlinkv2.py -u
> 
> I have tried a lot of combinations but in the end all of them end up with
> the FST01 having vid and pid set to 0000:0000.
> 
> So, thnx in advance,
> does anybody have any pointers?
> 
> Lovro
> 
> [1]
> Bus 002 Device 096: ID 0000:0000
> Device Descriptor:
>   bLength                18
>   bDescriptorType         1
>   bcdUSB               2.00
>   bDeviceClass            0 (Defined at Interface level)
>   bDeviceSubClass         0
>   bDeviceProtocol         0
>   bMaxPacketSize0        64
>   idVendor           0x0000
>   idProduct          0x0000
>   bcdDevice            0.00
>   iManufacturer           1 Free Software Initiative of Japan
>   iProduct                2 Gnuk Token
>   iSerial                 3 FSIJ-1.2.9-87022328
>   bNumConfigurations      1
>   Configuration Descriptor:
>     bLength                 9
>     bDescriptorType         2
>     wTotalLength           93
>     bNumInterfaces          1
>     bConfigurationValue     1
>     iConfiguration          0
>     bmAttributes         0x80
>       (Bus Powered)
>     MaxPower              100mA
>     Interface Descriptor:
>       bLength                 9
>       bDescriptorType         4
>       bInterfaceNumber        0
>       bAlternateSetting       0
>       bNumEndpoints           3
>       bInterfaceClass        11 Chip/SmartCard
>       bInterfaceSubClass      0
>       bInterfaceProtocol      0
>       iInterface              0
>       ChipCard Interface Descriptor:
>         bLength                54
>         bDescriptorType        33
>         bcdCCID              1.10  (Warning: Only accurate for version 1.0)
>         nMaxSlotIndex           0
>         bVoltageSupport         1  5.0V
>         dwProtocols             2  T=1
>         dwDefaultClock       4000
>         dwMaxiumumClock      4000
>         bNumClockSupported      0
>         dwDataRate           9600 bps
>         dwMaxDataRate        9600 bps
>         bNumDataRatesSupp.      0
>         dwMaxIFSD             254
>         dwSyncProtocols  00000000
>         dwMechanical     00000000
>         dwFeatures       0002047A
>           Auto configuration based on ATR
>           Auto voltage selection
>           Auto clock change
>           Auto baud rate change
>           Auto parameter negotation made by CCID
>           Auto IFSD exchange
>           Short APDU level exchange
>         dwMaxCCIDMsgLen       271
>         bClassGetResponse    echo
>         bClassEnvelope         FF
>         wlcdLayout           none
>         bPINSupport             0
>         bMaxCCIDBusySlots       1
>       Endpoint Descriptor:
>         bLength                 7
>         bDescriptorType         5
>         bEndpointAddress     0x81  EP 1 IN
>         bmAttributes            2
>           Transfer Type            Bulk
>           Synch Type               None
>           Usage Type               Data
>         wMaxPacketSize     0x0040  1x 64 bytes
>         bInterval               0
>       Endpoint Descriptor:
>         bLength                 7
>         bDescriptorType         5
>         bEndpointAddress     0x01  EP 1 OUT
>         bmAttributes            2
>           Transfer Type            Bulk
>           Synch Type               None
>           Usage Type               Data
>         wMaxPacketSize     0x0040  1x 64 bytes
>         bInterval               0
>       Endpoint Descriptor:
>         bLength                 7
>         bDescriptorType         5
>         bEndpointAddress     0x82  EP 2 IN
>         bmAttributes            3
>           Transfer Type            Interrupt
>           Synch Type               None
>           Usage Type               Data
>         wMaxPacketSize     0x0004  1x 4 bytes
>         bInterval             255
> Device Status:     0x0000
>   (Bus Powered)
> 
> [2]
> Reader ...........: 0000:0000:FSIJ-1.2.9-87022328:0
> Application ID ...: D276000124010200FFFE870223280000
> Version ..........: 2.0
> Manufacturer .....: unmanaged S/N range
> Serial number ....: 87022328
> Name of cardholder: [not set]
> Language prefs ...: [not set]
> Sex ..............: unspecified
> URL of public key : [not set]
> Login data .......: [not set]
> Signature PIN ....: forced
> Key attributes ...: rsa2048 rsa2048 rsa2048
> Max. PIN lengths .: 127 127 127
> PIN retry counter : 3 3 3
> Signature counter : 0
> Signature key ....: [none]
> Encryption key....: [none]
> Authentication key: [none]
> General key info..: [none]
> 

-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 228 bytes
Desc: OpenPGP digital signature
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20180412/78615449/attachment.sig>

From lovro at oreskovic.me  Thu Apr 12 21:06:52 2018
From: lovro at oreskovic.me (=?UTF-8?B?TG92cm8gT3JlxaFrb3ZpxIc=?=)
Date: Thu, 12 Apr 2018 21:06:52 +0200
Subject: I'm not able to set vid and pid
In-Reply-To: <CACi+kjrRuYOdiEi4xOUpi2qj9Cv4FYY-xJmX4o8tcQ4g5870Eg@mail.gmail.com>
References: <CAKbgnVXZCpS8b=Erejw_caoonSuiFhR9LiTctHwm_Lm-WARc4A@mail.gmail.com>
 <CACi+kjrRuYOdiEi4xOUpi2qj9Cv4FYY-xJmX4o8tcQ4g5870Eg@mail.gmail.com>
Message-ID: <CAKbgnVXh7+d-f-zck+wNP1vgm_hi79K6F9teJ5VW6Qg+_eD0mQ@mail.gmail.com>

Yeah,
I after about a day of building it in a million different ways and
following about a dozen different tutorials, I've finally read the README
from start to finish, after I've sent the email to the list. Sorry about
making noise on the mailing list with something the that basically has a
RTFM answer.
I would've answered to my self, but I guess the mail was waiting for
approval or something, I was not seeing it.

Your second question, that is the docker build, you will find the all
target in the gnuk/docker/Makefile.

Lovro


On Thu, Apr 12, 2018 at 8:24 PM, Mike Tsao <mike at sowbug.com> wrote:

> You didn't say whether you read the prior couple messages to this group,
> so apologies if you did and that's still not working. Did you? (
> https://lists.gnupg.org/pipermail/gnuk-users/2018-April/000026.html)
>
> By the way, I don't see a target called "all" in the makefile my system
> generated at gnuk/src/Makefile. Why are you using a different method to
> build from the one specified in the README file?
>
> On Thu, Apr 12, 2018 at 11:10 AM Lovro Ore?kovi? <lovro at oreskovic.me>
> wrote:
>
>> So let me start from the end
>>
>> I can see the FST01 with gnuk firmware on it with lsusb, you can see the
>> verbose output at the end of the email [1].
>> The problem is the vid and pid are set to 0000:0000
>>
>> I tried building the binary a couple of ways, but it is also the same
>> when I use docker (versions of programs installed on my machine should not
>> be a problem this way)
>> I am using this command to build it:
>> env GNUK_CONFIG="--target=FST_01 --vidpid=234b:0000" make all
>>
>> I can see the gnuk when I start gpg --card-status as root. [2]
>>
>> I am using stlinkv2 (chinese clone) (both with  2.17.4 and  2.30.7
>> firmware versions)
>>
>> Let me just add to unlock the rom I first need to run this command
>> sudo openocd -f /usr/local/share/openocd/scripts/interface/stlink-v2.cfg
>> -f /usr/local/share/openocd/scripts/target/stm32f1x.cfg -c "init; reset
>> halt; shutdown"
>> while pulling reset to ground then letting it go half way through the
>> command, if I do not do that I get ValueError('Status of core is not
>> halt.', 128) when trying to run sudo python2 ../tool/stlinkv2.py -u
>>
>> I have tried a lot of combinations but in the end all of them end up with
>> the FST01 having vid and pid set to 0000:0000.
>>
>> So, thnx in advance,
>> does anybody have any pointers?
>>
>> Lovro
>>
>> [1]
>> Bus 002 Device 096: ID 0000:0000
>> Device Descriptor:
>>   bLength                18
>>   bDescriptorType         1
>>   bcdUSB               2.00
>>   bDeviceClass            0 (Defined at Interface level)
>>   bDeviceSubClass         0
>>   bDeviceProtocol         0
>>   bMaxPacketSize0        64
>>   idVendor           0x0000
>>   idProduct          0x0000
>>   bcdDevice            0.00
>>   iManufacturer           1 Free Software Initiative of Japan
>>   iProduct                2 Gnuk Token
>>   iSerial                 3 FSIJ-1.2.9-87022328
>>   bNumConfigurations      1
>>   Configuration Descriptor:
>>     bLength                 9
>>     bDescriptorType         2
>>     wTotalLength           93
>>     bNumInterfaces          1
>>     bConfigurationValue     1
>>     iConfiguration          0
>>     bmAttributes         0x80
>>       (Bus Powered)
>>     MaxPower              100mA
>>     Interface Descriptor:
>>       bLength                 9
>>       bDescriptorType         4
>>       bInterfaceNumber        0
>>       bAlternateSetting       0
>>       bNumEndpoints           3
>>       bInterfaceClass        11 Chip/SmartCard
>>       bInterfaceSubClass      0
>>       bInterfaceProtocol      0
>>       iInterface              0
>>       ChipCard Interface Descriptor:
>>         bLength                54
>>         bDescriptorType        33
>>         bcdCCID              1.10  (Warning: Only accurate for version
>> 1.0)
>>         nMaxSlotIndex           0
>>         bVoltageSupport         1  5.0V
>>         dwProtocols             2  T=1
>>         dwDefaultClock       4000
>>         dwMaxiumumClock      4000
>>         bNumClockSupported      0
>>         dwDataRate           9600 bps
>>         dwMaxDataRate        9600 bps
>>         bNumDataRatesSupp.      0
>>         dwMaxIFSD             254
>>         dwSyncProtocols  00000000
>>         dwMechanical     00000000
>>         dwFeatures       0002047A
>>           Auto configuration based on ATR
>>           Auto voltage selection
>>           Auto clock change
>>           Auto baud rate change
>>           Auto parameter negotation made by CCID
>>           Auto IFSD exchange
>>           Short APDU level exchange
>>         dwMaxCCIDMsgLen       271
>>         bClassGetResponse    echo
>>         bClassEnvelope         FF
>>         wlcdLayout           none
>>         bPINSupport             0
>>         bMaxCCIDBusySlots       1
>>       Endpoint Descriptor:
>>         bLength                 7
>>         bDescriptorType         5
>>         bEndpointAddress     0x81  EP 1 IN
>>         bmAttributes            2
>>           Transfer Type            Bulk
>>           Synch Type               None
>>           Usage Type               Data
>>         wMaxPacketSize     0x0040  1x 64 bytes
>>         bInterval               0
>>       Endpoint Descriptor:
>>         bLength                 7
>>         bDescriptorType         5
>>         bEndpointAddress     0x01  EP 1 OUT
>>         bmAttributes            2
>>           Transfer Type            Bulk
>>           Synch Type               None
>>           Usage Type               Data
>>         wMaxPacketSize     0x0040  1x 64 bytes
>>         bInterval               0
>>       Endpoint Descriptor:
>>         bLength                 7
>>         bDescriptorType         5
>>         bEndpointAddress     0x82  EP 2 IN
>>         bmAttributes            3
>>           Transfer Type            Interrupt
>>           Synch Type               None
>>           Usage Type               Data
>>         wMaxPacketSize     0x0004  1x 4 bytes
>>         bInterval             255
>> Device Status:     0x0000
>>   (Bus Powered)
>>
>> [2]
>> Reader ...........: 0000:0000:FSIJ-1.2.9-87022328:0
>> Application ID ...: D276000124010200FFFE870223280000
>> Version ..........: 2.0
>> Manufacturer .....: unmanaged S/N range
>> Serial number ....: 87022328
>> Name of cardholder: [not set]
>> Language prefs ...: [not set]
>> Sex ..............: unspecified
>> URL of public key : [not set]
>> Login data .......: [not set]
>> Signature PIN ....: forced
>> Key attributes ...: rsa2048 rsa2048 rsa2048
>> Max. PIN lengths .: 127 127 127
>> PIN retry counter : 3 3 3
>> Signature counter : 0
>> Signature key ....: [none]
>> Encryption key....: [none]
>> Authentication key: [none]
>> General key info..: [none]
>>
>> --
>> http://lovro.oreskovic.me
>>
>> _______________________________________________
>> Gnuk-users mailing list
>> Gnuk-users at gnupg.org
>> https://lists.gnupg.org/mailman/listinfo/gnuk-users
>
>


-- 
http://lovro.oreskovic.me
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20180412/b4678018/attachment.html>

From peter at digitalbrains.com  Thu Apr 12 21:24:55 2018
From: peter at digitalbrains.com (Peter Lebbing)
Date: Thu, 12 Apr 2018 21:24:55 +0200
Subject: OT: Answer to own message (was: I'm not able to set vid and pid)
In-Reply-To: <CAKbgnVXh7+d-f-zck+wNP1vgm_hi79K6F9teJ5VW6Qg+_eD0mQ@mail.gmail.com>
References: <CAKbgnVXZCpS8b=Erejw_caoonSuiFhR9LiTctHwm_Lm-WARc4A@mail.gmail.com>
 <CACi+kjrRuYOdiEi4xOUpi2qj9Cv4FYY-xJmX4o8tcQ4g5870Eg@mail.gmail.com>
 <CAKbgnVXh7+d-f-zck+wNP1vgm_hi79K6F9teJ5VW6Qg+_eD0mQ@mail.gmail.com>
Message-ID: <49611dbe-4c83-9e9c-4765-8693882cd5ed@digitalbrains.com>

On 12/04/18 21:06, Lovro Ore?kovi? wrote:
> Sorry about making noise on the mailing list with something the that
> basically has a RTFM answer.

No problem, we all make mistakes.

> I would've answered to my self, but I guess the mail was waiting for
> approval or something, I was not seeing it.

I'm not sure if I've ever done this on gnuk-users, but I certainly have
on gnupg-users, and it works fine, so the Mailman at lists.gnupg.org
works with this:

If I need to reply to my own message, I simply reply to the copy in my
Sent folder. Since my MUA generated the Message-ID of the message that
will end up at all subscribers of the mailing list, and that Message-ID
is also in my own copy in my Sent folder, it will thread correctly just
like it would have if I'd replied to the copy I got back from the
mailing list.

That's how I think to understand it implementation-wise, but

TL;DR: Simply reply to your own copy in your Sent folder and all will be
fine.

HTH,

Peter.

-- 
I use the GNU Privacy Guard (GnuPG) in combination with Enigmail.
You can send me encrypted mail if you want some privacy.
My key is available at <http://digitalbrains.com/2012/openpgp-key-peter>

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 488 bytes
Desc: OpenPGP digital signature
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20180412/14d42aee/attachment.sig>

From mike at sowbug.com  Thu Apr 12 20:24:18 2018
From: mike at sowbug.com (Mike Tsao)
Date: Thu, 12 Apr 2018 18:24:18 +0000
Subject: I'm not able to set vid and pid
In-Reply-To: <CAKbgnVXZCpS8b=Erejw_caoonSuiFhR9LiTctHwm_Lm-WARc4A@mail.gmail.com>
References: <CAKbgnVXZCpS8b=Erejw_caoonSuiFhR9LiTctHwm_Lm-WARc4A@mail.gmail.com>
Message-ID: <CACi+kjrRuYOdiEi4xOUpi2qj9Cv4FYY-xJmX4o8tcQ4g5870Eg@mail.gmail.com>

You didn't say whether you read the prior couple messages to this group, so
apologies if you did and that's still not working. Did you? (
https://lists.gnupg.org/pipermail/gnuk-users/2018-April/000026.html)

By the way, I don't see a target called "all" in the makefile my system
generated at gnuk/src/Makefile. Why are you using a different method to
build from the one specified in the README file?

On Thu, Apr 12, 2018 at 11:10 AM Lovro Ore?kovi? <lovro at oreskovic.me> wrote:

> So let me start from the end
>
> I can see the FST01 with gnuk firmware on it with lsusb, you can see the
> verbose output at the end of the email [1].
> The problem is the vid and pid are set to 0000:0000
>
> I tried building the binary a couple of ways, but it is also the same when
> I use docker (versions of programs installed on my machine should not be a
> problem this way)
> I am using this command to build it:
> env GNUK_CONFIG="--target=FST_01 --vidpid=234b:0000" make all
>
> I can see the gnuk when I start gpg --card-status as root. [2]
>
> I am using stlinkv2 (chinese clone) (both with  2.17.4 and  2.30.7
> firmware versions)
>
> Let me just add to unlock the rom I first need to run this command
> sudo openocd -f /usr/local/share/openocd/scripts/interface/stlink-v2.cfg
> -f /usr/local/share/openocd/scripts/target/stm32f1x.cfg -c "init; reset
> halt; shutdown"
> while pulling reset to ground then letting it go half way through the
> command, if I do not do that I get ValueError('Status of core is not
> halt.', 128) when trying to run sudo python2 ../tool/stlinkv2.py -u
>
> I have tried a lot of combinations but in the end all of them end up with
> the FST01 having vid and pid set to 0000:0000.
>
> So, thnx in advance,
> does anybody have any pointers?
>
> Lovro
>
> [1]
> Bus 002 Device 096: ID 0000:0000
> Device Descriptor:
>   bLength                18
>   bDescriptorType         1
>   bcdUSB               2.00
>   bDeviceClass            0 (Defined at Interface level)
>   bDeviceSubClass         0
>   bDeviceProtocol         0
>   bMaxPacketSize0        64
>   idVendor           0x0000
>   idProduct          0x0000
>   bcdDevice            0.00
>   iManufacturer           1 Free Software Initiative of Japan
>   iProduct                2 Gnuk Token
>   iSerial                 3 FSIJ-1.2.9-87022328
>   bNumConfigurations      1
>   Configuration Descriptor:
>     bLength                 9
>     bDescriptorType         2
>     wTotalLength           93
>     bNumInterfaces          1
>     bConfigurationValue     1
>     iConfiguration          0
>     bmAttributes         0x80
>       (Bus Powered)
>     MaxPower              100mA
>     Interface Descriptor:
>       bLength                 9
>       bDescriptorType         4
>       bInterfaceNumber        0
>       bAlternateSetting       0
>       bNumEndpoints           3
>       bInterfaceClass        11 Chip/SmartCard
>       bInterfaceSubClass      0
>       bInterfaceProtocol      0
>       iInterface              0
>       ChipCard Interface Descriptor:
>         bLength                54
>         bDescriptorType        33
>         bcdCCID              1.10  (Warning: Only accurate for version 1.0)
>         nMaxSlotIndex           0
>         bVoltageSupport         1  5.0V
>         dwProtocols             2  T=1
>         dwDefaultClock       4000
>         dwMaxiumumClock      4000
>         bNumClockSupported      0
>         dwDataRate           9600 bps
>         dwMaxDataRate        9600 bps
>         bNumDataRatesSupp.      0
>         dwMaxIFSD             254
>         dwSyncProtocols  00000000
>         dwMechanical     00000000
>         dwFeatures       0002047A
>           Auto configuration based on ATR
>           Auto voltage selection
>           Auto clock change
>           Auto baud rate change
>           Auto parameter negotation made by CCID
>           Auto IFSD exchange
>           Short APDU level exchange
>         dwMaxCCIDMsgLen       271
>         bClassGetResponse    echo
>         bClassEnvelope         FF
>         wlcdLayout           none
>         bPINSupport             0
>         bMaxCCIDBusySlots       1
>       Endpoint Descriptor:
>         bLength                 7
>         bDescriptorType         5
>         bEndpointAddress     0x81  EP 1 IN
>         bmAttributes            2
>           Transfer Type            Bulk
>           Synch Type               None
>           Usage Type               Data
>         wMaxPacketSize     0x0040  1x 64 bytes
>         bInterval               0
>       Endpoint Descriptor:
>         bLength                 7
>         bDescriptorType         5
>         bEndpointAddress     0x01  EP 1 OUT
>         bmAttributes            2
>           Transfer Type            Bulk
>           Synch Type               None
>           Usage Type               Data
>         wMaxPacketSize     0x0040  1x 64 bytes
>         bInterval               0
>       Endpoint Descriptor:
>         bLength                 7
>         bDescriptorType         5
>         bEndpointAddress     0x82  EP 2 IN
>         bmAttributes            3
>           Transfer Type            Interrupt
>           Synch Type               None
>           Usage Type               Data
>         wMaxPacketSize     0x0004  1x 4 bytes
>         bInterval             255
> Device Status:     0x0000
>   (Bus Powered)
>
> [2]
> Reader ...........: 0000:0000:FSIJ-1.2.9-87022328:0
> Application ID ...: D276000124010200FFFE870223280000
> Version ..........: 2.0
> Manufacturer .....: unmanaged S/N range
> Serial number ....: 87022328
> Name of cardholder: [not set]
> Language prefs ...: [not set]
> Sex ..............: unspecified
> URL of public key : [not set]
> Login data .......: [not set]
> Signature PIN ....: forced
> Key attributes ...: rsa2048 rsa2048 rsa2048
> Max. PIN lengths .: 127 127 127
> PIN retry counter : 3 3 3
> Signature counter : 0
> Signature key ....: [none]
> Encryption key....: [none]
> Authentication key: [none]
> General key info..: [none]
>
> --
> http://lovro.oreskovic.me
>
> _______________________________________________
> Gnuk-users mailing list
> Gnuk-users at gnupg.org
> https://lists.gnupg.org/mailman/listinfo/gnuk-users
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20180412/d10b02ae/attachment.html>

From mike at sowbug.com  Thu Apr 12 23:03:47 2018
From: mike at sowbug.com (Mike Tsao)
Date: Thu, 12 Apr 2018 21:03:47 +0000
Subject: I'm not able to set vid and pid
In-Reply-To: <CAKbgnVXh7+d-f-zck+wNP1vgm_hi79K6F9teJ5VW6Qg+_eD0mQ@mail.gmail.com>
References: <CAKbgnVXZCpS8b=Erejw_caoonSuiFhR9LiTctHwm_Lm-WARc4A@mail.gmail.com>
 <CACi+kjrRuYOdiEi4xOUpi2qj9Cv4FYY-xJmX4o8tcQ4g5870Eg@mail.gmail.com>
 <CAKbgnVXh7+d-f-zck+wNP1vgm_hi79K6F9teJ5VW6Qg+_eD0mQ@mail.gmail.com>
Message-ID: <CACi+kjoBZ1gJHBVfLvOXNR17cg4H15SaAvV1N0rB6euy167cqw@mail.gmail.com>

Sending an email like that is magic. It always seems to cause you to
discover the solution on your own five minutes later. The same thing has
happened to all of us (including me).

On Thu, Apr 12, 2018, 12:07 PM Lovro Ore?kovi? <lovro at oreskovic.me> wrote:

> Yeah,
> I after about a day of building it in a million different ways and
> following about a dozen different tutorials, I've finally read the README
> from start to finish, after I've sent the email to the list. Sorry about
> making noise on the mailing list with something the that basically has a
> RTFM answer.
> I would've answered to my self, but I guess the mail was waiting for
> approval or something, I was not seeing it.
>
> Your second question, that is the docker build, you will find the all
> target in the gnuk/docker/Makefile.
>
> Lovro
>
>
> On Thu, Apr 12, 2018 at 8:24 PM, Mike Tsao <mike at sowbug.com> wrote:
>
>> You didn't say whether you read the prior couple messages to this group,
>> so apologies if you did and that's still not working. Did you? (
>> https://lists.gnupg.org/pipermail/gnuk-users/2018-April/000026.html)
>>
>> By the way, I don't see a target called "all" in the makefile my system
>> generated at gnuk/src/Makefile. Why are you using a different method to
>> build from the one specified in the README file?
>>
>> On Thu, Apr 12, 2018 at 11:10 AM Lovro Ore?kovi? <lovro at oreskovic.me>
>> wrote:
>>
>>> So let me start from the end
>>>
>>> I can see the FST01 with gnuk firmware on it with lsusb, you can see the
>>> verbose output at the end of the email [1].
>>> The problem is the vid and pid are set to 0000:0000
>>>
>>> I tried building the binary a couple of ways, but it is also the same
>>> when I use docker (versions of programs installed on my machine should not
>>> be a problem this way)
>>> I am using this command to build it:
>>> env GNUK_CONFIG="--target=FST_01 --vidpid=234b:0000" make all
>>>
>>> I can see the gnuk when I start gpg --card-status as root. [2]
>>>
>>> I am using stlinkv2 (chinese clone) (both with  2.17.4 and  2.30.7
>>> firmware versions)
>>>
>>> Let me just add to unlock the rom I first need to run this command
>>> sudo openocd -f
>>> /usr/local/share/openocd/scripts/interface/stlink-v2.cfg  -f
>>> /usr/local/share/openocd/scripts/target/stm32f1x.cfg -c "init; reset halt;
>>> shutdown"
>>> while pulling reset to ground then letting it go half way through the
>>> command, if I do not do that I get ValueError('Status of core is not
>>> halt.', 128) when trying to run sudo python2 ../tool/stlinkv2.py -u
>>>
>>> I have tried a lot of combinations but in the end all of them end up
>>> with the FST01 having vid and pid set to 0000:0000.
>>>
>>> So, thnx in advance,
>>> does anybody have any pointers?
>>>
>>> Lovro
>>>
>>> [1]
>>> Bus 002 Device 096: ID 0000:0000
>>> Device Descriptor:
>>>   bLength                18
>>>   bDescriptorType         1
>>>   bcdUSB               2.00
>>>   bDeviceClass            0 (Defined at Interface level)
>>>   bDeviceSubClass         0
>>>   bDeviceProtocol         0
>>>   bMaxPacketSize0        64
>>>   idVendor           0x0000
>>>   idProduct          0x0000
>>>   bcdDevice            0.00
>>>   iManufacturer           1 Free Software Initiative of Japan
>>>   iProduct                2 Gnuk Token
>>>   iSerial                 3 FSIJ-1.2.9-87022328
>>>   bNumConfigurations      1
>>>   Configuration Descriptor:
>>>     bLength                 9
>>>     bDescriptorType         2
>>>     wTotalLength           93
>>>     bNumInterfaces          1
>>>     bConfigurationValue     1
>>>     iConfiguration          0
>>>     bmAttributes         0x80
>>>       (Bus Powered)
>>>     MaxPower              100mA
>>>     Interface Descriptor:
>>>       bLength                 9
>>>       bDescriptorType         4
>>>       bInterfaceNumber        0
>>>       bAlternateSetting       0
>>>       bNumEndpoints           3
>>>       bInterfaceClass        11 Chip/SmartCard
>>>       bInterfaceSubClass      0
>>>       bInterfaceProtocol      0
>>>       iInterface              0
>>>       ChipCard Interface Descriptor:
>>>         bLength                54
>>>         bDescriptorType        33
>>>         bcdCCID              1.10  (Warning: Only accurate for version
>>> 1.0)
>>>         nMaxSlotIndex           0
>>>         bVoltageSupport         1  5.0V
>>>         dwProtocols             2  T=1
>>>         dwDefaultClock       4000
>>>         dwMaxiumumClock      4000
>>>         bNumClockSupported      0
>>>         dwDataRate           9600 bps
>>>         dwMaxDataRate        9600 bps
>>>         bNumDataRatesSupp.      0
>>>         dwMaxIFSD             254
>>>         dwSyncProtocols  00000000
>>>         dwMechanical     00000000
>>>         dwFeatures       0002047A
>>>           Auto configuration based on ATR
>>>           Auto voltage selection
>>>           Auto clock change
>>>           Auto baud rate change
>>>           Auto parameter negotation made by CCID
>>>           Auto IFSD exchange
>>>           Short APDU level exchange
>>>         dwMaxCCIDMsgLen       271
>>>         bClassGetResponse    echo
>>>         bClassEnvelope         FF
>>>         wlcdLayout           none
>>>         bPINSupport             0
>>>         bMaxCCIDBusySlots       1
>>>       Endpoint Descriptor:
>>>         bLength                 7
>>>         bDescriptorType         5
>>>         bEndpointAddress     0x81  EP 1 IN
>>>         bmAttributes            2
>>>           Transfer Type            Bulk
>>>           Synch Type               None
>>>           Usage Type               Data
>>>         wMaxPacketSize     0x0040  1x 64 bytes
>>>         bInterval               0
>>>       Endpoint Descriptor:
>>>         bLength                 7
>>>         bDescriptorType         5
>>>         bEndpointAddress     0x01  EP 1 OUT
>>>         bmAttributes            2
>>>           Transfer Type            Bulk
>>>           Synch Type               None
>>>           Usage Type               Data
>>>         wMaxPacketSize     0x0040  1x 64 bytes
>>>         bInterval               0
>>>       Endpoint Descriptor:
>>>         bLength                 7
>>>         bDescriptorType         5
>>>         bEndpointAddress     0x82  EP 2 IN
>>>         bmAttributes            3
>>>           Transfer Type            Interrupt
>>>           Synch Type               None
>>>           Usage Type               Data
>>>         wMaxPacketSize     0x0004  1x 4 bytes
>>>         bInterval             255
>>> Device Status:     0x0000
>>>   (Bus Powered)
>>>
>>> [2]
>>> Reader ...........: 0000:0000:FSIJ-1.2.9-87022328:0
>>> Application ID ...: D276000124010200FFFE870223280000
>>> Version ..........: 2.0
>>> Manufacturer .....: unmanaged S/N range
>>> Serial number ....: 87022328
>>> Name of cardholder: [not set]
>>> Language prefs ...: [not set]
>>> Sex ..............: unspecified
>>> URL of public key : [not set]
>>> Login data .......: [not set]
>>> Signature PIN ....: forced
>>> Key attributes ...: rsa2048 rsa2048 rsa2048
>>> Max. PIN lengths .: 127 127 127
>>> PIN retry counter : 3 3 3
>>> Signature counter : 0
>>> Signature key ....: [none]
>>> Encryption key....: [none]
>>> Authentication key: [none]
>>> General key info..: [none]
>>>
>>> --
>>> http://lovro.oreskovic.me
>>>
>>> _______________________________________________
>>> Gnuk-users mailing list
>>> Gnuk-users at gnupg.org
>>> https://lists.gnupg.org/mailman/listinfo/gnuk-users
>>
>>
>
>
> --
> http://lovro.oreskovic.me
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20180412/48b58884/attachment.html>

From gniibe at fsij.org  Fri Apr 13 07:12:21 2018
From: gniibe at fsij.org (NIIBE Yutaka)
Date: Fri, 13 Apr 2018 14:12:21 +0900
Subject: Setting the Gnuk serial
In-Reply-To: <20180410113625.56b83ee3@faultier2go>
References: <20180410113625.56b83ee3@faultier2go>
Message-ID: <87zi27ell6.fsf@iwagami.gniibe.org>

Marian Buschsieweke <marian.buschsieweke at ovgu.de> wrote:
> sadly I'm unable to set the serial of my Gnuk device. Any pointers what went
> wrong?

It is only possible to set once.  Even factory-reset can't reset it.
Is it your case?

While I implemented, I think that it is questionable feature.  I only
use it for my old key.  I just use (a kind of) ephemeral serial number
for other key.
-- 


From marian.buschsieweke at ovgu.de  Fri Apr 13 09:34:59 2018
From: marian.buschsieweke at ovgu.de (Marian Buschsieweke)
Date: Fri, 13 Apr 2018 09:34:59 +0200
Subject: Setting the Gnuk serial
In-Reply-To: <87zi27ell6.fsf@iwagami.gniibe.org>
References: <20180410113625.56b83ee3@faultier2go>
 <87zi27ell6.fsf@iwagami.gniibe.org>
Message-ID: <20180413093435.34f3632f@faultier2go>

Hi,

I have not set the serial before, but I did deploy my keys and personal
information before I tried to set the serial. I want to deploy a second Gnuk
device at work in a secure location in case a forget to bring my primary one.
Because both devices have different serials, I have to replace the key
references in GnuPG when I use the secondary device. It's not much work, but it
would be cool that I could use either of the devices out of the box.

I believe it is not possible to tell GnuPG that the same key material is
deployed on to different devices, so using the same serial seemed like a work
around for me.

Kind regards,
Marian

PS: I also checked to change the serial for a third device which I have not used
so far. Unless setting the serial is only allowed on the very first boot of the
device right after flashing the firmware, I have exactly the same issue there.

On Fri, 13 Apr 2018 14:12:21 +0900
NIIBE Yutaka <gniibe at fsij.org> wrote:

> Marian Buschsieweke <marian.buschsieweke at ovgu.de> wrote:
> > sadly I'm unable to set the serial of my Gnuk device. Any pointers what went
> > wrong?  
> 
> It is only possible to set once.  Even factory-reset can't reset it.
> Is it your case?
> 
> While I implemented, I think that it is questionable feature.  I only
> use it for my old key.  I just use (a kind of) ephemeral serial number
> for other key.

-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 228 bytes
Desc: OpenPGP digital signature
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20180413/2a1cfd81/attachment.sig>

From gniibe at fsij.org  Fri Apr 13 12:44:15 2018
From: gniibe at fsij.org (NIIBE Yutaka)
Date: Fri, 13 Apr 2018 19:44:15 +0900
Subject: Setting the Gnuk serial
In-Reply-To: <20180413093435.34f3632f@faultier2go>
References: <20180410113625.56b83ee3@faultier2go>
 <87zi27ell6.fsf@iwagami.gniibe.org> <20180413093435.34f3632f@faultier2go>
Message-ID: <87k1tbwfls.fsf@fsij.org>

Marian Buschsieweke <marian.buschsieweke at ovgu.de> wrote:
> Because both devices have different serials, I have to replace the key
> references in GnuPG when I use the secondary device. It's not much work, but it
> would be cool that I could use either of the devices out of the box.

I see.  That's valid use case.

Do you have your own entry in gnuk/GNUK_SERIAL_NUMBER?  The data should
be six bytes long.
-- 


From marian.buschsieweke at ovgu.de  Fri Apr 13 13:44:34 2018
From: marian.buschsieweke at ovgu.de (Marian Buschsieweke)
Date: Fri, 13 Apr 2018 13:44:34 +0200
Subject: Setting the Gnuk serial
In-Reply-To: <87k1tbwfls.fsf@fsij.org>
References: <20180410113625.56b83ee3@faultier2go>
 <87zi27ell6.fsf@iwagami.gniibe.org>
 <20180413093435.34f3632f@faultier2go> <87k1tbwfls.fsf@fsij.org>
Message-ID: <20180413133802.7545c965@faultier2go>

Hi,

> The data should be six bytes long.

that was the problem. Seems like counting to six is not one of my talents :-(

Thanks for your help!

Kind regards,
Marian

On Fri, 13 Apr 2018 19:44:15 +0900
NIIBE Yutaka <gniibe at fsij.org> wrote:

> Marian Buschsieweke <marian.buschsieweke at ovgu.de> wrote:
> > Because both devices have different serials, I have to replace the key
> > references in GnuPG when I use the secondary device. It's not much work, but it
> > would be cool that I could use either of the devices out of the box.  
> 
> I see.  That's valid use case.
> 
> Do you have your own entry in gnuk/GNUK_SERIAL_NUMBER?  The data should
> be six bytes long.

-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 228 bytes
Desc: OpenPGP digital signature
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20180413/250f1230/attachment.sig>

From lovro at oreskovic.me  Wed Apr 18 16:53:53 2018
From: lovro at oreskovic.me (=?UTF-8?B?TG92cm8gT3JlxaFrb3ZpxIc=?=)
Date: Wed, 18 Apr 2018 16:53:53 +0200
Subject: Docker build
Message-ID: <CAKbgnVW6anEXub8cqeb1sECxvL04BBj-h3D-085v71gh9PDH+A@mail.gmail.com>

Hi everybody,

So I had some problems building the gnuk code about a week ago, but that
sorted itself about about the moment I clicked send on the email I've sent
to the list :-)

Anyways, I said I should probably write a blog post about it, so that it
can help someone else if they have the same problem. I wanted to explain
how to do it with docker files supplied in the repo.
So I was writing the post and was trying it in parallel to make sure it
works. And I've found there is a problem if you try to start the docker
build but the configure command was not run before it will break. It is
happening because it si trying to run make clean before running configure.

I've attached two patches, one for the problem mentioned above and I've
added a build option to the docker makefile so you can execute " make
build/gnuk-vidpid.elf " inside the docker build.

I've also requested a merge request for the same changes on the salsa
debian gitlab.
How are contributions usually submitted?

Lovro

-- 
http://lovro.oreskovic.me
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20180418/1608367a/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: docker_build_fix.patch
Type: text/x-patch
Size: 462 bytes
Desc: not available
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20180418/1608367a/attachment.bin>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: docker_vid-pid_generation.patch
Type: text/x-patch
Size: 654 bytes
Desc: not available
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20180418/1608367a/attachment-0001.bin>

From gniibe at fsij.org  Wed May  9 10:47:19 2018
From: gniibe at fsij.org (NIIBE Yutaka)
Date: Wed, 09 May 2018 17:47:19 +0900
Subject: USB vendor ID 0000 on Blue Pill
In-Reply-To: <20180409110731.1d2671d5@faultier2go>
References: <20180406182618.2d3ff0d3@faultier2go>
 <CACi+kjpAQscCpo8HTrNWPiPNfg0zdVHQf7BKfviajBQPoRZL7A@mail.gmail.com>
 <20180407174158.2bd49482@faultier2go> <87sh85cegs.fsf@iwagami.gniibe.org>
 <c307c94b-039d-58b9-4dd4-129488a5f627@digitalbrains.com>
 <20180409110731.1d2671d5@faultier2go>
Message-ID: <878t8t1ai0.fsf@fsij.org>

Hello,

Sorry for my late response.  I was in ShenZhen in April and got BluePill
board with GD32F103CB, helped by friends at SZDIY.

Marian Buschsieweke <marian.buschsieweke at ovgu.de> wrote:
> imho the new naming convention suggested by Peter Lebbing is more obvious and
> has the advantage to remain compatible with old HowTos.
>
> Also, I personally believe there is no harm in building building both versions
> by default. This also seems to me the more common case that users want the
> image with vid & pid included, so it would be nice to have this case covered by
> default.

I agree.  Actually, regnual has regnual-no-vidpid.elf.  I will introduce
*-no-vidpid.elf, and make *.elf (or *.bin) have VID:PID.

Today, I did the change for NeuG.  I will do that for Gnuk.
-- 


From gniibe at fsij.org  Wed May  9 10:55:01 2018
From: gniibe at fsij.org (NIIBE Yutaka)
Date: Wed, 09 May 2018 17:55:01 +0900
Subject: GD32F103CB
Message-ID: <87603x1a56.fsf@fsij.org>

Hello,

In ShenZhen, I managed to get GD32F103CB.  It's LQFP48 version.  I
changed Chopstx so that it can work with GD32F103CB.  The changes are
clock setting for GD32F103 running 96MHz, and minor update of drivers
(USB driver, ADC driver, and flash protection).

Apparently, the peripherals are different implementations.

And the small change of drivers revealed a USB bug of NeuG/Gnuk, and
initialization problem of Fraucheky.  All fixed.
-- 


From tomli at tomli.me  Thu May 10 16:28:39 2018
From: tomli at tomli.me (tomli at tomli.me)
Date: Thu, 10 May 2018 22:28:39 +0800
Subject: GD32F103CB
In-Reply-To: <87603x1a56.fsf@fsij.org>
References: <87603x1a56.fsf@fsij.org>
Message-ID: <20180510142839.GA221334@x220>

On Wed, May 09, 2018 at 05:55:01PM +0900, NIIBE Yutaka wrote:
> Hello,
> 
> In ShenZhen, I managed to get GD32F103CB.  It's LQFP48 version.  I
> changed Chopstx so that it can work with GD32F103CB.  The changes are
> clock setting for GD32F103 running 96MHz, and minor update of drivers
> (USB driver, ADC driver, and flash protection).
> 
> Apparently, the peripherals are different implementations.
> 
> And the small change of drivers revealed a USB bug of NeuG/Gnuk, and
> initialization problem of Fraucheky.  All fixed.

Thanks for your great work! There is little extra time for me in these
days so I temporaryly stopped the project I mentioned earlier in this
year, but will continue soon. 

I have a dozen of GD32F103TBU6, in QFN-36 package. I'll show up in the
upcoming meetup, hopefully my chips would be helpful for your development.

Happy Hacking,

Tom Li
Beijing GNU/Linux User Group.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 851 bytes
Desc: Digital signature
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20180510/56d83ea7/attachment.sig>

From gniibe at fsij.org  Thu May 10 22:41:48 2018
From: gniibe at fsij.org (NIIBE Yutaka)
Date: Fri, 11 May 2018 05:41:48 +0900
Subject: GD32F103CB
In-Reply-To: <20180510142839.GA221334@x220>
References: <87603x1a56.fsf@fsij.org> <20180510142839.GA221334@x220>
Message-ID: <878t8rmeer.fsf@fsij.org>

Tom Li <tomli at tomli.me> wrote:
> Thanks for your great work! There is little extra time for me in these
> days so I temporaryly stopped the project I mentioned earlier in this
> year, but will continue soon. 

No problem.  Thanks.  Just like your effort, it took some time for me to
figure out the difference of peripherals (USB, ADC, and Flash ROM), but
it was manageable.

Only a single real problem to be fixed is... a tool like OpenOCD.  To
unlock the protection, GD32F103 requires writing 0x5aa5, but for some
reason, "stm32f1x unlock 0" didn't work for me.  I manually did
following to unlock the device:

    mww 0x40022004 0x45670123
    mww 0x40022004 0xcdef89ab
    mww 0x40022008 0x45670123
    mww 0x40022008 0xcdef89ab
    mdw 0x40022010
    mdh 0x1ffff800 8
    mww 0x40022010 0x0210
    mwh 0x1ffff800 0x5aa5
    mdw 0x4002200c

I will read how OpenOCD does for unlock.  Probably, it's identification
of the device.
-- 


From tomli at tomli.me  Fri May 11 04:31:20 2018
From: tomli at tomli.me (tomli at tomli.me)
Date: Fri, 11 May 2018 10:31:20 +0800
Subject: GD32F103CB
In-Reply-To: <878t8rmeer.fsf@fsij.org>
References: <87603x1a56.fsf@fsij.org> <20180510142839.GA221334@x220>
 <878t8rmeer.fsf@fsij.org>
Message-ID: <20180511023120.GA283756@x220>

On Fri, May 11, 2018 at 05:41:48AM +0900, NIIBE Yutaka wrote:
> Tom Li <tomli at tomli.me> wrote:
> > Thanks for your great work! There is little extra time for me in these
> > days so I temporaryly stopped the project I mentioned earlier in this
> > year, but will continue soon. 

> Only a single real problem to be fixed is... a tool like OpenOCD.  To
> unlock the protection, GD32F103 requires writing 0x5aa5, but for some
> reason, "stm32f1x unlock 0" didn't work for me.  I manually did
> following to unlock the device:
> 
>     mww 0x40022004 0x45670123
>     mww 0x40022004 0xcdef89ab
>     mww 0x40022008 0x45670123
>     mww 0x40022008 0xcdef89ab
>     mdw 0x40022010
>     mdh 0x1ffff800 8
>     mww 0x40022010 0x0210
>     mwh 0x1ffff800 0x5aa5
>     mdw 0x4002200c

I'm not entirely sure, but GD32 has its own additional protection modes,
including Readout Protection and Page Write Protection, which cannot be
deactivated by a standard "stm32f1x unlock 0", also, it seems that the
Readout Protection would be switched on, to an enable state whenever the
power is re-applied, even if it has been disabled previously. I think
it's an anti-tamper feature.

This is why I have reported these quirks to the mailing list by the end of
February, in case someone needs a link:

https://lists.gnupg.org/pipermail/gnuk-users/2018-February/000020.html

IMHO, the real long-term solution is contributing a patch to OpenOCD,
introducing these additional commands for those who are working with
GD32. But it seemed even these hacks I mentioned did not work reliably.

We probably should check the datasheet for confirmation and do some
additional tests.

Happy Hacking

Tom Li,
Beijing GNU/Linux User Group
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 851 bytes
Desc: Digital signature
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20180511/5f0686e3/attachment.sig>

From gniibe at fsij.org  Fri May 11 23:26:29 2018
From: gniibe at fsij.org (NIIBE Yutaka)
Date: Sat, 12 May 2018 06:26:29 +0900
Subject: GD32F103TB (was: GD32F103CB)
In-Reply-To: <20180511023120.GA283756@x220>
References: <87603x1a56.fsf@fsij.org> <20180510142839.GA221334@x220>
 <878t8rmeer.fsf@fsij.org> <20180511023120.GA283756@x220>
Message-ID: <87vabt994q.fsf@fsij.org>

Hello, 

It was nice to meet you.  And thanks for your board with GD32F103TB, and
the chip of GD32F103TB.  Well, I didn't expected you are so young.  :-)

This morning, I successfully built and tested Gnuk 1.2.10 with the
board.

It just requires a change like this:

==========================
--- board-fst-01g.h	2018-01-19 22:12:38.736218579 +0900
+++ board-fst-01r.h	2018-05-12 06:11:11.687258627 +0900
@@ -1,12 +1,16 @@
-#define BOARD_NAME "FST-01G"
-#define BOARD_ID    0x8801277f
-/* echo -n "FST-01G" | sha256sum | sed -e 's/^.*\(........\)  -$/\1/' */
+#define BOARD_NAME "FST-01R"
+#define BOARD_ID    0x8e8266af
+/* echo -n "FST-01R" | sha256sum | sed -e 's/^.*\(........\)  -$/\1/' */
+
+#define MCU_STM32F1_GD32F1 1
+#define STM32_USBPRE                    STM32_USBPRE_DIV2
+#define STM32_ADCPRE                    STM32_ADCPRE_DIV8
 
 #define MCU_STM32F1 1
 #define STM32F10X_MD		/* Medium-density device */
 
 #define STM32_PLLXTPRE                  STM32_PLLXTPRE_DIV1
-#define STM32_PLLMUL_VALUE              6
+#define STM32_PLLMUL_VALUE              8
 #define STM32_HSECLK                    12000000
 
 #define GPIO_LED_BASE   GPIOB_BASE
-- 


From gniibe at fsij.org  Wed Jun  6 04:22:59 2018
From: gniibe at fsij.org (NIIBE Yutaka)
Date: Wed, 06 Jun 2018 11:22:59 +0900
Subject: [NIIBE Yutaka] STM32F103 flash ROM read-out service
Message-ID: <87vaawslfg.fsf@iwagami.gniibe.org>

Hello,

I should have write to gnuk-users, at first.

-------------- next part --------------
An embedded message was scrubbed...
From: NIIBE Yutaka <gniibe at fsij.org>
Subject: STM32F103 flash ROM read-out service
Date: Tue, 05 Jun 2018 09:37:19 +0900
Size: 2864
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20180606/b351e23c/attachment.mht>
-------------- next part --------------



If anyone has information in detail, please let us know.
-- 

From tomli at tomli.me  Wed Jun  6 17:49:07 2018
From: tomli at tomli.me (tomli at tomli.me)
Date: Wed, 6 Jun 2018 23:49:07 +0800
Subject: [NIIBE Yutaka] STM32F103 flash ROM read-out service
In-Reply-To: <87vaawslfg.fsf@iwagami.gniibe.org>
References: <87vaawslfg.fsf@iwagami.gniibe.org>
Message-ID: <20180606154907.GA73725@x220>

> While learning Chinese language, I found this service (in Chinese):
> 
>     http://www.pcbcopy.com/2016/ic_1128/1928.html
> 
> IIUC, It's a company in ShenZhen, which offers a service reading out
> from protected STM32F103, even if it uses anti-tamper feature with a
> battery.
> 
> I was aware of similar services for PIC18 or ATmega (in different
> country).  This is new for me, specifically for STM32F103.
> 
> I don't know the detail of this service, but it seems that it's not that
> expensive (from not-confirmed information by my friend).

-----

These services have came into existence as early as 2012. It is a main
way used to create cheap clones by rogue competitors of products on
the existing market. It's commonly believed STM32F1 is easy to crack,
both through physical IC decapping, or by mounting a fault injection
attack to disable the flash readout protection, or exploting the
bootloader, who knows...

You can search the keywords "STM32F1 ??" (STM32F1 Crack) in Chinese and
you'll find many advertisements and victims of copycat complaining in EE
forums. While GD32 seems to include more countermeasures in the chip,
relatively obscure and have a higher cost of attack, I can only find
one company or two cracking GD32, compared to lots of companies for
STM32. 

BTW, BasicCard and JavaCard seemed even more obscure and I cannot find
any public service of cracking.

See:
[1] http://blog.sina.com.cn/s/blog_770bd2000100zssn.html
[2] http://www.stmcu.org/module/forum/thread-608097-1-6.html
[3] http://www.pcbhf.com/xinpianjiemi/icxinghaopanding/320.html
[4] https://blog.csdn.net/sinat_36568888/article/details/52984056

-----

Common countermeasures in the industry vaires, including...

1. Use high voltage to destroy most I/O pins to render most inputs useless,
creating a smaller attack surface.
2. Hardcode chip UUID, using "security through obscurity" to refuse program
execution if a unknown ID has been detected.
3. Use proprietary secure chips that come with NDAs.

But it does not solve any real problem in the perspective of cryptography.
They are all "security through obscurity" at best, just driving out script
kiddies (or equipment kiddies?) at worst.

As I have said in the gnuk-users list, the only way to solve this problem
is using something like a secure chip, a TPM, or a cryptography coprocessor.
It is very important, but the free software community never trusted these
devices, because they can be used to carry out "trusted computing" vendor
lock-in, implement DRM, implant backdoors, etc.

My point is, if these hardware is instructed exclusively by Free Software,
the ultimate master of these devices are their users, and none of these will
be a problem. So, we need to find a security chip that comes with OPEN,
PUBLIC specs, so we can develop free software for it.

-----

In the beginning of this year, I have done some researches for this project,
I've found... Thanks to the emergence of the "Internet-of-Trash", security of
embedded devices have became a real demand, so many manufacturers now have
simple security chips that do not require any NDA nor subject to any cryptographic
regulations, yet, they are basic versions of secure chips that can seal keys.
They may not as temper-proof as a proprietary ST31 chip, but is a huge improvement
compared to generic microcontrollers.

Now I have plans to experiment with the ATECC508A chip by Atmel, if I have time.
It looks like a simple security chip with full specs, and suitable to be used with
Gnuk. The datasheet is interesting, see

[5] http://ww1.microchip.com/downloads/en/DeviceDoc/20005927A.pdf

Also, the TPM chips found on x86 systems are really underestimated by the
Free Software community, since it's a mass-produced commodity chip with full
spec available.

-----

To prevent the chip becoming a single point of failure, we can implement
"split-secret" or "double-encryption" scheme. This allows us to use the security
chip in a trustless manner - a offline attacker needs to break both STM32F1
and the security chip, before getting access to the key material. No matter
what have happened to the chip, the key is still as secure as the original
STM32F1 + KDF-DO.

For example, if a security chip allows us to encrypt and decrypt data with
its internal key, but only after a correct PIN code is provided, a simple
scheme can be:

   1. Enter PIN
   2. PIN = KDF(PIN)
   3. K1 = HMAC-256(PIN, sqrt_2)
   4. K2 = KMAC-256(PIN, sqrt_3)

So K1 and K2 is now two independent keys. It's just an example for
simplicity, a secure system should use standard, proven cryptography,
like the "Expand" stage of the "Extract-and-Expand" KDF specified in
RFC5869.

[6] https://tools.ietf.org/html/rfc5869

   5. (chip) Reset chip
   6. (chip) Set security chip PIN to K2
   7. (chip) Generate a new secret key on chip

When storing our secret,

   8. Encrypt key material with K1 on STM32, output known as C1
   9. Encrypt key material with K2 on chip, output known as C2
  10. Save C2 to STM32 ROM.

Reverse this process for decryption. Essentially, we encrypt our data
twice, first by ourselves on STM32, then by the chip with its internal
key. The two keys are both derived from the User PIN on-the-fly during
runtime, cryptographically independent of each other. As soon as power
is removed, the attacker is forced to break the security chip, the STM32
chip, and our original encryption, three times in a row.

-----

> Well, I encourage Gnuk users to new use KDF-DO feature with newer GnuPG.

Yes, KDF-DO should be an essential protection. A six-word diceware
passphrase is also recommended.

All to be said, we don't really know if the "STM32 Cracking" service really
works. Perhaps we can launch a funding campaign to accept donations, and
find one company to actually pay them to attack our existing Gnuk systems,
and see if they can recover the encrypted data from ROM.

Happy Hacking,

Tom Li
Beijing GNU/Linux User Group.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 851 bytes
Desc: Digital signature
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20180606/f9a3bd62/attachment.sig>

From ndk.clanbo at gmail.com  Wed Jun  6 18:56:29 2018
From: ndk.clanbo at gmail.com (NdK)
Date: Wed, 6 Jun 2018 18:56:29 +0200
Subject: [NIIBE Yutaka] STM32F103 flash ROM read-out service
In-Reply-To: <20180606154907.GA73725@x220>
References: <87vaawslfg.fsf@iwagami.gniibe.org> <20180606154907.GA73725@x220>
Message-ID: <3f347da5-13c6-da21-0b44-3c2801fde5cd@gmail.com>

Il 06/06/2018 17:49, Tom Li via Gnuk-users ha scritto:

> BTW, BasicCard and JavaCard seemed even more obscure and I cannot find
> any public service of cracking.
Because those are (at least should be) based on secure chips.

> But it does not solve any real problem in the perspective of cryptography.
> They are all "security through obscurity" at best, just driving out script
> kiddies (or equipment kiddies?) at worst.
The only secure (even against decapping attacks) device I know of is a
very old parallel-port "key" a friend described me ~25y ago.
It was made of 3 silicon layers: the outer ones only contained interface
circuits and 'randomness' while the keys and the logic were in the
central layer. Trying to remove the outer layers destroyed the random
patterns that were used as 'internal master key', rendering the rest
completely useless.
IIRC some recent chips reused (partially) that idea, rebranded under
"Physically Unclonable" something.
Yep... Found:
https://community.cadence.com/cadence_blogs_8/b/breakfast-bytes/posts/secret-key-generation-with-physically-unclonable-functions
(but looking for "physically unclonable chip" returns lots of results).
Those chips work on the same principle: decapping alters the silicon
layers and the 'random id' changes before the attacker have a chance to
read it.

> As I have said in the gnuk-users list, the only way to solve this problem
> is using something like a secure chip, a TPM, or a cryptography coprocessor.
> It is very important, but the free software community never trusted these
> devices, because they can be used to carry out "trusted computing" vendor
> lock-in, implement DRM, implant backdoors, etc.
Then we should all use RISC-V chips :)

> Now I have plans to experiment with the ATECC508A chip by Atmel, if I have time.
> It looks like a simple security chip with full specs, and suitable to be used with
> Gnuk. The datasheet is interesting, see
> [5] http://ww1.microchip.com/downloads/en/DeviceDoc/20005927A.pdf
Too bad neither ETECC508A nor ATECC608A support curve25519 :( Only some
NIST ones.

> Also, the TPM chips found on x86 systems are really underestimated by the
> Free Software community, since it's a mass-produced commodity chip with full
> spec available.
Well, at least some TPM 1.2 chips have already been cracked.

> To prevent the chip becoming a single point of failure, we can implement
> "split-secret" or "double-encryption" scheme. This allows us to use the security
> chip in a trustless manner - a offline attacker needs to break both STM32F1
> and the security chip, before getting access to the key material. No matter
> what have happened to the chip, the key is still as secure as the original
> STM32F1 + KDF-DO.
Yes, but you risk having very long delays, that could even be
unacceptable. Unless there's a way to parallelize the operations (say
'do more KDF iterations while the chip is decoding').

> All to be said, we don't really know if the "STM32 Cracking" service really
> works. Perhaps we can launch a funding campaign to accept donations, and
> find one company to actually pay them to attack our existing Gnuk systems,
> and see if they can recover the encrypted data from ROM.
I'd bet it works as described in the offers.

BYtE,
 Diego


From gniibe at fsij.org  Thu Jun  7 02:26:53 2018
From: gniibe at fsij.org (NIIBE Yutaka)
Date: Thu, 07 Jun 2018 09:26:53 +0900
Subject: [NIIBE Yutaka] STM32F103 flash ROM read-out service
In-Reply-To: <20180606154907.GA73725@x220>
References: <87vaawslfg.fsf@iwagami.gniibe.org> <20180606154907.GA73725@x220>
Message-ID: <87lgbrbfw2.fsf@iwagami.gniibe.org>

Hello,

Continues at gnuk-users...

tomli at tomli.me wrote:
> These services have came into existence as early as 2012. It is a main
> way used to create cheap clones by rogue competitors of products on
> the existing market. It's commonly believed STM32F1 is easy to crack,
> both through physical IC decapping, or by mounting a fault injection
> attack to disable the flash readout protection, or exploting the
> bootloader, who knows...

Generally speaking (not specific to this chip and this context), I think
that disassembly of IC cap is not that hard.  And once the chip is
analyzed to locate its flash ROM part, the flash ROM content may be
accessible by data+address lines directly.

In this context, GD32F103 is considered easier to break (after
disassembly of IC), because of its composition of MCU part and flash
part.  So, for me, it's no wonder they need to claim they have
countermeasure(s).

> you'll find many advertisements and victims of copycat complaining in EE
> forums. While GD32 seems to include more countermeasures in the chip,
> relatively obscure and have a higher cost of attack, I can only find
> one company or two cracking GD32, compared to lots of companies for
> STM32. 
>
> BTW, BasicCard and JavaCard seemed even more obscure and I cannot find
> any public service of cracking.

Thanks for your references.  I think that market size matters.  For
reading out proprietary program (for copying product), there would be
more demand.  For reading out private material, it would violate laws in
many countries.  So, even if it's possible technically, it would not be
advertised like pcbcopy.com does so for STM32F103.  That's my
consideration.

I am not sure if the service itself can be profitable.  But, claiming
they can do that, it sounds like they have enough technology.  And it is
true that it is an important part of copying a product and its PCB.

> My point is, if these hardware is instructed exclusively by Free Software,
> the ultimate master of these devices are their users, and none of these will
> be a problem. So, we need to find a security chip that comes with OPEN,
> PUBLIC specs, so we can develop free software for it.

... provided it can be manufactured independently with reproducibility
(as NdK points out in another expression).  I think that dependency to
specific company matters.

And... when you use a "secure" chip, how can you measure their claim to
be "secure"?  In my opinion, it should be possible to be evaluated by
independent party.

Furthermore, if some technology is available for a chip to be "secure",
it is good for users of semiconductor to ask applying the technology to
improve some other chips.

My point is that it's not only obscurity, but it's too far to be
scientific.  I wonder the reason why people can rely on that, seriously.

> Now I have plans to experiment with the ATECC508A chip by Atmel

Good.  If it's going well (or not), I would recommend to make a chip
with similar functionality or more (as NdK suggested another curve).

> Also, the TPM chips found on x86 systems are really underestimated by the
> Free Software community, since it's a mass-produced commodity chip with full
> spec available.

It is true some specification is available to produce hardware (a board
of PC with the chip), but...

I have a TPM chip from Infineon, but the spec how to use it
(independently, out of scope of TCG) is not available to public, as far
as I know.  In some cases, for my experience, it requires NDA documents,
non-free tools and drivers/libraries.  At leaset, Infineon suggested so.

But I'm an old engineer, the situation may be changed now.

Could you please let me know if any specification is available?  Then,
making something like Yubikey or Nitrokey Pro, using a TPM chip will be
possible.

> All to be said, we don't really know if the "STM32 Cracking" service really
> works. Perhaps we can launch a funding campaign to accept donations, and
> find one company to actually pay them to attack our existing Gnuk systems,
> and see if they can recover the encrypted data from ROM.

Please make sure it doesn't violate any laws and regulations, if someone
is going ahead.

In my opinion, these things (evaluation how secure a chip is) should be
possible, in some scientific ways, not only for Gnuk (or for STM32F103),
but for general cases.
-- 


From ndk.clanbo at gmail.com  Thu Jun  7 13:01:55 2018
From: ndk.clanbo at gmail.com (NdK)
Date: Thu, 7 Jun 2018 13:01:55 +0200
Subject: [NIIBE Yutaka] STM32F103 flash ROM read-out service
In-Reply-To: <87lgbrbfw2.fsf@iwagami.gniibe.org>
References: <87vaawslfg.fsf@iwagami.gniibe.org> <20180606154907.GA73725@x220>
 <87lgbrbfw2.fsf@iwagami.gniibe.org>
Message-ID: <c9c514d3-cd11-045c-4c45-5dbe6da0f081@gmail.com>

Il 07/06/2018 02:26, NIIBE Yutaka ha scritto:

> ... provided it can be manufactured independently with reproducibility
> (as NdK points out in another expression).  I think that dependency to
> specific company matters.
Expecially because you have no control over the finished product: if
they decide to add a backdoor after you vetted the chip, you can't know.
Unless there's a continuous vetting process (over any batch, decap X%
chips to check).

> And... when you use a "secure" chip, how can you measure their claim to
> be "secure"?  In my opinion, it should be possible to be evaluated by
> independent party.
That's usually the "certified" part. Too bad too often they tell a
device is certified against a norm, but they don't tell exactly what got
certified (unless it's mandated by the norm, but that's quite rare).
Was it just hardness against flash reading? What about invasive attacks?
And side-channel ones?
Too often (controllers from Microchip, just to say one) there's note
that the protection only works if the device is used as specified:
ROFLASTC! An attacker will do anything... running it out of spec is the
most basic attack, usually way easier than decapping.

> Furthermore, if some technology is available for a chip to be "secure",
> it is good for users of semiconductor to ask applying the technology to
> improve some other chips.
It's just a matter of costs. If it adds a fraction of a cent to the
cost, it's not suitable for the cheap chips. Probably the
countermeasures needed for "military grade" smartcards add 2-3 cents to
the chip cost (probably less).

> Please make sure it doesn't violate any laws and regulations, if someone
> is going ahead.
Worth verifying, but having *my* secrets extracted from *my* device
should not violate laws. But after that is the extracted data still a
secret at all?

> In my opinion, these things (evaluation how secure a chip is) should be
> possible, in some scientific ways, not only for Gnuk (or for STM32F103),
> but for general cases.
You can choose the standard for having the device certified. And define
the exact attack scenario. Then pay. A lot, usually. :(

BYtE,
 Diego



From gniibe at fsij.org  Thu Jun  7 14:35:41 2018
From: gniibe at fsij.org (NIIBE Yutaka)
Date: Thu, 07 Jun 2018 21:35:41 +0900
Subject: [NIIBE Yutaka] STM32F103 flash ROM read-out service
In-Reply-To: <c9c514d3-cd11-045c-4c45-5dbe6da0f081@gmail.com>
References: <87vaawslfg.fsf@iwagami.gniibe.org> <20180606154907.GA73725@x220>
 <87lgbrbfw2.fsf@iwagami.gniibe.org>
 <c9c514d3-cd11-045c-4c45-5dbe6da0f081@gmail.com>
Message-ID: <87h8melqoy.fsf@fsij.org>

I wrote:
> And... when you use a "secure" chip, how can you measure their claim to
> be "secure"?  In my opinion, it should be possible to be evaluated by
> independent party.

NdK <ndk.clanbo at gmail.com> wrote:
> You can choose the standard for having the device certified. And define
> the exact attack scenario. Then pay. A lot, usually. :(

I know something called "Protection Profile" or certification which is
required to offer devices to government.

Protection Profile: Eurosmart PP/9806, SSVG-PP of BSI, or JICSAP PP/0301.

Or, FIPS140-2 and FIPS140-2 DTR would be interesting document.

Or, we have Common Criteria for Information Technology Security
Evaluation.

IMNSHO, those certification assume (and allow) proprietary technology.
And evaluation for certification is too rough (for me).

For example, many side channel attacks have been invented.

BTW, I know a company in Japan which offers a service to decap a IC chip
and to repair somthing by FIB in two days.  I don't know how much does
it cost.  If the read-out from flash method to STM32F103 is modifying
protection bit and simply use JTAG/SWD debugger, it takes two days +
some.
-- 


From ndk.clanbo at gmail.com  Thu Jun  7 14:54:54 2018
From: ndk.clanbo at gmail.com (NdK)
Date: Thu, 7 Jun 2018 14:54:54 +0200
Subject: [NIIBE Yutaka] STM32F103 flash ROM read-out service
In-Reply-To: <87h8melqoy.fsf@fsij.org>
References: <87vaawslfg.fsf@iwagami.gniibe.org> <20180606154907.GA73725@x220>
 <87lgbrbfw2.fsf@iwagami.gniibe.org>
 <c9c514d3-cd11-045c-4c45-5dbe6da0f081@gmail.com> <87h8melqoy.fsf@fsij.org>
Message-ID: <94edba30-0867-bfcb-0e2a-f0a074a3b0db@gmail.com>

Il 07/06/2018 14:35, NIIBE Yutaka ha scritto:

> IMNSHO, those certification assume (and allow) proprietary technology.
> And evaluation for certification is too rough (for me).
> For example, many side channel attacks have been invented.
Yes, certifications can only state that the known attacks won't work.
They can't say anything about new ones. Can't be different.
When you buy a strong door, they can certify that the lock can't be
forced with known methods. But usually don't say anything about the
window left open :)

> BTW, I know a company in Japan which offers a service to decap a IC chip
> and to repair somthing by FIB in two days.  I don't know how much does
> it cost.  If the read-out from flash method to STM32F103 is modifying
> protection bit and simply use JTAG/SWD debugger, it takes two days +
> some.
The best we can do is keep that as a baseline. It requires 2 days? OK.
If my GnuK token disappears for more than 24h I know I have to revoke my
keys before they can crack KDF. That's a big plus against keys stored on
disk because I can see that the token is actually missing (say because I
have to use it every day): they physically need it to carry out the attack.
That's more or less the same thing I'm studying for my domotic system:
if a node goes offline for more than 'x' minutes, it's considered
captured and kicked out.
I think there's no other way (in my case, with ESP8266, it's even worse:
it can be read in a couple of minutes).

BYtE,
 Diego


From tomli at tomli.me  Fri Jun  8 05:35:32 2018
From: tomli at tomli.me (tomli at tomli.me)
Date: Fri, 8 Jun 2018 11:35:32 +0800
Subject: [NIIBE Yutaka] STM32F103 flash ROM read-out service
In-Reply-To: <87lgbrbfw2.fsf@iwagami.gniibe.org>
References: <87vaawslfg.fsf@iwagami.gniibe.org> <20180606154907.GA73725@x220>
 <87lgbrbfw2.fsf@iwagami.gniibe.org>
Message-ID: <20180608033532.GA13329@x220>

> My point is that it's not only obscurity, but it's too far to be
> scientific.  I wonder the reason why people can rely on that, seriously.

The reason is simple, there is no other options.

To an extent, the internal details of all hardware is inaccessible.
You may program a RISC-V CPU on a FPGA, but the operation of the
FPGA is ultimately inaccessible. But RMS believed this is the result
of the nature of hardware - software is more like a set of abstract
instructions, or ideas, but hardware, as it is today, mere physical
objects. While it is a good thing to apply the princple of free
software to hardware design, just like you did in FST-01, for chips
and many types of other hardware, most of the time it's not possible,
and sometimes not even needed to. Perhaps in the future the chips can
be made just like how small prototypes is made by 3D printer. "In the
meantime, there is no need to reject hardware with nonfree designs on
principle." Therefore, many problems of crypto chips also exist on
nearly all types of chips.

On the one hand, you have standard embedded controllers with inaccessible
internal details, on the other hand, you have specialized crypto chips
with inaccessible internal details. Provided tools and documentations for
development is freely available, of course, you can assume the crypto
chips, actually, may not be more secure than the standard embedded
controllers as advertised. In the same time, it is also unreasonable to
think a standard embedded controller is superior to the crypto chip.
Probabilistic speaking, the crypto chip should have included more counter-
measures, and it should be at least a little more expensive to crack.

Think about it, if nothing made a crypto chip inherently more "sinnful"
than any other chips, why are we keep questioning it? Just like what we
are doing now? I think the reason is that the crypto chips are "advertised"
and "guaranteed" to be secure, and that where all the troubles begin. If
these chips are never claimed to be secure, I guess we won't have problem
with them.

Bascially, I don't think the crypto chips are evil by themselves, I
completely agree independent verification of its security claim is an
issue. Meanwhile, the best thing we can do is avoid chips with private
specs and tools, and stick to common commodity chips as much as possible.
Thanks to IoT, we now have chips like ATECC508A that are expected be to
use as a common component in IoT device, just like a MCU, and I expect
more and more similar products enter the market. Then at least we'll
get some standard crypto chips of choices that are made by lots of
manufacturers. We should also expore the option that doesn't require
us to trust the crypto chip completely.

These, at least, can make us feel a little more confident...

> > Now I have plans to experiment with the ATECC508A chip by Atmel
> Good.  If it's going well (or not), I would recommend to make a chip
> with similar functionality or more (as NdK suggested another curve).

The algorithms or curves the chip uses doesn't even matter in this
case I believe, all it is needed to do is sealing a secret key inside,
no matter it's an AES key, a NIST P-curve private key, or even a 3DES
key, since the chip is only used for the outer-layer of encryption of
key storage.

But as pointed out beforehand, the latency of this scheme may be
unacceptable, and one may have to offload the crypto computation to the
chip, and this is unacceptable to me. I'll find out whether it is the
case or not soon.

> I have a TPM chip from Infineon, but the spec how to use it
> (independently, out of scope of TCG) is not available to public, as far
> as I know.  In some cases, for my experience, it requires NDA documents,
> non-free tools and drivers/libraries.  At leaset, Infineon suggested so.
> 
> But I'm an old engineer, the situation may be changed now.
> 
> Could you please let me know if any specification is available?  Then,
> making something like Yubikey or Nitrokey Pro, using a TPM chip will be
> possible.

I made a mistake. Apparently TCG was all it's needed to use the chip,
but it is not? Can't one just use a subset of the crypto in TCG spec
to implement a "secret-sealing" scheme? Or the TCG spec is just for the
TPM module on PCs, the chip itself is still locked behind proprietary
specs?

Happy Hacking,

Tom Li
Beijing GNU/Linux User Group
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 851 bytes
Desc: Digital signature
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20180608/e6b4821e/attachment.sig>

From szczepan at nitrokey.com  Wed Jul  4 16:50:54 2018
From: szczepan at nitrokey.com (Szczepan Zalega | Nitrokey)
Date: Wed, 4 Jul 2018 16:50:54 +0200
Subject: [PATCH] Update script
In-Reply-To: <5abd4031-fe2e-109b-c6af-4855b878bd44@nitrokey.com>
References: <5abd4031-fe2e-109b-c6af-4855b878bd44@nitrokey.com>
Message-ID: <5dea8dab-3f56-d00d-1092-f59e9cb212a1@nitrokey.com>

On 07/04/2018 04:49 PM, Szczepan Zalega | Nitrokey wrote:
> Attached are patches for the update by password script [1], which at the
> moment fails with the update of devices with older firmwares. There are
> a couple of other improvements too, like:
> - killing scdaemon if update script cannot connect,
> - better argument parsing,
> - help screen,
> - show device's string before and after update process,
> 
> Patches are divided in such a way, that they could be merged selectively.
> 

And here are other improvements:
- missing package in tests readme,
- add regnual build as well in Docker.


-- 
Best regards,
Szczepan
-------------- next part --------------
A non-text attachment was scrubbed...
Name: 0002-Add-install-requirement-for-.-tests.patch
Type: text/x-patch
Size: 711 bytes
Desc: not available
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20180704/f9f84107/attachment.bin>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: 0001-Build-regnual-with-docker.patch
Type: text/x-patch
Size: 874 bytes
Desc: not available
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20180704/f9f84107/attachment-0001.bin>

From szczepan at nitrokey.com  Wed Jul  4 16:49:07 2018
From: szczepan at nitrokey.com (Szczepan Zalega | Nitrokey)
Date: Wed, 4 Jul 2018 16:49:07 +0200
Subject: [PATCH] Update script
Message-ID: <5abd4031-fe2e-109b-c6af-4855b878bd44@nitrokey.com>

Hi!

Attached are patches for the update by password script [1], which at the
moment fails with the update of devices with older firmwares. There are
a couple of other improvements too, like:
- killing scdaemon if update script cannot connect,
- better argument parsing,
- help screen,
- show device's string before and after update process,

Patches are divided in such a way, that they could be merged selectively.

[1] tool/upgrade_by_passwd.py

-- 
Best regards,
Szczepan
-------------- next part --------------
A non-text attachment was scrubbed...
Name: 0005-Handle-CLI-parsing-protect-from-mistakes-and-give-me.patch
Type: text/x-patch
Size: 4462 bytes
Desc: not available
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20180704/2f486175/attachment.bin>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: 0004-Kill-scdaemon-on-connection-failure.patch
Type: text/x-patch
Size: 2413 bytes
Desc: not available
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20180704/2f486175/attachment-0001.bin>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: 0003-Rewrite-usb_strings.-Show-device-s-strings-before-an.patch
Type: text/x-patch
Size: 3452 bytes
Desc: not available
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20180704/2f486175/attachment-0002.bin>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: 0002-Fix-typo.patch
Type: text/x-patch
Size: 884 bytes
Desc: not available
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20180704/2f486175/attachment-0003.bin>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: 0001-Catch-exception-when-no-KDF-data-is-found.patch
Type: text/x-patch
Size: 1537 bytes
Desc: not available
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20180704/2f486175/attachment-0004.bin>

From gniibe at fsij.org  Fri Jul 13 09:41:18 2018
From: gniibe at fsij.org (NIIBE Yutaka)
Date: Fri, 13 Jul 2018 16:41:18 +0900
Subject: [PATCH] Update script
In-Reply-To: <5abd4031-fe2e-109b-c6af-4855b878bd44@nitrokey.com>
References: <5abd4031-fe2e-109b-c6af-4855b878bd44@nitrokey.com>
Message-ID: <877elzoa5d.fsf@iwagami.gniibe.org>

Hello,

Thanks for your patches.

I applied the first two, which require no discussion.  For others, let
me have more time.

Firstly, for Python programming, I think that all import should be done
earlier (not only in some function or in some if clause).  That's
because if import fails in the deep call chain, sometime, it is a
disaster, where user can do no recovery.

Secondly, I don't agree the way like
0004-Kill-scdaemon-on-connection-failure.patch.  Let user invoke the
command.

For 0005-Handle-CLI-parsing-protect-from-mistakes-and-give-me.patch, I
partially agree it will be useful, but I wonder if your intended "user"
uses GUI or not.
-- 


From szczepan at nitrokey.com  Fri Jul 13 13:54:48 2018
From: szczepan at nitrokey.com (Szczepan Zalega | Nitrokey)
Date: Fri, 13 Jul 2018 13:54:48 +0200
Subject: [PATCH] Update script
In-Reply-To: <877elzoa5d.fsf@iwagami.gniibe.org>
References: <5abd4031-fe2e-109b-c6af-4855b878bd44@nitrokey.com>
 <877elzoa5d.fsf@iwagami.gniibe.org>
Message-ID: <916bea6f-69a8-3b58-890b-1ddaf15d8c9f@nitrokey.com>

On 07/13/2018 09:41 AM, NIIBE Yutaka wrote:
> I applied the first two, which require no discussion.  For others, let
> me have more time.
> 
Hi!

Thank you for the review! As a general comment - I tried to make it as
easy to use as possible, so users could be up to date with no effort or
frustration, regardless of their overall PC experience level.

> Firstly, for Python programming, I think that all import should be done
> earlier (not only in some function or in some if clause).  That's
> because if import fails in the deep call chain, sometime, it is a
> disaster, where user can do no recovery.
>
I agree and will keep that in mind. Besides `requirements.txt` we could
keep `import` in try/catch block and print further installation
instructions to user.

> Secondly, I don't agree the way like
> 0004-Kill-scdaemon-on-connection-failure.patch.  Let user invoke the
> command.
> 
Scdaemon owning a device is the most frequent cause of the script update
failure on Ubuntu I am aware of (and perhaps other distros, where
scdaemon/pcscd are used), hence the solution. It is called only on
connection failure and is easily recoverable as well (it starts on
request from GnuPG), so it should be pretty harmless. Alternatively the
whole command could be printed to the console with the proper further
guide.

> For 0005-Handle-CLI-parsing-protect-from-mistakes-and-give-me.patch, I
> partially agree it will be useful, but I wonder if your intended "user"
> uses GUI or not.
> 
To be honest I was myself frequently opening the update script to see,
whenever I supply the binaries in the correct order and the improvements
here are making this checks for me. Argparse module is in Python since
3.2 (and in 2.7), so there are no further installation actions required.
I do not entirely get the GUI reference - could you elaborate? If you
feel it GUI-like in the sense of guiding the user, then I think this is
a good experience :-)

Regarding making a separate update GUI application, I have plans for it
(for further future).

What is your opinion on moving the Python tools to 3.x? As far as I
remember 2.7 will be stopped being supported this year.

-- 
Best regards,
Szczepan


From gniibe at fsij.org  Tue Jul 17 09:06:26 2018
From: gniibe at fsij.org (NIIBE Yutaka)
Date: Tue, 17 Jul 2018 16:06:26 +0900
Subject: [PATCH] Update script
In-Reply-To: <916bea6f-69a8-3b58-890b-1ddaf15d8c9f@nitrokey.com>
References: <5abd4031-fe2e-109b-c6af-4855b878bd44@nitrokey.com>
 <877elzoa5d.fsf@iwagami.gniibe.org>
 <916bea6f-69a8-3b58-890b-1ddaf15d8c9f@nitrokey.com>
Message-ID: <87r2k25ojx.fsf@fsij.org>

Szczepan Zalega | Nitrokey <szczepan at nitrokey.com> wrote:
> Thank you for the review! As a general comment - I tried to make it as
> easy to use as possible, so users could be up to date with no effort or
> frustration, regardless of their overall PC experience level.

Perhaps, those scripts are not ready for that.  The situation is: I put
a script in the repo, so that it's useful, it's a kind of... to show how
it should work technically.

If we will prepare such a tool to user, I think that it should be
installed in the system.  At least, we should name a tool and/or define
relevant methods to use that.

Let us consider about that.  Well, I think that providing a command
named "gnuk-tool" would be good, to have sub-commands which is
implemented by each script.

How do you think?
-- 


From szczepan at nitrokey.com  Tue Jul 17 16:55:09 2018
From: szczepan at nitrokey.com (Szczepan Zalega | Nitrokey)
Date: Tue, 17 Jul 2018 16:55:09 +0200
Subject: [PATCH] Update script
In-Reply-To: <87r2k25ojx.fsf@fsij.org>
References: <5abd4031-fe2e-109b-c6af-4855b878bd44@nitrokey.com>
 <877elzoa5d.fsf@iwagami.gniibe.org>
 <916bea6f-69a8-3b58-890b-1ddaf15d8c9f@nitrokey.com> <87r2k25ojx.fsf@fsij.org>
Message-ID: <763f7f6c-bb55-5b54-0375-ae39ee83d022@nitrokey.com>

On 07/17/2018 09:06 AM, NIIBE Yutaka wrote:
> Perhaps, those scripts are not ready for that.  The situation is: I put
> a script in the repo, so that it's useful, it's a kind of... to show how
> it should work technically.
> 
I see, like a tech-demo.

> If we will prepare such a tool to user, I think that it should be
> installed in the system.  At least, we should name a tool and/or define
> relevant methods to use that.
> 
Yes. Such tool could be distributed and installed via Python's PIP.
Having all in Python would make it portable.

> Let us consider about that.  Well, I think that providing a command
> named "gnuk-tool" would be good, to have sub-commands which is
> implemented by each script.
> 
So it would be something like:
'$ gnuk-tool update regnual.bin gnuk.bin'
I think this is a good idea. It should simplify device's management.

Assuming existing implementation could be adjusted, alternatively to
starting work directly on the final tool, we could incrementally work
towards the target with two stages: first to update each script
separately with a better UI, and later to compose a single tool from
this scripts' set to finally do a proper packagement.

Are there any other features you would see usable for the final tool,
besides existing scripts?



-- 
Best regards,
Szczepan


From simon at josefsson.org  Sat Aug 11 23:39:49 2018
From: simon at josefsson.org (Simon Josefsson)
Date: Sat, 11 Aug 2018 23:39:49 +0200
Subject: Buying FST-01(G)?
Message-ID: <874lg0shui.fsf@latte.josefsson.org>

Hello,

README says

    FST-01 (Flying Stone Tiny 01) is available for sale, and it is a
    kind of the best choice, hopefully.

however I cannot find FST-01 on Seedstudio anymore.  What happened?

I can find FST-01 (or likely FST-01G?)  through FSF:

https://shop.fsf.org/storage-devices/neug-usb-true-random-number-generator

however it isn't clear to me whether I can put Gnuk on it.

What's the best recommended hardware to run Gnuk on?

Any chance of getting any hardware RYF certified? :)

Thanks,
/Simon
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 487 bytes
Desc: not available
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20180811/7b8efed1/attachment.sig>

From gniibe at fsij.org  Sun Aug 12 07:08:37 2018
From: gniibe at fsij.org (NIIBE Yutaka)
Date: Sun, 12 Aug 2018 14:08:37 +0900
Subject: Buying FST-01(G)?
In-Reply-To: <874lg0shui.fsf@latte.josefsson.org>
References: <874lg0shui.fsf@latte.josefsson.org>
Message-ID: <87a7ps9noq.fsf@fsij.org>

Simon Josefsson <simon at josefsson.org> wrote:
> however I cannot find FST-01 on Seedstudio anymore.  What happened?

For FST-01 (2010 to 2015), Seeed had kindly offered me an option selling
at their SeeedStudio.com.  For not-selling-much product like FST-01 (10
to 20 per month), this option is not available now.

After sold out of FST-01, I manufactured FST-01G (by Seeed Technology)
last year.  It is not available at SeeedStudio.com.

And...

> I can find FST-01 (or likely FST-01G?)  through FSF:
>
> https://shop.fsf.org/storage-devices/neug-usb-true-random-number-generator
>
> however it isn't clear to me whether I can put Gnuk on it.

Yes.  It is FST-01G now.  This is an only stable distribution channel.
I personally bring FST-01G at FOSDEM or Debconf.

With the product from FSF, you can flash Gnuk by youself.  It has NeuG
instead, now.  It must be the best if it has Gnuk, but I wonder if it
would cause export/import problem around crypto product.  I was taught
that newer ECC would be risky for China, for example.

> What's the best recommended hardware to run Gnuk on?

I believe FST-01G is the best, if you like current enclosure, or you can
make your own enclosure.  I value how it is reproducible by other party.
I don't know other products, which BOM and test plan are available to
public.

This summer, I am trying new PCB with a bit smaller size, to match
Chinese de-facto standard called "wristband USB" with GD32F103.

> Any chance of getting any hardware RYF certified? :)

In 2014, I asked FSF.  I brought two FST-01 to John at Debconf14.  At
that time, such a device was not in the scope of RYF, I suppose.  I felt
that I only got some negative response (like manufacturing process
required proprietary tool of ST-Link/V2), while that was actually
relevant.

FST-01G was manufactured using BeagleBone Green with my BBG-SWD.  So,
I think that it would be worth to ask again.  Well, staff members at
FSF have been changed, since then.
-- 


From tomli at tomli.me  Tue Aug 14 19:58:18 2018
From: tomli at tomli.me (tomli at tomli.me)
Date: Wed, 15 Aug 2018 01:58:18 +0800
Subject: Correction about the Flash Zero-Wait on GD32F103
Message-ID: <20180814175818.GA865794@x220>

Hello.

In the email I sent in Feburary,

    https://lists.gnupg.org/pipermail/gnuk-users/2018-March/000021.html

I described the operation of the flash memory of GD32F103 as,

> In addition, the access time for data behind of first 32 KiB is slow,
> one should put timing-crtitial data at the beginning of the flash chip.

Now it turned out to be a complete mistake. I confused and
mixed the datasheet of GD32F103, and GD32F130, whith is another
series of low-cost microcontroller based on Cortex-M3.

In fact, page 22 (physical page 46) of the GD32F1x0 datasheet reads,

> Up to 64KB of on-chip flash memory for storing instruction/data
> No waiting time within 32K bytes when CPU executes instruction
> A long delay when fetch 32K ~ 64K bytes date from flash

But page 44 of the GD32F10x datasheet reads,

> Up to 3072KB of on-chip flash memory for instruction and data.
> No waiting time within first 256K bytes when CPU executes instructions.
> A long delay when CPU fetches the instructions out of the range.

In conclusion, while the flash memory of GD32F130 only has
zero-wait access within the 32 KiB range, the flash memory
of GD32F103, the chip we are testing, should have complete
zero-wait access within the range of 256 KiB, which essentially
means the whole flash memory is zero-wait, since we are not
using high-density models.

Therefore, we should be able to use this chip without worrying
about incompatibility, or timing attacks.

Sorry for the previous misinformation.

BTW, I have confirmed on my board that the updated Chopstx and Gnuk
is indeed working correctly. Thanks for your hard-work. I guess it's
the right time to upstream the OpenOCD patches for GD32 development.

Happy Hacking,
Tom Li

Beijing GNU/Linux User Group
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 851 bytes
Desc: Digital signature
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20180815/e9d4dbc2/attachment.sig>

From mrtijn at riseup.net  Wed Aug 15 16:49:57 2018
From: mrtijn at riseup.net (Martijn)
Date: Wed, 15 Aug 2018 16:49:57 +0200
Subject: NeuG on the STlink v2?
Message-ID: <20180815164957.561a5e43@Martijn-T480>

Hello,

I found this [0] blog post online describing the process to install Gnuk on
the STlink v2, an in-circuit programmer/debugger for STM chips which also uses
the STM32F103. Would it also be possible to compile and install NeuG in a
similar fashion on an STlink v2?

Thanks in advance.

Kind regards,

Martijn

[0] https://blog.danman.eu/2-usb-crypto-token-for-use-with-gpg-and-ssh/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 833 bytes
Desc: OpenPGP digital signature
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20180815/a9ad031e/attachment.sig>

From gniibe at fsij.org  Thu Aug 16 02:44:00 2018
From: gniibe at fsij.org (NIIBE Yutaka)
Date: Thu, 16 Aug 2018 09:44:00 +0900
Subject: NeuG on the STlink v2?
In-Reply-To: <20180815164957.561a5e43@Martijn-T480>
References: <20180815164957.561a5e43@Martijn-T480>
Message-ID: <87d0uj9m3z.fsf@iwagami.gniibe.org>

Martijn <mrtijn at riseup.net> wrote:
> I found this [0] blog post online describing the process to install Gnuk on
> the STlink v2, an in-circuit programmer/debugger for STM chips which also uses
> the STM32F103. Would it also be possible to compile and install NeuG in a
> similar fashion on an STlink v2?

Yes.  The hardware requirement of Gnuk and NeuG standalone device is
same;  MCU should be STM32F103 or GD32F103.  It only uses ADC and USB.
If it can run Gnuk, NeuG also can run.  For your board, you need clock
configuration (usually, 8MHz or 12MHz) and how to enable USB, and how to
control LED.

Well, there is one corner case.  While STM32F103 has 64KiB flash ROM
version, it actually has 128KiB, thus, you can install Gnuk on that.  A
version of GD32F103 seems to have only 64KiB, really.  On this MCU, you
can install NeuG (with no Fraucheky support), but you can't install
Gnuk.

Please note that there are multiple products for ST-Link/V2 clone.
So, configuration may differ.
-- 


From simon at josefsson.org  Sun Aug 19 23:34:51 2018
From: simon at josefsson.org (Simon Josefsson)
Date: Sun, 19 Aug 2018 23:34:51 +0200
Subject: Buying FST-01(G)?
In-Reply-To: <87a7ps9noq.fsf@fsij.org>
References: <874lg0shui.fsf@latte.josefsson.org> <87a7ps9noq.fsf@fsij.org>
Message-ID: <1534714491.20476.3.camel@josefsson.org>

s?n 2018-08-12 klockan 14:08 +0900 skrev NIIBE Yutaka:
> I can find FST-01 (or likely FST-01G?)??through FSF:
> 
> Yes.??It is FST-01G now.??This is an only stable distribution
> channel.
> I personally bring FST-01G at FOSDEM or Debconf.
> 
> With the product from FSF, you can flash Gnuk by youself.

Thanks for confirming this!

> Any chance of getting any hardware RYF certified? :)
> 
> In 2014, I asked FSF.??I brought two FST-01 to John at Debconf14.??At
> that time, such a device was not in the scope of RYF, I suppose.??I
> felt
> that I only got some negative response (like manufacturing process
> required proprietary tool of ST-Link/V2), while that was actually
> relevant.
> 
> FST-01G was manufactured using BeagleBone Green with my BBG-SWD.??So,
> I think that it would be worth to ask again.??Well, staff members at
> FSF have been changed, since then.

Do you think BBG would pass RYF?  Otherwise I see little difference
compared to ST-Link/V2.

/Simon
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 488 bytes
Desc: This is a digitally signed message part
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20180819/f2dce380/attachment.sig>

From gniibe at fsij.org  Mon Aug 20 05:00:31 2018
From: gniibe at fsij.org (NIIBE Yutaka)
Date: Mon, 20 Aug 2018 12:00:31 +0900
Subject: Buying FST-01(G)?
In-Reply-To: <1534714491.20476.3.camel@josefsson.org>
References: <874lg0shui.fsf@latte.josefsson.org> <87a7ps9noq.fsf@fsij.org>
 <1534714491.20476.3.camel@josefsson.org>
Message-ID: <877eklivxs.fsf@iwagami.gniibe.org>

Simon Josefsson <simon at josefsson.org> wrote:
> Do you think BBG would pass RYF?

I don't know, but I think it's not that far, by looking

	https://www.fsf.org/resources/hw/single-board-computers

BBG or PocketBeagle is a bit better than original BeagleBone Black,
since it doesn't assume using video output.  I think that we can use it
with fully free software environment.

For the hardware reproducibility with free software (with possible
modification), it is a bit difficult (yet).

We can find some resources here:

   http://wiki.seeedstudio.com/BeagleBone_Green/

While schematic and PCB design is available, the hardware design was
done by OrCAD, which is proprietary software.

> Otherwise I see little difference compared to ST-Link/V2.

Firstly, there is one step techinical difference.  Perhaps, it would be
also relevant from the viewpoint of RYF.

That is: We can control BBG-SWD on BBG better than ST-Link/V2.  Our use
of ST-Link/V2 is based on reverse engineering, so, while it works
somehow, but it's far from perfect.

If we focus on the firmware of JTAG/SWD device, comparison between
DAPLink and the firmware of ST-Link/V2 is more relevant.  (DAPLink is
free software, which is supported by ARM.)  Device with DAPLink is
better than ST-Link/V2.

If an engineer asks a device for his computer with Debian, I would
suggest a device with DAPLink.


Secondly, for me, BBG-SWD has practical technical benefit when I ask
flashing at a factory.

When their computer runs proprietary operating system, even if it's a
device with DAPLink, I don't know how we can practically protect against
possible mistake/attack,

While I cannot ask use of free operating system on their computer,
asking use of BBG is possible.  I prepare microSD with Debian and
BBG-SWD, and ask them to run a program to flash FST-01G with BBG.

And... I did that and they did accept my test plan for FST-01G
production.

Still, BBG is connected to a computer with a proprietary operating
system, that's true, but possible mistake/attack are limited.

This point would be out of scope for RYF.  This is an argument of how we
can receive free software firmware reliably.

More argument is possible for logistics.  Besides, I was asked about how
we can get anonymously.  My answer was: Please join LibrePlanet, FOSDEM
and/or Debconf, or you can ask PCBA and flashing by yourself.
-- 


From gniibe at fsij.org  Wed Aug 22 07:42:57 2018
From: gniibe at fsij.org (NIIBE Yutaka)
Date: Wed, 22 Aug 2018 14:42:57 +0900
Subject: Correction about the Flash Zero-Wait on GD32F103
In-Reply-To: <20180814175818.GA865794@x220>
References: <20180814175818.GA865794@x220>
Message-ID: <87d0ubklcu.fsf@iwagami.gniibe.org>

tomli at tomli.me wrote:
> Therefore, we should be able to use this chip without worrying
> about incompatibility, or timing attacks.

Thanks for your update.

> BTW, I have confirmed on my board that the updated Chopstx and Gnuk
> is indeed working correctly. Thanks for your hard-work. I guess it's
> the right time to upstream the OpenOCD patches for GD32 development.

Today, I released BBG-SWD version 0.04.  For me, normal flash write with
OpenOCD mostly works without specific change for GD32F103.  My problem
was that: When I tried to erase all flash by

	> flash erase_sector 0 0 127

It failed.  When I did for pages by pages, I managed to erase all
pages.

In February, your change was, iiuc, timing change and 32-bit access
change.  I think that latter may not be needed.
-- 


From tomli at tomli.me  Thu Aug 23 04:57:48 2018
From: tomli at tomli.me (tomli at tomli.me)
Date: Thu, 23 Aug 2018 10:57:48 +0800
Subject: How to Implement I2C on Chopstx?
Message-ID: <20180823025748.GA536661@x220>

Hi gniibe,

Recently I've done a little bit of further research about using an additional
ATECC508A crypto chip for improved security. Although there are some difficulties
but I was able to hack a solution, now the results looks promising. I will
publish the technical details after I finish my reseach. I was working on the
software protocol part and all the development was done on GNU/Linux. 

Now, logically the next step would be working with the actual hardware. In order
to control the chip, an I2C driver should be implemented in Chopstx. But I don't
understand the design and architecture of Chopstx, nor have any experience about
working on the "bare-metal" STM32 hardware without using a high-level HAL library
like STM32Cube or libopencm3, I have lots of things to learn.

From my understanding, the I2C subsystem on STM32F103 has three modes, polling,
interrupt, and DMA. Since I2C communication is only needed just before the private
keys are decrypted by DEK - at this point there is no other tasks to do - I think
we don't need to use interrupt or DMA to implement non-blocking asynchronous
I2C operation, we can block the whole firmware and perform I2C reads/writes by
busy-waiting and polling until we finish the job. 

But I don't understand about how interrupts, threads, context-switching or USB
communication is handled in Chopstix. Is it really okay to implement I2C in this
way? Is it going to break other things in Chopstx? Do you have more suggestions
and resources for the I2C implementation?

Thanks,
Tom Li

Beijing GNU/Linux User Group
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 851 bytes
Desc: Digital signature
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20180823/8dc02881/attachment.sig>

From gniibe at fsij.org  Thu Aug 23 08:39:42 2018
From: gniibe at fsij.org (NIIBE Yutaka)
Date: Thu, 23 Aug 2018 15:39:42 +0900
Subject: How to Implement I2C on Chopstx?
In-Reply-To: <20180823025748.GA536661@x220>
References: <20180823025748.GA536661@x220>
Message-ID: <87zhxdbn81.fsf@iwagami.gniibe.org>

tomli at tomli.me wrote:
> using a high-level HAL library
> like STM32Cube or libopencm3, I have lots of things to learn.

Well, you would need to unlearn things, perhaps.

> I think
> we don't need to use interrupt or DMA to implement non-blocking asynchronous
> I2C operation, we can block the whole firmware and perform I2C reads/writes by
> busy-waiting and polling until we finish the job.

That sounds more difficult for me.  Why not simply implement the
driver by DMA with an interrupt notification for DMA finish?

Do you intend to use it connecting your board through USB?  If so, USB
protocol requires the board should respond to host.

I'd suggest to read chopstx/example-usb-serial and
chopstx/contrib/usart-stm32f103.c, as well as the Chopstx Reference
Manual.
-- 


From tomli at tomli.me  Thu Aug 23 19:27:48 2018
From: tomli at tomli.me (tomli at tomli.me)
Date: Fri, 24 Aug 2018 01:27:48 +0800
Subject: How to Implement I2C on Chopstx?
In-Reply-To: <87zhxdbn81.fsf@iwagami.gniibe.org>
References: <20180823025748.GA536661@x220> <87zhxdbn81.fsf@iwagami.gniibe.org>
Message-ID: <20180823172748.GA970695@x220>

> > using a high-level HAL library
> > like STM32Cube or libopencm3, I have lots of things to learn.
>
> Well, you would need to unlearn things, perhaps.

Yes, that's right. It reminds me the experience of learning Dvorak
keyboard layout during the first two months ;-)

> > I think
> > we don't need to use interrupt or DMA to implement non-blocking asynchronous
> > I2C operation, we can block the whole firmware and perform I2C reads/writes by
> > busy-waiting and polling until we finish the job.
>
> That sounds more difficult for me.  Why not simply implement the
> driver by DMA with an interrupt notification for DMA finish?
> 
> Do you intend to use it connecting your board through USB?  If so, USB
> protocol requires the board should respond to host.

I understand the idea now. Using DMA with an interrupt allows an "event-driven"
way of development, which is easier to manage than busy-polling in a multithreaded
environment.

> I'd suggest to read chopstx/example-usb-serial and
> chopstx/contrib/usart-stm32f103.c, as well as the Chopstx Reference
> Manual.

Thanks for your advice.

I've looked through the USART code, and noticed all the reads/writes are
threaded in a producer-consumer model with a ring buffer. Is it designed
for full-deplex opeartion?

In I2C, the protocol is half-deplex with predefined message format, so I
think it's the whole driver can be implemented with a fixed-size buffer in
a single thread. Is my understanding correct?

Happy Hacking,
Tom Li

Beijing GNU/Linux User Group
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 851 bytes
Desc: Digital signature
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20180824/015a7be7/attachment.sig>

From gniibe at fsij.org  Fri Aug 24 09:53:23 2018
From: gniibe at fsij.org (NIIBE Yutaka)
Date: Fri, 24 Aug 2018 16:53:23 +0900
Subject: How to Implement I2C on Chopstx?
In-Reply-To: <20180823172748.GA970695@x220>
References: <20180823025748.GA536661@x220> <87zhxdbn81.fsf@iwagami.gniibe.org>
 <20180823172748.GA970695@x220>
Message-ID: <87in40urnw.fsf@fsij.org>

tomli at tomli.me wrote:
> the whole driver can be implemented with a fixed-size buffer in
> a single thread. Is my understanding correct?

Right.

My experience for I2C was more than ten years ago, though.
-- 


From bertrand at jacquin.bzh  Sun Aug 26 03:13:06 2018
From: bertrand at jacquin.bzh (Bertrand Jacquin)
Date: Sun, 26 Aug 2018 02:13:06 +0100
Subject: Gnuk and max-cache-ttl
Message-ID: <20180826011305.GB9207@lady-voodoo.scabb>

Hi,

I've noticed this issue since a long time but never reported it yet. I
have the following configuration defined in ~/.gnupg/gpg-agent.conf to
ensure the passphrase of my gnuk is not kept too long in gpg-agent
memory:

  default-cache-ttl     600
  default-cache-ttl-ssh 600
  max-cache-ttl         600
  max-cache-ttl-ssh     600

It seems that none of these parameters are properly respected, if I
leave my computer alive for more than 4 hours, no passphrase is asked
to me again when I use gpg-agent as a ssh-agent and connecting to a
remote host using SSH.

I am currently using gnupg 2.2.8.

Note that this issue does not happen with software gnupg keys.

Is this is a known issue ?

Cheers

-- 
Bertrand
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 228 bytes
Desc: Digital signature
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20180826/debaee68/attachment.sig>

From bertrand at jacquin.bzh  Sun Aug 26 03:08:48 2018
From: bertrand at jacquin.bzh (Bertrand Jacquin)
Date: Sun, 26 Aug 2018 02:08:48 +0100
Subject: Gnuk with GCC >= 5
Message-ID: <20180826010848.GA9207@lady-voodoo.scabb>

Hi,

I recently made an update of my FST-01 to gnuk 1.2.10. The firmware was
built using gcc 7.3.0 and firmware loaded using upgrade_by_passwd.py.
After the update, the USB key was not recognized. dmesg did not showing
the detection and the blue light did not blink as usual. Then I loaded
the firmware using a STlinkv2 and the same problem appeared. After doing
the same operation on a different host where the firmware was built
using gcc 4.9.4, the USB key was detected normally as usual. Trying to
understand the issue, I build the firmware with several version of gcc
and noticed that firmware built using gcc 5.9.4 was fine when firmwares
build with gcc 6.4.0 or 7.3.0 produced non functional firmwares. Then I
noticed a commit in master to fix a compile warning wit gcc 7.3.0,
applied it on top of gnuk 1.2.10 and ran the full iteration of tests as
mentioned before and did not see a change, all firmwares build with gcc
greater than 4.9.4 were not functional.

Is this a known issue ?

Cheers,
Bertrand

-- 
Bertrand
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 228 bytes
Desc: Digital signature
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20180826/ace237ea/attachment.sig>

From peter at digitalbrains.com  Sun Aug 26 11:01:43 2018
From: peter at digitalbrains.com (Peter Lebbing)
Date: Sun, 26 Aug 2018 11:01:43 +0200
Subject: Gnuk and max-cache-ttl
In-Reply-To: <20180826011305.GB9207@lady-voodoo.scabb>
References: <20180826011305.GB9207@lady-voodoo.scabb>
Message-ID: <433b7ae6-ff3c-cf5a-d841-f989aa96f9c6@digitalbrains.com>

On 26/08/18 03:13, Bertrand Jacquin wrote:
> It seems that none of these parameters are properly respected

Yes, it is a known shortcoming that these settings only work for on-disk
keys in the agent, not smartcards. Smartcards will remain unlocked as
long as they are powered currently, or until you do something like

$ gpg-connect-agent "scd killscd" /bye

ALthough the latter might actually still leave the smartcard unlocked
but simply make GnuPG unaware of this fact :-). I'm not sure.

HTH,

Peter.

-- 
I use the GNU Privacy Guard (GnuPG) in combination with Enigmail.
You can send me encrypted mail if you want some privacy.
My key is available at <http://digitalbrains.com/2012/openpgp-key-peter>

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 488 bytes
Desc: OpenPGP digital signature
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20180826/2d560107/attachment.sig>

From gniibe at fsij.org  Mon Aug 27 03:30:46 2018
From: gniibe at fsij.org (NIIBE Yutaka)
Date: Mon, 27 Aug 2018 10:30:46 +0900
Subject: Gnuk with GCC >= 5
In-Reply-To: <20180826010848.GA9207@lady-voodoo.scabb>
References: <20180826010848.GA9207@lady-voodoo.scabb>
Message-ID: <87tvngwq7t.fsf@iwagami.gniibe.org>

Bertrand Jacquin <bertrand at jacquin.bzh> wrote:
> After doing
> the same operation on a different host where the firmware was built
> using gcc 4.9.4, the USB key was detected normally as usual.
[...]
> I build the firmware with several version of gcc
> and noticed that firmware built using gcc 5.9.4 was fine when firmwares
> build with gcc 6.4.0 or 7.3.0 produced non functional firmwares.

I think that I once (or twice) had encountered an issue in upgrading
GNU Toolchain.

What's your libc?  Is Gnuk linked correct version?

For me, when it's 6.3.1, I have following entries in
gnuk/src/build/gnuk.map:

==============================
/usr/lib/gcc/arm-none-eabi/6.3.1/thumb/v7-m/libgcc.a(_lshrdi3.o)
                              build/sha512.o (__aeabi_llsr)
/usr/lib/gcc/arm-none-eabi/6.3.1/thumb/v7-m/libgcc.a(_ashldi3.o)
                              build/sha512.o (__aeabi_llsl)
/usr/lib/gcc/arm-none-eabi/6.3.1/../../../arm-none-eabi/lib/thumb/v7-m/libc.a(lib_a-memcmp.o)
                              build/openpgp.o (memcmp)
/usr/lib/gcc/arm-none-eabi/6.3.1/../../../arm-none-eabi/lib/thumb/v7-m/libc.a(lib_a-memcpy.o)
                              build/call-rsa.o (memcpy)
/usr/lib/gcc/arm-none-eabi/6.3.1/../../../arm-none-eabi/lib/thumb/v7-m/libc.a(lib_a-memset.o)
                              build/usb_ctrl.o (memset)
/usr/lib/gcc/arm-none-eabi/6.3.1/../../../arm-none-eabi/lib/thumb/v7-m/libc.a(lib_a-strlen-stub.o)
                              build/bignum.o (strlen)
==============================

The important point is that we need to use V7-M/Thumb implementation of
libc, while there are multiple implementations.  If it's not thumb one,
the first call memset will cause failure, IIRC.

I needed to upgrade newlib together.  It should be handled by the
gcc-arm-none-eabi package with dependency.  It seems that this problem
has been fixed by gcc-arm-none-eabi version 15:7-2018-q2-3 recently.
-- 


From bertrand at jacquin.bzh  Mon Aug 27 03:51:39 2018
From: bertrand at jacquin.bzh (Bertrand Jacquin)
Date: Mon, 27 Aug 2018 02:51:39 +0100
Subject: Gnuk with GCC >= 5
In-Reply-To: <87tvngwq7t.fsf@iwagami.gniibe.org>
References: <20180826010848.GA9207@lady-voodoo.scabb>
 <87tvngwq7t.fsf@iwagami.gniibe.org>
Message-ID: <20180827015139.GA10740@lady-voodoo.scabb>

Hi,

On Mon, Aug 27, 2018 at 10:30:46AM +0900, NIIBE Yutaka wrote:
> Bertrand Jacquin <bertrand at jacquin.bzh> wrote:
> > After doing
> > the same operation on a different host where the firmware was built
> > using gcc 4.9.4, the USB key was detected normally as usual.
> [...]
> > I build the firmware with several version of gcc
> > and noticed that firmware built using gcc 5.9.4 was fine when firmwares
> > build with gcc 6.4.0 or 7.3.0 produced non functional firmwares.
> 
> I think that I once (or twice) had encountered an issue in upgrading
> GNU Toolchain.
> 
> What's your libc?

On the host I am using glibc 2.26, the target libc is newlib 2.2.0. Note
that newlib remains the same when I am using gcc 4.9.4 or gcc 7.3.0

> Is Gnuk linked correct version?
>
> For me, when it's 6.3.1, I have following entries in
> gnuk/src/build/gnuk.map:
> 
> ==============================
> /usr/lib/gcc/arm-none-eabi/6.3.1/thumb/v7-m/libgcc.a(_lshrdi3.o)
>                               build/sha512.o (__aeabi_llsr)
> /usr/lib/gcc/arm-none-eabi/6.3.1/thumb/v7-m/libgcc.a(_ashldi3.o)
>                               build/sha512.o (__aeabi_llsl)
> /usr/lib/gcc/arm-none-eabi/6.3.1/../../../arm-none-eabi/lib/thumb/v7-m/libc.a(lib_a-memcmp.o)
>                               build/openpgp.o (memcmp)
> /usr/lib/gcc/arm-none-eabi/6.3.1/../../../arm-none-eabi/lib/thumb/v7-m/libc.a(lib_a-memcpy.o)
>                               build/call-rsa.o (memcpy)
> /usr/lib/gcc/arm-none-eabi/6.3.1/../../../arm-none-eabi/lib/thumb/v7-m/libc.a(lib_a-memset.o)
>                               build/usb_ctrl.o (memset)
> /usr/lib/gcc/arm-none-eabi/6.3.1/../../../arm-none-eabi/lib/thumb/v7-m/libc.a(lib_a-strlen-stub.o)
>                               build/bignum.o (strlen)
> ==============================

Mine looks like this:

* gcc-4.9.4

/usr/lib/gcc/arm-none-eabi/4.9.4/thumb/libgcc.a(_lshrdi3.o)
                              build/sha512.o (__aeabi_llsr)
/usr/lib/gcc/arm-none-eabi/4.9.4/thumb/libgcc.a(_ashldi3.o)
                              build/sha512.o (__aeabi_llsl)
/usr/lib/gcc/arm-none-eabi/4.9.4/../../../../arm-none-eabi/lib/thumb/libc.a(lib_a-memcmp.o)
                              build/openpgp.o (memcmp)
/usr/lib/gcc/arm-none-eabi/4.9.4/../../../../arm-none-eabi/lib/thumb/libc.a(lib_a-memcpy.o)
                              build/call-rsa.o (memcpy)
/usr/lib/gcc/arm-none-eabi/4.9.4/../../../../arm-none-eabi/lib/thumb/libc.a(lib_a-memset.o)
                              build/usb_ctrl.o (memset)
/usr/lib/gcc/arm-none-eabi/4.9.4/../../../../arm-none-eabi/lib/thumb/libc.a(lib_a-strlen.o)
                              build/bignum.o (strlen)

* gcc-7.3.0

/usr/lib/gcc/arm-none-eabi/7.3.0/../../../../arm-none-eabi/lib/thumb/libc.a(lib_a-memcmp.o)
                              build/openpgp.o (memcmp)
/usr/lib/gcc/arm-none-eabi/7.3.0/../../../../arm-none-eabi/lib/thumb/libc.a(lib_a-memcpy.o)
                              build/call-rsa.o (memcpy)
/usr/lib/gcc/arm-none-eabi/7.3.0/../../../../arm-none-eabi/lib/thumb/libc.a(lib_a-memset.o)
                              build/usb_ctrl.o (memset)
/usr/lib/gcc/arm-none-eabi/7.3.0/../../../../arm-none-eabi/lib/thumb/libc.a(lib_a-strlen.o)
                              build/bignum.o (strlen)
build/chopstx.o: dynamic relocation against `chx_idle' in read-only section `.text.preempt'

> The important point is that we need to use V7-M/Thumb implementation of
> libc, while there are multiple implementations.  If it's not thumb one,
> the first call memset will cause failure, IIRC.
> 
> I needed to upgrade newlib together.  It should be handled by the
> gcc-arm-none-eabi package with dependency.  It seems that this problem
> has been fixed by gcc-arm-none-eabi version 15:7-2018-q2-3 recently.

I am not sure which version of the libc this corresponds to

Cheers

-- 
Bertrand
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 228 bytes
Desc: Digital signature
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20180827/1509e72c/attachment.sig>

From gniibe at fsij.org  Mon Aug 27 08:51:32 2018
From: gniibe at fsij.org (NIIBE Yutaka)
Date: Mon, 27 Aug 2018 15:51:32 +0900
Subject: Gnuk with GCC >= 5
In-Reply-To: <20180827015139.GA10740@lady-voodoo.scabb>
References: <20180826010848.GA9207@lady-voodoo.scabb>
 <87tvngwq7t.fsf@iwagami.gniibe.org>
 <20180827015139.GA10740@lady-voodoo.scabb>
Message-ID: <871saks3nv.fsf@fsij.org>

Hello,

I wonder how you configure your gcc.

Bertrand Jacquin <bertrand at jacquin.bzh> wrote:
> Note that newlib remains the same when I am using gcc 4.9.4 or gcc 7.3.0

I think that newlib for gcc 7 should be configured/compiled by gcc 7. 

> * gcc-7.3.0
[...]
> build/chopstx.o: dynamic relocation against `chx_idle' in read-only section `.text.preempt'

Strange.  Dynamic relocation should never happen.  

> I am not sure which version of the libc this corresponds to

My libc for arm-none-eabi is:

	Package: libnewlib-arm-none-eabi
	Version: 3.0.0.20180802-2

I think that the issue is not the souce version, but which gcc it is built.
-- 


From bertrand at jacquin.bzh  Mon Aug 27 23:21:22 2018
From: bertrand at jacquin.bzh (Bertrand Jacquin)
Date: Mon, 27 Aug 2018 22:21:22 +0100
Subject: Gnuk with GCC >= 5
In-Reply-To: <871saks3nv.fsf@fsij.org>
References: <20180826010848.GA9207@lady-voodoo.scabb>
 <87tvngwq7t.fsf@iwagami.gniibe.org>
 <20180827015139.GA10740@lady-voodoo.scabb>
 <871saks3nv.fsf@fsij.org>
Message-ID: <20180827212122.GB19273@lady-voodoo.scabb>

On Mon, Aug 27, 2018 at 03:51:32PM +0900, NIIBE Yutaka wrote:
> Hello,
> 
> I wonder how you configure your gcc.

I let Gentoo do it for me :) Here is the configure statement:

 * strip-flags: CFLAGS: changed '-march=native -O2 -pipe -fomit-frame-pointer' to '-march=native -O2 -pipe'
 * strip-flags: CXXFLAGS: changed '-march=native -O2 -pipe -fomit-frame-pointer' to '-march=native -O2 -pipe'
 * CFLAGS="-O2 -pipe"
 * CXXFLAGS="-O2 -pipe"
 * LDFLAGS="-Wl,-O1 -Wl,--as-needed"

 * PREFIX:          /usr
 * BINPATH:         /usr/x86_64-pc-linux-gnu/arm-none-eabi/gcc-bin/7.3.0
 * LIBPATH:         /usr/lib/gcc/arm-none-eabi/7.3.0
 * DATAPATH:        /usr/share/gcc-data/arm-none-eabi/7.3.0
 * STDCXX_INCDIR:   /usr/lib/gcc/arm-none-eabi/7.3.0/include/g++-v7

 * Languages:       c,jit

 * Configuring GCC with:
 *      --host=x86_64-pc-linux-gnu
 *      --target=arm-none-eabi
 *      --build=x86_64-pc-linux-gnu
 *      --prefix=/usr
 *      --bindir=/usr/x86_64-pc-linux-gnu/arm-none-eabi/gcc-bin/7.3.0
 *      --includedir=/usr/lib/gcc/arm-none-eabi/7.3.0/include
 *      --datadir=/usr/share/gcc-data/arm-none-eabi/7.3.0
 *      --mandir=/usr/share/gcc-data/arm-none-eabi/7.3.0/man
 *      --infodir=/usr/share/gcc-data/arm-none-eabi/7.3.0/info
 *      --with-gxx-include-dir=/usr/lib/gcc/arm-none-eabi/7.3.0/include/g++-v7
 *      --with-python-dir=/share/gcc-data/arm-none-eabi/7.3.0/python
 *      --enable-languages=c,jit
 *      --enable-obsolete
 *      --enable-secureplt
 *      --disable-werror
 *      --with-system-zlib
 *      --enable-nls
 *      --without-included-gettext
 *      --enable-checking=release
 *      --with-bugurl=https://bugs.gentoo.org/
 *      --with-pkgversion=Gentoo Hardened 7.3.0-r3 p1.4
 *      --enable-esp
 *      --disable-libstdcxx-pch
 *      --enable-host-shared
 *      --enable-poison-system-directories
 *      --disable-libstdcxx-time
 *      --with-sysroot=/usr/arm-none-eabi
 *      --disable-bootstrap
 *      --with-newlib
 *      --enable-multilib
 *      --disable-altivec
 *      --disable-fixed-point
 *      --with-float=soft
 *      --disable-libgomp
 *      --disable-libmudflap
 *      --disable-libssp
 *      --disable-libcilkrts
 *      --disable-libmpx
 *      --enable-vtable-verify
 *      --enable-libvtv
 *      --disable-libquadmath
 *      --enable-lto
 *      --without-isl
 *      --disable-libsanitizer
 *      --enable-default-pie
 *      --enable-default-ssp


/var/tmp/portage/cross-arm-none-eabi/gcc-7.3.0-r3/work/gcc-7.3.0/configure --host=x86_64-pc-linux-gnu --target=arm-none-eabi --build=x86_64-pc-linux-gnu --prefix=/usr --bindir=/usr/x86_64-pc-linux-gnu/arm-none-eabi/gcc-bin/7.3.0 --includedir=/usr/lib/gcc/arm-none-eabi/7.3.0/include --datadir=/usr/share/gcc-data/arm-none-eabi/7.3.0 --mandir=/usr/share/gcc-data/arm-none-eabi/7.3.0/man --infodir=/usr/share/gcc-data/arm-none-eabi/7.3.0/info --with-gxx-include-dir=/usr/lib/gcc/arm-none-eabi/7.3.0/include/g++-v7 --with-python-dir=/share/gcc-data/arm-none-eabi/7.3.0/python --enable-languages=c,jit --enable-obsolete --enable-secureplt --disable-werror --with-system-zlib --enable-nls --without-included-gettext --enable-checking=release --with-bugurl=https://bugs.gentoo.org/ --with-pkgversion=Gentoo Hardened 7.3.0-r3 p1.4 --enable-esp --disable-libstdcxx-pch --enable-host-shared --enable-poison-system-directories --disable-libstdcxx-time --with-sysroot=/usr/arm-none-eabi --disable-bootstrap --with-newlib --enable-multilib --disable-altivec --disable-fixed-point --with-float=soft --disable-libgomp --disable-libmudflap --disable-libssp --disable-libcilkrts --disable-libmpx --enable-vtable-verify --enable-libvtv --disable-libquadmath --enable-lto --without-isl --disable-libsanitizer --enable-default-pie --enable-default-ssp

> Bertrand Jacquin <bertrand at jacquin.bzh> wrote:
> > Note that newlib remains the same when I am using gcc 4.9.4 or gcc 7.3.0
> 
> I think that newlib for gcc 7 should be configured/compiled by gcc 7. 

Yes, this was the case, everytime I rebuilt gcc, I also rebuild newlib.

> > * gcc-7.3.0
> [...]
> > build/chopstx.o: dynamic relocation against `chx_idle' in read-only section `.text.preempt'
> 
> Strange.  Dynamic relocation should never happen.  
> 
> > I am not sure which version of the libc this corresponds to
> 
> My libc for arm-none-eabi is:
> 
> 	Package: libnewlib-arm-none-eabi
> 	Version: 3.0.0.20180802-2
> 
> I think that the issue is not the souce version, but which gcc it is built.

newlib 3.0.0 is not available in gentoo yet unfortunately, even thought
a request for an update was made in https://bugs.gentoo.org/656018

Cheers

-- 
Bertrand
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 228 bytes
Desc: Digital signature
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20180827/aea114fc/attachment.sig>

From gniibe at fsij.org  Tue Aug 28 03:04:03 2018
From: gniibe at fsij.org (NIIBE Yutaka)
Date: Tue, 28 Aug 2018 10:04:03 +0900
Subject: Gnuk with GCC >= 5
In-Reply-To: <20180827212122.GB19273@lady-voodoo.scabb>
References: <20180826010848.GA9207@lady-voodoo.scabb>
 <87tvngwq7t.fsf@iwagami.gniibe.org>
 <20180827015139.GA10740@lady-voodoo.scabb> <871saks3nv.fsf@fsij.org>
 <20180827212122.GB19273@lady-voodoo.scabb>
Message-ID: <87wosbfgjg.fsf@fsij.org>

Hello,

For my own environment, configure options for GCC build is:

    https://salsa.debian.org/debian/gcc-arm-none-eabi/blob/master/debian/rules#L33

I found a problem in your configuration of GCC.

For the target arm-none-eabi, which Gnuk uses, it's free standing
environment, where we have no system calls and no loarder (any kinds
of, not only dynamic linker+loader, but also the initial static
loader).

So, some configure options are irrelevant.

Bertrand Jacquin <bertrand at jacquin.bzh> wrote:
> I let Gentoo do it for me :) Here is the configure statement:
[...]
>  * Configuring GCC with:
>  *      --host=x86_64-pc-linux-gnu
>  *      --target=arm-none-eabi
>  *      --build=x86_64-pc-linux-gnu
>  *      --prefix=/usr
>  *      --bindir=/usr/x86_64-pc-linux-gnu/arm-none-eabi/gcc-bin/7.3.0
>  *      --includedir=/usr/lib/gcc/arm-none-eabi/7.3.0/include
>  *      --datadir=/usr/share/gcc-data/arm-none-eabi/7.3.0
>  *      --mandir=/usr/share/gcc-data/arm-none-eabi/7.3.0/man
>  *      --infodir=/usr/share/gcc-data/arm-none-eabi/7.3.0/info
>  *      --with-gxx-include-dir=/usr/lib/gcc/arm-none-eabi/7.3.0/include/g++-v7
>  *      --with-python-dir=/share/gcc-data/arm-none-eabi/7.3.0/python
>  *      --enable-languages=c,jit
>  *      --enable-obsolete

No problem, so far.

>  *      --enable-secureplt

This is irrelevant for arm-none-eabi.  It doesn't use PLT.  Perhaps,
specifying this option is OK, provided we don't use PLT.

>  *      --disable-werror
>  *      --with-system-zlib
>  *      --enable-nls
>  *      --without-included-gettext
>  *      --enable-checking=release
>  *      --with-bugurl=https://bugs.gentoo.org/
>  *      --with-pkgversion=Gentoo Hardened 7.3.0-r3 p1.4

Those are OK.

>  *      --enable-esp
>  *      --disable-libstdcxx-pch
>  *      --enable-host-shared
>  *      --enable-poison-system-directories

I wonder if those makes sence (and how) for arm-none-eabi.

>  *      --disable-libstdcxx-time
>  *      --with-sysroot=/usr/arm-none-eabi
>  *      --disable-bootstrap
>  *      --with-newlib
>  *      --enable-multilib
>  *      --disable-altivec
>  *      --disable-fixed-point
>  *      --with-float=soft
>  *      --disable-libgomp
>  *      --disable-libmudflap
>  *      --disable-libssp
>  *      --disable-libcilkrts
>  *      --disable-libmpx

No problem.

>  *      --enable-vtable-verify
>  *      --enable-libvtv

I think that it doesn't matter for Gnuk build.

>  *      --disable-libquadmath
>  *      --enable-lto
>  *      --without-isl
>  *      --disable-libsanitizer

No problem.

>  *      --enable-default-pie

This is wrong.  We don't have dynamic linker for arm-none-eabi.  This
might be the cause of your problem.  At least, I'm sure that it will
generate dynamic relocations.

>  *      --enable-default-ssp

How does it make sence for arm-none-eabi?  I don't know.
-- 


From bertrand at jacquin.bzh  Tue Aug 28 22:55:30 2018
From: bertrand at jacquin.bzh (Bertrand Jacquin)
Date: Tue, 28 Aug 2018 21:55:30 +0100
Subject: Gnuk with GCC >= 5
In-Reply-To: <87wosbfgjg.fsf@fsij.org>
References: <20180826010848.GA9207@lady-voodoo.scabb>
 <87tvngwq7t.fsf@iwagami.gniibe.org>
 <20180827015139.GA10740@lady-voodoo.scabb>
 <871saks3nv.fsf@fsij.org>
 <20180827212122.GB19273@lady-voodoo.scabb>
 <87wosbfgjg.fsf@fsij.org>
Message-ID: <20180828205530.GC11909@lady-voodoo.scabb>

Hi,

> >  *      --enable-default-pie
> 
> This is wrong.  We don't have dynamic linker for arm-none-eabi.  This
> might be the cause of your problem.  At least, I'm sure that it will
> generate dynamic relocations.

Indeed, if I build gnuk with -fno-pie, then the map file is correct:

/usr/lib/gcc/arm-none-eabi/7.3.0/thumb/libgcc.a(_lshrdi3.o)
                              build/sha512.o (__aeabi_llsr)
/usr/lib/gcc/arm-none-eabi/7.3.0/thumb/libgcc.a(_ashldi3.o)
                              build/sha512.o (__aeabi_llsl)
/usr/lib/gcc/arm-none-eabi/7.3.0/../../../../arm-none-eabi/lib/thumb/libc.a(lib_a-memcmp.o)
                              build/openpgp.o (memcmp)
/usr/lib/gcc/arm-none-eabi/7.3.0/../../../../arm-none-eabi/lib/thumb/libc.a(lib_a-memcpy.o)
                              build/call-rsa.o (memcpy)
/usr/lib/gcc/arm-none-eabi/7.3.0/../../../../arm-none-eabi/lib/thumb/libc.a(lib_a-memset.o)
                              build/usb_ctrl.o (memset)
/usr/lib/gcc/arm-none-eabi/7.3.0/../../../../arm-none-eabi/lib/thumb/libc.a(lib_a-strlen.o)
                              build/bignum.o (strlen)

Can you please consider applied the attached patch to chopstx?

Cheers

-- 
Bertrand
-------------- next part --------------
A non-text attachment was scrubbed...
Name: 0001-Disable-PIE-by-default.patch
Type: text/x-diff
Size: 752 bytes
Desc: not available
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20180828/a2c7c0be/attachment.patch>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 228 bytes
Desc: Digital signature
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20180828/a2c7c0be/attachment.sig>

From gniibe at fsij.org  Wed Aug 29 01:56:31 2018
From: gniibe at fsij.org (NIIBE Yutaka)
Date: Wed, 29 Aug 2018 08:56:31 +0900
Subject: Gnuk with GCC >= 5
In-Reply-To: <87wosbfgjg.fsf@fsij.org>
References: <20180826010848.GA9207@lady-voodoo.scabb>
 <87tvngwq7t.fsf@iwagami.gniibe.org>
 <20180827015139.GA10740@lady-voodoo.scabb> <871saks3nv.fsf@fsij.org>
 <20180827212122.GB19273@lady-voodoo.scabb> <87wosbfgjg.fsf@fsij.org>
Message-ID: <877ekagi4w.fsf@iwagami.gniibe.org>

NIIBE Yutaka <gniibe at fsij.org> wrote:
> So, some configure options are irrelevant.

And I found another problem (not severe, though).

>>  *      --enable-multilib

It seems that it only enables libs for generic ARM and generic Thumb.

I think that you need to specify multilib-list to fully support
optimization for different sub architectures.

In 7.x, it's:

	--with-multilib-list=rmprofile

where "R M profile" stands for support of ARM-R and ARM-M.
-- 


From gniibe at fsij.org  Wed Aug 29 07:40:30 2018
From: gniibe at fsij.org (NIIBE Yutaka)
Date: Wed, 29 Aug 2018 14:40:30 +0900
Subject: Gnuk with GCC >= 5
In-Reply-To: <20180828205530.GC11909@lady-voodoo.scabb>
References: <20180826010848.GA9207@lady-voodoo.scabb>
 <87tvngwq7t.fsf@iwagami.gniibe.org>
 <20180827015139.GA10740@lady-voodoo.scabb> <871saks3nv.fsf@fsij.org>
 <20180827212122.GB19273@lady-voodoo.scabb> <87wosbfgjg.fsf@fsij.org>
 <20180828205530.GC11909@lady-voodoo.scabb>
Message-ID: <871sahhgs1.fsf@iwagami.gniibe.org>

Bertrand Jacquin <bertrand at jacquin.bzh> wrote:
> If gcc is built using --enable-default-pie, generated binary will
> contain dynamic relocations which is irrelevant for firmware build

Sorry, I think that this is a problem of building arm-none-eabi-gcc, not
a problem of Chopstx or Gnuk.  I don't know any good reason for building
GCC with --enable-default-pie for free standing target.  GCC could even
reject that option, imnsho.

Chopstx is used by GNU/Linux emulation, which may use PIE correctly.
-- 


From bertrand at jacquin.bzh  Thu Aug 30 02:56:57 2018
From: bertrand at jacquin.bzh (Bertrand Jacquin)
Date: Thu, 30 Aug 2018 01:56:57 +0100
Subject: Gnuk with GCC >= 5
In-Reply-To: <871sahhgs1.fsf@iwagami.gniibe.org>
References: <20180826010848.GA9207@lady-voodoo.scabb>
 <87tvngwq7t.fsf@iwagami.gniibe.org>
 <20180827015139.GA10740@lady-voodoo.scabb>
 <871saks3nv.fsf@fsij.org>
 <20180827212122.GB19273@lady-voodoo.scabb>
 <87wosbfgjg.fsf@fsij.org>
 <20180828205530.GC11909@lady-voodoo.scabb>
 <871sahhgs1.fsf@iwagami.gniibe.org>
Message-ID: <20180830005657.GB25700@lady-voodoo.scabb>

On Wed, Aug 29, 2018 at 02:40:30PM +0900, NIIBE Yutaka wrote:
> Bertrand Jacquin <bertrand at jacquin.bzh> wrote:
> > If gcc is built using --enable-default-pie, generated binary will
> > contain dynamic relocations which is irrelevant for firmware build
> 
> Sorry, I think that this is a problem of building arm-none-eabi-gcc, not
> a problem of Chopstx or Gnuk.  I don't know any good reason for building
> GCC with --enable-default-pie for free standing target.  GCC could even
> reject that option, imnsho.
> 
> Chopstx is used by GNU/Linux emulation, which may use PIE correctly.

Would it make to enforce the use of no-pie if the target is not
GNU/Linux emulation as it's done for other options in the configure
file since all target but GNU/Linux are bare metal. This issue may
affect other distributions or users building their own toolchain. When
experienced, it really feels like the smartcard was bricked and since
it's not a problem that easy to troubleshoot, it potentially lead to
some extra complaints from gnuk users.

-- 
Bertrand
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 228 bytes
Desc: Digital signature
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20180830/a0771898/attachment.sig>

From andrius at stikonas.eu  Mon Sep 17 21:51:43 2018
From: andrius at stikonas.eu (Andrius =?utf-8?B?xaB0aWtvbmFz?=)
Date: Mon, 17 Sep 2018 20:51:43 +0100
Subject: Gnuk upgrade
Message-ID: <23650482.qWgXiaynXq@laptop>

Hi,

I was trying to upgrade firmware of my gnuk token. One of the steps in
the upgrade guide is registering a public rsa2048 key with the token.

However, when I run that command, I get the following error

$ ./gnuk_put_binary_libusb.py -k 0 1A092810.bin
Device:
Configuration: 1
Interface: 0
Traceback (most recent call last):
  File "./gnuk_put_binary_libusb.py", line 111, in <module>
    main(fileid, is_update, data, passwd)
  File "./gnuk_put_binary_libusb.py", line 54, in main
    gnuk.cmd_write_binary(fileid, data, is_update)
  File "/home/andrius/repositories/gnuk/tool/gnuk_token.py", line 294, in cmd_write_binary
    raise ValueError("cmd_write_binary 1", "%02x%02x" % (sw[0], sw[1]))
ValueError: ('cmd_write_binary 1', '6581')

Does anybody know what I am doing wrong? Neither scdaemon nor pcscd is running.

Kind regards,
Andrius




From andrius at stikonas.eu  Mon Sep 17 21:53:57 2018
From: andrius at stikonas.eu (Andrius =?utf-8?B?xaB0aWtvbmFz?=)
Date: Mon, 17 Sep 2018 20:53:57 +0100
Subject: Gnuk upgrade
Message-ID: <2821614.UvFaA66Q3p@laptop>

Hi,

I was trying to upgrade firmware of my gnuk token. One of the steps in
the upgrade guide is registering a public rsa2048 key with the token.

However, when I run that command, I get the following error

$ ./gnuk_put_binary_libusb.py -k 0 1A092810.bin
Device:
Configuration: 1
Interface: 0
Traceback (most recent call last):
  File "./gnuk_put_binary_libusb.py", line 111, in <module>
    main(fileid, is_update, data, passwd)
  File "./gnuk_put_binary_libusb.py", line 54, in main
    gnuk.cmd_write_binary(fileid, data, is_update)
  File "/home/andrius/repositories/gnuk/tool/gnuk_token.py", line 294, in cmd_write_binary
    raise ValueError("cmd_write_binary 1", "%02x%02x" % (sw[0], sw[1]))
ValueError: ('cmd_write_binary 1', '6581')

Does anybody know what I am doing wrong? Neither scdaemon nor pcscd is running.

Kind regards,
Andrius




From szczepan at nitrokey.com  Tue Sep 18 10:13:42 2018
From: szczepan at nitrokey.com (Szczepan Zalega | Nitrokey)
Date: Tue, 18 Sep 2018 10:13:42 +0200
Subject: Gnuk upgrade
In-Reply-To: <23650482.qWgXiaynXq@laptop>
References: <23650482.qWgXiaynXq@laptop>
Message-ID: <5958382a-fc6e-75de-e92b-74d348c85617@nitrokey.com>

On 09/17/2018 09:51 PM, Andrius ?tikonas via Gnuk-users wrote:
> I was trying to upgrade firmware of my gnuk token. One of the steps in
> the upgrade guide is registering a public rsa2048 key with the token.
> 
> However, when I run that command, I get the following error
> 
> Does anybody know what I am doing wrong? Neither scdaemon nor pcscd is running.

Hi!

Log indicates update script has connected, but device returned error
6581. What GNUK version are you using currently?

Have you tried `upgrade_by_passwd.py` [1], as in:

./upgrade_by_passwd.py regnual.bin gnuk.bin


[1] Nitrokey Start upgrade help page, which is based on GNUK:
https://github.com/Nitrokey/nitrokey-start-firmware/tree/gnuk1.2-regnual-fix/prebuilt#upgrading-the-device

-- 
Best regards,
Szczepan




From andrius at stikonas.eu  Tue Sep 18 12:10:17 2018
From: andrius at stikonas.eu (Andrius =?utf-8?B?xaB0aWtvbmFz?=)
Date: Tue, 18 Sep 2018 11:10:17 +0100
Subject: Gnuk upgrade
In-Reply-To: <5958382a-fc6e-75de-e92b-74d348c85617@nitrokey.com>
References: <23650482.qWgXiaynXq@laptop>
 <5958382a-fc6e-75de-e92b-74d348c85617@nitrokey.com>
Message-ID: <1592457.QghCg7EaO4@laptop>

Hi,

I am currently using the latest git version (1.2.10). Initially device had neug and neug->gnuk flashed just fine.
I wanted to recompile it with factory reset support. Other than that device works fine for me.

I tried upgrade_by_passwd too but it didn't work. This was actually the first thing
I tried... Well, my gnuk firmware wasn't factory firmware.

And sorry for the duplicate first email.

Andrius

2018 m. rugs?jo 18 d., antradienis 09:13:42 BST Szczepan Zalega | Nitrokey ra??:
> On 09/17/2018 09:51 PM, Andrius ?tikonas via Gnuk-users wrote:
> > I was trying to upgrade firmware of my gnuk token. One of the steps in
> > the upgrade guide is registering a public rsa2048 key with the token.
> > 
> > However, when I run that command, I get the following error
> > 
> > Does anybody know what I am doing wrong? Neither scdaemon nor pcscd is running.
> 
> Hi!
> 
> Log indicates update script has connected, but device returned error
> 6581. What GNUK version are you using currently?
> 
> Have you tried `upgrade_by_passwd.py` [1], as in:
> 
> ./upgrade_by_passwd.py regnual.bin gnuk.bin
> 
> 
> [1] Nitrokey Start upgrade help page, which is based on GNUK:
> https://github.com/Nitrokey/nitrokey-start-firmware/tree/gnuk1.2-regnual-fix/prebuilt#upgrading-the-device
> 
> 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 228 bytes
Desc: This is a digitally signed message part.
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20180918/3342790f/attachment.sig>

From gniibe at fsij.org  Wed Sep 19 01:44:16 2018
From: gniibe at fsij.org (NIIBE Yutaka)
Date: Wed, 19 Sep 2018 08:44:16 +0900
Subject: Gnuk upgrade
In-Reply-To: <1592457.QghCg7EaO4@laptop>
References: <23650482.qWgXiaynXq@laptop>
 <5958382a-fc6e-75de-e92b-74d348c85617@nitrokey.com>
 <1592457.QghCg7EaO4@laptop>
Message-ID: <871s9qe5gv.fsf@iwagami.gniibe.org>

Andrius ?tikonas via Gnuk-users <gnuk-users at gnupg.org> wrote:
> I tried upgrade_by_passwd too but it didn't work. This was actually
> the first thing I tried... Well, my gnuk firmware wasn't factory
> firmware.

My theory is like this:

(1) Your first try by upgrade_by_passwd.py failed by some other reason.

(2) Your second try by gnuk_put_binary_libusb.py failed because you
    repeat writing to the slot 0.  The slot 0 for public key was written
    by the process of (1) already.  In this situation, writing to the
    slot again results GPG_MEMORY_FAILURE (the error code of 0x6581),
    because the place can be only written once.

Please do not use lower level tool like gnuk_put_binary_libusb.py,
unless you don't know the detail.  Please use upgrade_by_passwd.py
instead.

I suggest to identify the original issue, if you have a record of your
trial.  If not, please try upgrade_by_passwd.py with the option '-k' to
specify another slot 1, you must record all the session, this time.
Then, please examine your problem in the record and fix your issue(s) at
first.  After you will fix your issue, you can try upgrade_by_passwd.py
with the option '-k' specifying slot 2, again.

Please note that there are only four slots (0, 1, 2, and 3) available
and all are write-once.  You can only fail one more time.
-- 


From andrius at stikonas.eu  Wed Sep 19 10:52:16 2018
From: andrius at stikonas.eu (Andrius =?utf-8?B?xaB0aWtvbmFz?=)
Date: Wed, 19 Sep 2018 09:52:16 +0100
Subject: Gnuk upgrade
In-Reply-To: <871s9qe5gv.fsf@iwagami.gniibe.org>
References: <23650482.qWgXiaynXq@laptop>
 <5958382a-fc6e-75de-e92b-74d348c85617@nitrokey.com>
 <1592457.QghCg7EaO4@laptop> <871s9qe5gv.fsf@iwagami.gniibe.org>
Message-ID: <20180919085212.GA8224@astikonas-opti7050.uk.solarflarecom.com>

I am getting the error
$ ./upgrade_by_passwd.py -k 1 ../regnual/regnual.bin ../src/build/gnuk.bin
Admin password:
CRC32: ef11fc23

Traceback (most recent call last):
  File "./upgrade_by_passwd.py", line 157, in <module>
    main(wait_e, keyno, passwd, data_regnual, data_upgrade[4096:])
  File "./upgrade_by_passwd.py", line 51, in main
    gnuk = get_gnuk_device()
  File "/run/media/astikonas/home2/gnuk/tool/gnuk_token.py", line 620, in get_gnuk_device
    raise ValueError("No ICC present")
ValueError: No ICC present


On Wed, Sep 19, 2018 at 08:44:16AM +0900, NIIBE Yutaka wrote:
> Andrius ?tikonas via Gnuk-users <gnuk-users at gnupg.org> wrote:
> > I tried upgrade_by_passwd too but it didn't work. This was actually
> > the first thing I tried... Well, my gnuk firmware wasn't factory
> > firmware.
> 
> My theory is like this:
> 
> (1) Your first try by upgrade_by_passwd.py failed by some other reason.
> 
> (2) Your second try by gnuk_put_binary_libusb.py failed because you
>     repeat writing to the slot 0.  The slot 0 for public key was written
>     by the process of (1) already.  In this situation, writing to the
>     slot again results GPG_MEMORY_FAILURE (the error code of 0x6581),
>     because the place can be only written once.
> 
> Please do not use lower level tool like gnuk_put_binary_libusb.py,
> unless you don't know the detail.  Please use upgrade_by_passwd.py
> instead.
> 
> I suggest to identify the original issue, if you have a record of your
> trial.  If not, please try upgrade_by_passwd.py with the option '-k' to
> specify another slot 1, you must record all the session, this time.
> Then, please examine your problem in the record and fix your issue(s) at
> first.  After you will fix your issue, you can try upgrade_by_passwd.py
> with the option '-k' specifying slot 2, again.
> 
> Please note that there are only four slots (0, 1, 2, and 3) available
> and all are write-once.  You can only fail one more time.
> -- 
> 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 228 bytes
Desc: not available
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20180919/7239d02e/attachment.sig>

From szczepan at nitrokey.com  Wed Sep 19 11:18:04 2018
From: szczepan at nitrokey.com (Szczepan Zalega | Nitrokey)
Date: Wed, 19 Sep 2018 11:18:04 +0200
Subject: Gnuk upgrade
In-Reply-To: <20180919085212.GA8224@astikonas-opti7050.uk.solarflarecom.com>
References: <23650482.qWgXiaynXq@laptop>
 <5958382a-fc6e-75de-e92b-74d348c85617@nitrokey.com>
 <1592457.QghCg7EaO4@laptop> <871s9qe5gv.fsf@iwagami.gniibe.org>
 <20180919085212.GA8224@astikonas-opti7050.uk.solarflarecom.com>
Message-ID: <1f24eefe-b153-6d2b-a902-6ea4397b5738@nitrokey.com>

On 09/19/2018 10:52 AM, Andrius ?tikonas via Gnuk-users wrote:
> Traceback (most recent call last):
>   File "./upgrade_by_passwd.py", line 157, in <module>
>     main(wait_e, keyno, passwd, data_regnual, data_upgrade[4096:])
>   File "./upgrade_by_passwd.py", line 51, in main
>     gnuk = get_gnuk_device()
>   File "/run/media/astikonas/home2/gnuk/tool/gnuk_token.py", line 620, in get_gnuk_device
>     raise ValueError("No ICC present")
> ValueError: No ICC present

This one is caused by communication issues - pcscd and/or scdeamon are
keeping the device exclusively.

-- 
Best regards,
Szczepan


From utzig at apache.org  Fri Sep 21 15:10:04 2018
From: utzig at apache.org (Fabio Utzig)
Date: Fri, 21 Sep 2018 10:10:04 -0300
Subject: [PATCH] Fix typo in scdaemon reload command doc
Message-ID: <20180921131004.30165-1-utzig@apache.org>

Signed-off-by: Fabio Utzig <utzig at apache.org>
---
 doc/stop-scdaemon.rst | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/doc/stop-scdaemon.rst b/doc/stop-scdaemon.rst
index fdd52a0..1905e03 100644
--- a/doc/stop-scdaemon.rst
+++ b/doc/stop-scdaemon.rst
@@ -30,9 +30,9 @@ command.
 
 Or, you can use ``gpgconf`` command.  Type::
 
-	$ gpgconf --reload scdameon
+	$ gpgconf --reload scdaemon
 
-will do the samething.
+will do the same thing.
 
 
 Let GPG-AGENT/SCDAEMON learn
-- 
2.19.0



From gniibe at fsij.org  Tue Oct  2 06:48:38 2018
From: gniibe at fsij.org (NIIBE Yutaka)
Date: Tue, 02 Oct 2018 13:48:38 +0900
Subject: [PATCH] Fix typo in scdaemon reload command doc
In-Reply-To: <20180921131004.30165-1-utzig@apache.org>
References: <20180921131004.30165-1-utzig@apache.org>
Message-ID: <87lg7h9cnt.fsf@iwagami.gniibe.org>

Fabio Utzig <utzig at apache.org> wrote:
>  doc/stop-scdaemon.rst | 4 ++--
>  1 file changed, 2 insertions(+), 2 deletions(-)

Thanks, applied.


BTW, I ordered another revision of FST-01SZ prototype, to Fusion PCBA
service, in September.

Now, I am testing previous revision of FST-01SZ prototype.  It has a
hall effect sensor.  It's MCU is GD32F103TBU6.

Here are photos:

	https://identi.ca/gniibe/image/8bsG_zEmStCGRONepwAk9g

	https://identi.ca/gniibe/image/HJ8m0jJnTVODZDdL1P7wCQ

ZL-271 is a part for USB in China, this design is de facto standard in
China.  Well, it doesn't have holes in bottom side.  I think it doesn't
conform USB standard, mechanically.

	ZL-271:
	https://detail.1688.com/offer/566197153418.html
-- 


From gniibe at fsij.org  Wed Oct  3 02:46:02 2018
From: gniibe at fsij.org (NIIBE Yutaka)
Date: Wed, 03 Oct 2018 09:46:02 +0900
Subject: Chopstx 1.11
Message-ID: <87bm8b3lit.fsf@iwagami.gniibe.org>

Hello,

Chopstx version 1.11 is released.  Actually, version 1.10 was released
with no announcement, then, I found a problem, which was fixed in 1.11.

Interrupt handling is changed to require call of new function
chopstx_intr_done.  This change allows flexible use of chopstx_poll;
Now, it's OK to call chopstx_poll again even when some of interrupts are
ready to be handled.  (And I found that we had spurious interrupts in
older versions, which doesn't occur any more with chopstx_intr_done).

I'm testing acknowledge button with FST-01SZ prototype.

============================  Code example
    static chopstx_intr_t intr0;
    static chopstx_intr_t intr1;

    static struct chx_poll_head *const poll_ptrs[] = {
      (struct chx_poll_head *const)&intr0,
      (struct chx_poll_head *const)&intr1,
    };

    main ()
    {
      uint32_t timer;

      hardware_init0 ();
      chopstx_claim_irq (&intr0, INTR_REQ_SOMETHING0);
      hardware_init1 ();
      chopstx_claim_irq (&intr1, INTR_REQ_SOMETHING1);

      while (1)
        {
          timer = 5000; /* 5msec, for example */

          chopstx_poll (&timer, 2, poll_ptrs);
    #if 0 /*older versions */
          /* In older versions of Chopstx,
           * all events should be handled,
           * after return of chopstx_poll and
           * before next call of chopstx_poll
           */

          if (intr0.ready)
            {
              interrupt_handler0 ();
              /* We didn't have chopstx_intr_done */
            }

          if (intr1.ready)
            {
              interrupt_handler1 ();
              /* We didn't have chopstx_intr_done */
            }

          if (intr0.ready == 0 && intr1.ready == 0)
            {
              /* timeout handling */
            }
    #else
          if (intr0.ready)
            {
              interrupt_handler0 ();
              chopstx_intr_done (&intr0);
              /* Now, it's possible not to allocate any clocks for
                 handling intr1 when intr0 is busy */
            }
          else if (intr1.ready)
            {
              interrupt_handler1 ();
              chopstx_intr_done (&intr1);
            }
          else
            {
              /* timeout handling */
            }
    #endif
        }
    }
============================

============================
Chopstx version 1.11 is released.

    tag release/1.11
    Tagger: NIIBE Yutaka <gniibe at fsij.org>
    Date:   Tue Oct 2 09:59:09 2018 +0900

    commit fffb8aa3b3731fb242d9b99f7d935d85425c1404

Chopstx is a simple RT thread library.  Major change sice version 1.9 is
interrupt handling and experiment with FST-01SZ prototype.  We have USB
bug fix for ZLP, too.
-- 


From simon at josefsson.org  Wed Oct  3 19:18:21 2018
From: simon at josefsson.org (Simon Josefsson)
Date: Wed, 03 Oct 2018 19:18:21 +0200
Subject: [PATCH] Fix typo in scdaemon reload command doc
In-Reply-To: <87lg7h9cnt.fsf@iwagami.gniibe.org> (NIIBE Yutaka's message of
 "Tue, 02 Oct 2018 13:48:38 +0900")
References: <20180921131004.30165-1-utzig@apache.org>
 <87lg7h9cnt.fsf@iwagami.gniibe.org>
Message-ID: <871s97j6ea.fsf@latte.josefsson.org>

NIIBE Yutaka <gniibe at fsij.org> writes:

> Now, I am testing previous revision of FST-01SZ prototype.  It has a
> hall effect sensor.  It's MCU is GD32F103TBU6.
>
> Here are photos:
>
> 	https://identi.ca/gniibe/image/8bsG_zEmStCGRONepwAk9g
>
> 	https://identi.ca/gniibe/image/HJ8m0jJnTVODZDdL1P7wCQ
>
> ZL-271 is a part for USB in China, this design is de facto standard in
> China.  Well, it doesn't have holes in bottom side.  I think it doesn't
> conform USB standard, mechanically.
>
> 	ZL-271:
> 	https://detail.1688.com/offer/566197153418.html

Hi.  In evaluating how to migrate from my current YubiKey nano, I
acquired some FST-01G's to experiment. I soon realized that I want the
device semi-permanently inserted in my machine, and the FST-01G is
simply too large (risk of breaking the circuit board if I carry my
laptop and hit something) and the above devices have the same problem.

What do you think of the Tomu hardware?

https://tomu.im/

It is open source hardware, has a libre bootloader, but GNUK is not (?)
ported to it.  It is a small device, so it will require removing some
GNUK features to fit, but seems feasible.  It can fit in my USB port all
the time, like the YubiKey nano.

Is there any freedom/privacy/security advantage with the FST-01G
compared to Tomu?

/Simon
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 487 bytes
Desc: not available
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20181003/49eccc44/attachment.sig>

From gniibe at fsij.org  Fri Oct 12 03:13:05 2018
From: gniibe at fsij.org (NIIBE Yutaka)
Date: Fri, 12 Oct 2018 10:13:05 +0900
Subject: [PATCH] Fix typo in scdaemon reload command doc
In-Reply-To: <871s97j6ea.fsf@latte.josefsson.org>
References: <20180921131004.30165-1-utzig@apache.org>
 <87lg7h9cnt.fsf@iwagami.gniibe.org> <871s97j6ea.fsf@latte.josefsson.org>
Message-ID: <87in28rmqm.fsf@iwagami.gniibe.org>

Simon Josefsson <simon at josefsson.org> writes:
> Is there any freedom/privacy/security advantage with the FST-01G
> compared to Tomu?

Well, I don't deny Tomu in a way of comparison, in public.

Instead, let me explain my points.

In my own opinion, a token should be easy to be removed off from host
computer.

The smaller the token is, the better... but not that smaller, when we
assume bringing it independently.

The background of FST-01SZ (to be smaller) is that there can be an
attack to USB-A connector, which is considered somehow practical now.
Adversary can put malicious chip to enable MiTM attack inside USB-A
connector.  <--- using a technology which enables Tomu!


One of Gnuk Token users uses magnetic USB, so that his token can be
easily removed off.  This idea can be extended to make better token
hardware, if we can assume a use case where a user permanently puts
adopter on host computer(s), and only bringing smaller token.  But...
this might make distribution more difficult, since magnet is not allowed
in a usual parcel, I'm afraid.

And... if the adopter is permanently on host computer, it is difficult
for a user when it is attacked (replaced by malicous MiTM version).


Another point:
When you permanently put your private key on your host computer, TPM
module would be your choice, if there were free implementation.
Unfortunately, I don't know such an implementation, but reverse
engineering against proprietary implementation would be possible.
-- 


From akktor at net-c.ca  Sun Nov 11 17:22:13 2018
From: akktor at net-c.ca (akktor)
Date: Sun, 11 Nov 2018 11:22:13 -0500
Subject: Usage of usb gnuk token
Message-ID: <6ed9db92-f3e0-894d-5c68-4597f5a928eb@net-c.ca>

Hi. I have ubuntu 18.04. I have fst-01. I want to use it with login and
sudo command.

What should I do?

Regardss


-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 833 bytes
Desc: OpenPGP digital signature
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20181111/3c638da1/attachment.sig>

From gniibe at fsij.org  Mon Nov 12 07:27:15 2018
From: gniibe at fsij.org (NIIBE Yutaka)
Date: Mon, 12 Nov 2018 15:27:15 +0900
Subject: Usage of usb gnuk token
In-Reply-To: <6ed9db92-f3e0-894d-5c68-4597f5a928eb@net-c.ca>
References: <6ed9db92-f3e0-894d-5c68-4597f5a928eb@net-c.ca>
Message-ID: <878t1ybykc.fsf@fsij.org>

akktor <akktor at net-c.ca> wrote:
> Hi. I have ubuntu 18.04. I have fst-01. I want to use it with login and
> sudo command.
>
> What should I do?

I maintain Poldi in Debian, which offers PAM module with OpenPGP card /
Gnuk Token.  Attached is my patch to configure lightdm for Poldi, for
your reference.  No, I don't use that other than testing Poldi.  It's
for your reference only.  I use etc-keeper for files under /etc, and the
patch is to show what kinds of files you need to provide.  It's for my
key and my login.  You need to change login name and key informtion.
For detail, please read Poldi documentation.

After just putting "RETURN" for the prompt of lightdm, you enter PIN for
your token and then, you can login by token's singing data and
computer's verification of the signature.  Here, PIN input is required,
because it's OpenPGP card.


Please note that Poldi is expelimental software, which is not well
designed and implemented, in my opinion.

I think that the use case of Gnuk Token for OpenPGP signing/decryption
is quite different to the use case for local machine login / sudo using
cryptographic key.

And... from the viewpoint of device access by OS to an application, the
use case for login and the use case of sudo is also different.

In my opinion, while I'd somehow understand the demand to use a single
"security device" for all such usages, it's not good idea to mix things.

-- 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: etc-changes-poldi-lightdm.patch
Type: text/x-diff
Size: 2110 bytes
Desc: etc-changes-poldi-lightdm.patch
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20181112/59725092/attachment.patch>

From gniibe at fsij.org  Mon Nov 19 03:24:03 2018
From: gniibe at fsij.org (NIIBE Yutaka)
Date: Mon, 19 Nov 2018 11:24:03 +0900
Subject: Chopstx 1.12
Message-ID: <87o9al954s.fsf@iwagami.gniibe.org>

Hello,

Chopstx 1.12 is released.

	tag release/1.12
	Tagger: NIIBE Yutaka <gniibe at fsij.org>
	Date:   Mon Nov 12 15:29:05 2018 +0900
	commit 39683dbc5f66e92457f031bdf303c8226e75d55e


Now, I am testing acknowledge button with FST-01SZ prototype.
Version 1.10, 1.11, and 1.12 are basically for FST-01SZ.

Actually, I released Gnuk 1.2.11 for FST-01SZ prototype.  Then, on
Friday, I received the result of fusion PCBA service.  I realized that
the 96-bit unique ID nature of GD32F103 is a bit different.  I need to
change how unique ID is used (if not, all serial numbers among different
boards are same).

My plan is another release of Gnuk and NeuG this month, with unique ID
change.

While testing FST-01SZ prototype, I feel it is convenient not using the
acknowledge button for SSH.  For me, it seems better to use gpg-agent's
"confirmation" pop-up dialog feature for SSH, instead, because I don't
need to leave my hand from keyboard for pop-up dialog confirmation (TAB
and RET).

I'm not sure, if I (for myself) will use the acknowledge button feature
for signing and decryption.
-- 


From amos at propellered.com  Mon Nov 19 18:32:38 2018
From: amos at propellered.com (Amos Sam)
Date: Mon, 19 Nov 2018 18:32:38 +0100
Subject: Exporting private key
Message-ID: <4fa9a858-060f-5d8c-1477-b54d98b6d66f@propellered.com>

Hello there

New user here...

I have ST-Link v2 as primary gnuk device, and blue pill for backup.
I was wondering is it possible to export private key from gnuk?
So, if I loose primary stick, to export private key from backup
device and recreate new stick.
I hope that my question has sense...

gniibe: Will FST-01SZ design be opensource? And if yes,
where it will be? I would like to have physically smaller device
to carry around, and button for confirming operations is something
I got used to (before I was using yubikey)

Thanks for any help,
Amos Sam

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 228 bytes
Desc: OpenPGP digital signature
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20181119/5b1a4670/attachment.sig>

From amos at propellered.com  Mon Nov 19 21:06:31 2018
From: amos at propellered.com (Amos Sam)
Date: Mon, 19 Nov 2018 21:06:31 +0100
Subject: Exporting private key
In-Reply-To: <CACi+kjrcjHa3WCi6_FcJcfHF8HwZmygaze8OHOnF8KTRs4ic7Q@mail.gmail.com>
References: <4fa9a858-060f-5d8c-1477-b54d98b6d66f@propellered.com>
 <CACi+kjrcjHa3WCi6_FcJcfHF8HwZmygaze8OHOnF8KTRs4ic7Q@mail.gmail.com>
Message-ID: <8d883d6e-ba50-529c-23b4-e1ce81311884@propellered.com>

Thanks for reply!

On 11/19/18 8:34 PM, Mike Tsao wrote:
> If you generated the key externally (e.g., with GnuPG) and still have
> the encrypted private key + passphrase on your host PC, then you can
> import it to as many OpenPGP hardware keys, such as gnuk or Yubikey, as
> you wish. But if the gnuk device generated the key internally, and you
> didn't say yes to the "Make off-card backup of encryption key?" question
> when creating it, then by design it cannot be exported.
Well, currently it was generated externally, and I have copy of private
key (encrypted) on USB drive...

> 
> For signing/authenticating/certifying operations, backing up the private
> key isn't essential. You signed a document at a specific moment in time,
> and after that moment in time, the only important operation is to verify
> the document's signature, which requires only the public key, which
> presumably won't ever be lost because it's widely distributed. It is
> inconvenient to lose the only copy of the private key because you'll
> have to generate and distribute a replacement public key, but there is
> no data loss in the sense of no longer being able to do something.
This part is not a problem, I agree...

> For encryption, though, the answer is different. Backing up the private
> key is important. Someone (maybe you) could encrypt data for you using
> your public key, and if you've lost the only copy of the private key,
> then you won't ever be able to decrypt that data.
But, this one and ssh one is a problem. Specially because I use it as
only option for logging over ssh...

> Thus, if your gnuk is only an authentication token (e.g., the thing you
> use to ssh into a server), then some people are of the opinion that it's
> better to generate on-device, decline the backup option, and enjoy peace
> of mind that it's impossible for the private key to be copied because it
> exists in only one place and can't be extracted without physical access
> and special knowledge. If you lose that token, update the servers that
> recognize it to delete the public key from authorized_keys, and replace
> it with a new token/key. (Of course, we're assuming you had some other
> way to update the server besides the token you lost.) But if you use
> your gnuk for encryption, then most people would agree you should
> generate the private key on the host PC, back it up well, and then
> import it to the gnuk(s).
I'm doing it like that...

So, either have backup on mass storage media (or real hard copy) of
private key, or use backup key to login to server/decrypt data and
generate new key and redo all operations with new one...

> 
> But again, if you generated the key on the gnuk and didn't make a
> backup, that's the end of the story. (There are supposed to be ways to
> get around this, such
> as?https://lists.gnupg.org/pipermail/gnuk-users/2018-June/000051.html.)
Yea, i saw that, and it's intriguing, but I was aiming for something
that is accessible to mere mortals... :-D

> 
> On Mon, Nov 19, 2018 at 11:10 AM Amos Sam via Gnuk-users
> <gnuk-users at gnupg.org <mailto:gnuk-users at gnupg.org>> wrote:
> 
>     Hello there
> 
>     New user here...
> 
>     I have ST-Link v2 as primary gnuk device, and blue pill for backup.
>     I was wondering is it possible to export private key from gnuk?
>     So, if I loose primary stick, to export private key from backup
>     device and recreate new stick.
>     I hope that my question has sense...
> 
>     gniibe: Will FST-01SZ design be opensource? And if yes,
>     where it will be? I would like to have physically smaller device
>     to carry around, and button for confirming operations is something
>     I got used to (before I was using yubikey)
> 
>     Thanks for any help,
>     Amos Sam
> 
>     _______________________________________________
>     Gnuk-users mailing list
>     Gnuk-users at gnupg.org <mailto:Gnuk-users at gnupg.org>
>     https://lists.gnupg.org/mailman/listinfo/gnuk-users
> 

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 228 bytes
Desc: OpenPGP digital signature
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20181119/1392077f/attachment.sig>

From mike at sowbug.com  Mon Nov 19 22:02:41 2018
From: mike at sowbug.com (Mike Tsao)
Date: Mon, 19 Nov 2018 13:02:41 -0800
Subject: Exporting private key
In-Reply-To: <8d883d6e-ba50-529c-23b4-e1ce81311884@propellered.com>
References: <4fa9a858-060f-5d8c-1477-b54d98b6d66f@propellered.com>
 <CACi+kjrcjHa3WCi6_FcJcfHF8HwZmygaze8OHOnF8KTRs4ic7Q@mail.gmail.com>
 <8d883d6e-ba50-529c-23b4-e1ce81311884@propellered.com>
Message-ID: <CACi+kjr=DKNHYYq3P1GK6FYz=q+zX4XFjZkc+QyBJqvubBz0pA@mail.gmail.com>

The only purpose of a hardware key like gnuk is to stop mere mortals from
copying a usable private key. Otherwise it's no better than an unencrypted
private key on an ordinary USB drive.

Fortunately, because you have a backup of your private key, you already
have all you need to make a backup hardware key.

On Mon, Nov 19, 2018 at 12:06 PM Amos Sam <amos at propellered.com> wrote:

> Thanks for reply!
>
> On 11/19/18 8:34 PM, Mike Tsao wrote:
> > If you generated the key externally (e.g., with GnuPG) and still have
> > the encrypted private key + passphrase on your host PC, then you can
> > import it to as many OpenPGP hardware keys, such as gnuk or Yubikey, as
> > you wish. But if the gnuk device generated the key internally, and you
> > didn't say yes to the "Make off-card backup of encryption key?" question
> > when creating it, then by design it cannot be exported.
> Well, currently it was generated externally, and I have copy of private
> key (encrypted) on USB drive...
>
> >
> > For signing/authenticating/certifying operations, backing up the private
> > key isn't essential. You signed a document at a specific moment in time,
> > and after that moment in time, the only important operation is to verify
> > the document's signature, which requires only the public key, which
> > presumably won't ever be lost because it's widely distributed. It is
> > inconvenient to lose the only copy of the private key because you'll
> > have to generate and distribute a replacement public key, but there is
> > no data loss in the sense of no longer being able to do something.
> This part is not a problem, I agree...
>
> > For encryption, though, the answer is different. Backing up the private
> > key is important. Someone (maybe you) could encrypt data for you using
> > your public key, and if you've lost the only copy of the private key,
> > then you won't ever be able to decrypt that data.
> But, this one and ssh one is a problem. Specially because I use it as
> only option for logging over ssh...
>
> > Thus, if your gnuk is only an authentication token (e.g., the thing you
> > use to ssh into a server), then some people are of the opinion that it's
> > better to generate on-device, decline the backup option, and enjoy peace
> > of mind that it's impossible for the private key to be copied because it
> > exists in only one place and can't be extracted without physical access
> > and special knowledge. If you lose that token, update the servers that
> > recognize it to delete the public key from authorized_keys, and replace
> > it with a new token/key. (Of course, we're assuming you had some other
> > way to update the server besides the token you lost.) But if you use
> > your gnuk for encryption, then most people would agree you should
> > generate the private key on the host PC, back it up well, and then
> > import it to the gnuk(s).
> I'm doing it like that...
>
> So, either have backup on mass storage media (or real hard copy) of
> private key, or use backup key to login to server/decrypt data and
> generate new key and redo all operations with new one...
>
> >
> > But again, if you generated the key on the gnuk and didn't make a
> > backup, that's the end of the story. (There are supposed to be ways to
> > get around this, such
> > as https://lists.gnupg.org/pipermail/gnuk-users/2018-June/000051.html.)
> Yea, i saw that, and it's intriguing, but I was aiming for something
> that is accessible to mere mortals... :-D
>
> >
> > On Mon, Nov 19, 2018 at 11:10 AM Amos Sam via Gnuk-users
> > <gnuk-users at gnupg.org <mailto:gnuk-users at gnupg.org>> wrote:
> >
> >     Hello there
> >
> >     New user here...
> >
> >     I have ST-Link v2 as primary gnuk device, and blue pill for backup.
> >     I was wondering is it possible to export private key from gnuk?
> >     So, if I loose primary stick, to export private key from backup
> >     device and recreate new stick.
> >     I hope that my question has sense...
> >
> >     gniibe: Will FST-01SZ design be opensource? And if yes,
> >     where it will be? I would like to have physically smaller device
> >     to carry around, and button for confirming operations is something
> >     I got used to (before I was using yubikey)
> >
> >     Thanks for any help,
> >     Amos Sam
> >
> >     _______________________________________________
> >     Gnuk-users mailing list
> >     Gnuk-users at gnupg.org <mailto:Gnuk-users at gnupg.org>
> >     https://lists.gnupg.org/mailman/listinfo/gnuk-users
> >
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20181119/dec2e1e2/attachment.html>

From mike at sowbug.com  Mon Nov 19 20:34:56 2018
From: mike at sowbug.com (Mike Tsao)
Date: Mon, 19 Nov 2018 11:34:56 -0800
Subject: Exporting private key
In-Reply-To: <4fa9a858-060f-5d8c-1477-b54d98b6d66f@propellered.com>
References: <4fa9a858-060f-5d8c-1477-b54d98b6d66f@propellered.com>
Message-ID: <CACi+kjrcjHa3WCi6_FcJcfHF8HwZmygaze8OHOnF8KTRs4ic7Q@mail.gmail.com>

If you generated the key externally (e.g., with GnuPG) and still have the
encrypted private key + passphrase on your host PC, then you can import it
to as many OpenPGP hardware keys, such as gnuk or Yubikey, as you wish. But
if the gnuk device generated the key internally, and you didn't say yes to
the "Make off-card backup of encryption key?" question when creating it,
then by design it cannot be exported.

For signing/authenticating/certifying operations, backing up the private
key isn't essential. You signed a document at a specific moment in time,
and after that moment in time, the only important operation is to verify
the document's signature, which requires only the public key, which
presumably won't ever be lost because it's widely distributed. It is
inconvenient to lose the only copy of the private key because you'll have
to generate and distribute a replacement public key, but there is no data
loss in the sense of no longer being able to do something.

For encryption, though, the answer is different. Backing up the private key
is important. Someone (maybe you) could encrypt data for you using your
public key, and if you've lost the only copy of the private key, then you
won't ever be able to decrypt that data.

Thus, if your gnuk is only an authentication token (e.g., the thing you use
to ssh into a server), then some people are of the opinion that it's better
to generate on-device, decline the backup option, and enjoy peace of mind
that it's impossible for the private key to be copied because it exists in
only one place and can't be extracted without physical access and special
knowledge. If you lose that token, update the servers that recognize it to
delete the public key from authorized_keys, and replace it with a new
token/key. (Of course, we're assuming you had some other way to update the
server besides the token you lost.) But if you use your gnuk for
encryption, then most people would agree you should generate the private
key on the host PC, back it up well, and then import it to the gnuk(s).

But again, if you generated the key on the gnuk and didn't make a backup,
that's the end of the story. (There are supposed to be ways to get around
this, such as
https://lists.gnupg.org/pipermail/gnuk-users/2018-June/000051.html.)

On Mon, Nov 19, 2018 at 11:10 AM Amos Sam via Gnuk-users <
gnuk-users at gnupg.org> wrote:

> Hello there
>
> New user here...
>
> I have ST-Link v2 as primary gnuk device, and blue pill for backup.
> I was wondering is it possible to export private key from gnuk?
> So, if I loose primary stick, to export private key from backup
> device and recreate new stick.
> I hope that my question has sense...
>
> gniibe: Will FST-01SZ design be opensource? And if yes,
> where it will be? I would like to have physically smaller device
> to carry around, and button for confirming operations is something
> I got used to (before I was using yubikey)
>
> Thanks for any help,
> Amos Sam
>
> _______________________________________________
> Gnuk-users mailing list
> Gnuk-users at gnupg.org
> https://lists.gnupg.org/mailman/listinfo/gnuk-users
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20181119/f2a54fd7/attachment.html>

From trick at vanstaveren.us  Tue Nov 20 23:16:02 2018
From: trick at vanstaveren.us (Patrick van Staveren)
Date: Tue, 20 Nov 2018 22:16:02 +0000
Subject: SWD interface disabled once Gnuk programmed?
Message-ID: <CALdGzPAwZ_CmNBu5znu9dA44M65CG5VrPHM=JP1zNyaQ93suVg@mail.gmail.com>

Hi there,

I am new to Gnuk so forgive me if this is a newbie mistake...

I have successfully built and programmed Gnuk onto a ST-Link V2 clone
(target=ST_DONGLE). I have programmed it with OpenOCD using another ST-Link
V2 :) it works.

However it now seems that the SWD interface on the Gnuk target board is
disabled so I can't connect with OpenOCD to reprogram it. OpenOCD behaves
as if I'm not plugged into any device.

Is this by design? I assume it might be, to close this off as a vector of
attack. Is there a way to open it back up? I don't mind losing the key I've
generated on it as this is just experimental so far.

Thanks,

--
Patrick "Trick" van Staveren
http://trick.vanstaveren.us/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20181120/9a46b499/attachment.html>

From mike at sowbug.com  Wed Nov 21 01:06:29 2018
From: mike at sowbug.com (Mike Tsao)
Date: Tue, 20 Nov 2018 16:06:29 -0800
Subject: SWD interface disabled once Gnuk programmed?
In-Reply-To: <CALdGzPAwZ_CmNBu5znu9dA44M65CG5VrPHM=JP1zNyaQ93suVg@mail.gmail.com>
References: <CALdGzPAwZ_CmNBu5znu9dA44M65CG5VrPHM=JP1zNyaQ93suVg@mail.gmail.com>
Message-ID: <CACi+kjp+N+j44g_81ZJz5aQA4fRSg7mE9z4imPdnoVPv45a88g@mail.gmail.com>

If you have gnupg installed, then it might be claiming the USB interface
now that the device is an OpenPGP key. Try killing gpg-agent, unplugging,
and plugging back in.

On Tue, Nov 20, 2018, 3:40 PM Patrick van Staveren <trick at vanstaveren.us>
wrote:

> Hi there,
>
> I am new to Gnuk so forgive me if this is a newbie mistake...
>
> I have successfully built and programmed Gnuk onto a ST-Link V2 clone
> (target=ST_DONGLE). I have programmed it with OpenOCD using another ST-Link
> V2 :) it works.
>
> However it now seems that the SWD interface on the Gnuk target board is
> disabled so I can't connect with OpenOCD to reprogram it. OpenOCD behaves
> as if I'm not plugged into any device.
>
> Is this by design? I assume it might be, to close this off as a vector of
> attack. Is there a way to open it back up? I don't mind losing the key I've
> generated on it as this is just experimental so far.
>
> Thanks,
>
> --
> Patrick "Trick" van Staveren
> http://trick.vanstaveren.us/
> _______________________________________________
> Gnuk-users mailing list
> Gnuk-users at gnupg.org
> https://lists.gnupg.org/mailman/listinfo/gnuk-users
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20181120/4392c0a8/attachment.html>

From gary at mups.co.uk  Wed Nov 21 00:56:37 2018
From: gary at mups.co.uk (Gary)
Date: Tue, 20 Nov 2018 23:56:37 +0000
Subject: SWD interface disabled once Gnuk programmed?
In-Reply-To: <CALdGzPAwZ_CmNBu5znu9dA44M65CG5VrPHM=JP1zNyaQ93suVg@mail.gmail.com>
References: <CALdGzPAwZ_CmNBu5znu9dA44M65CG5VrPHM=JP1zNyaQ93suVg@mail.gmail.com>
Message-ID: <033dc71b-23b8-52f9-65d2-1bc6cd71986a@mups.co.uk>

On 20/11/2018 22:16, Patrick van Staveren wrote:
> Hi there,
> 
> I am new to Gnuk so forgive me if this is a newbie mistake...
> 
> I have successfully built and programmed Gnuk onto a ST-Link V2 clone
> (target=ST_DONGLE). I have programmed it with OpenOCD using another ST-Link
> V2 :) it works.
> 
> However it now seems that the SWD interface on the Gnuk target board is
> disabled so I can't connect with OpenOCD to reprogram it. OpenOCD behaves
> as if I'm not plugged into any device.
> 
> Is this by design? I assume it might be, to close this off as a vector of
> attack. Is there a way to open it back up? I don't mind losing the key I've
> generated on it as this is just experimental so far.

Even if the device has been "locked" to prevent any reading back of 
flash via ST-Link, you should be able to wipe and flash new firmware 
(losing any keys on the device in the process).

I'm not sure if that's the issue you're facing when you say "OpenOCD 
behaves as if I'm not plugged into any device" but these are the steps I 
use to upgrade firmware with a locked device and relock it afterwards, 
make sure you double check the ST-Link is correctly connected to the 4 
vias on the GNUK too:-

openocd -f interface/stlink-v2.cfg -f target/stm32f1x_stlink.cfg
telnet localhost 4444
 > reset halt
 > stm32f1x unlock 0
 > reset
 > reset halt
 > flash write_image erase /home/user/gnuk/src/build/gnuk.elf
 > reset
 > exit

Then to relock you can also do:
 > reset halt
 > stm32f1x lock 0
 > reset
 > shutdown

and verify you can no longer read flash back

dump_image mygnuk.img 0 10000

then inspect the img to see if it's blank or valid flash contents for 
example compare it to a read back prior to locking.

If that doesn't work, it may be worth including the output you get from 
ST-Link for the various commands. Someone should be able to help 
pinpoint the problem then.

Regards,

Gary


From gniibe at fsij.org  Wed Nov 21 06:02:50 2018
From: gniibe at fsij.org (NIIBE Yutaka)
Date: Wed, 21 Nov 2018 14:02:50 +0900
Subject: SWD interface disabled once Gnuk programmed?
In-Reply-To: <CALdGzPAwZ_CmNBu5znu9dA44M65CG5VrPHM=JP1zNyaQ93suVg@mail.gmail.com>
References: <CALdGzPAwZ_CmNBu5znu9dA44M65CG5VrPHM=JP1zNyaQ93suVg@mail.gmail.com>
Message-ID: <874lcbkop1.fsf@fsij.org>

Hello,

The access can be protected against SWD interface (if you did so by
"stm32f1x lock 0" command of OpenOCD).  If not, it may be a problem of
sleep mode of the MCU.

Let me explain in detail.

Newer Gnuk (1.2.7 or later) supports USB suspend to minimize power
consumption.  When suspended (by no USB communication for a while), it
enters sleep mode of MCU.  When MCU is in sleep mode, I think that
ST-Link/V2 doesn't work well.

Patrick van Staveren <trick at vanstaveren.us> wrote:
> Is this by design? I assume it might be, to close this off as a vector of
> attack. Is there a way to open it back up? I don't mind losing the key I've
> generated on it as this is just experimental so far.

I think that you didn't connect and used your board to host PC when you
tried to access by OpenOCD.

Please connect it to host PC by USB, and do "gpg --card-status" (or
something equivalent), so that host PC runs scdaemon to access your
board.  Then, on your board, Gnuk is keep running, not in sleep mode.
In this condition, ST-Link/V2 must be able to access your board.

Even if it's protected, "stm32f1x unlock 0" command should work, which
unlock the SWD access erasing all flash.


Other information:

This problem can be solved when hardware and software support RESET
signal, to wake up MCU from sleep mode.  But FST-01 original and FST-01G
don't expose RESET signal to users, unfortunately.  Besides, support of
RESET signal by OpenOCD (and its drivers) is not in good shape, I
suppose.  Only some drivers with specific configuration can use RESET
signal.  I don't know how RESET signal can be used with ST-Link/V2.

(BTW, I support RESET signal by my patch of OpenOCD for BBG-SWD.)
-- 


From amos at propellered.com  Fri Nov 23 23:19:18 2018
From: amos at propellered.com (Amos Sam)
Date: Fri, 23 Nov 2018 23:19:18 +0100
Subject: UIF settings
Message-ID: <7aad8ab2-e3bb-ac44-d21c-7c563ca782af@propellered.com>

Hello

Me again. I modified source to enable ACKBTN on ST-LINK on PA2 pin
on raising edge, and soldered switch to 3.3 source, and flashed it. Then
I cloned gnupg repo, and build it (didn't installed it).

When I run gpg --edit-card from repo, i get

UIF setting ......: Sign=off Decrypt=off Auth=off

So, firmware is correctly build and installed, and gpg is

gpg (GnuPG) 2.3.0-beta535

Then I go to admin mode, and input "uif 1 on", but I get

gpg/card> uif 1 on
gpg: error for setup UIF: Invalid name

Any help? Or, am I jumping in front of train?

Thanks

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 228 bytes
Desc: OpenPGP digital signature
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20181123/d550add2/attachment.sig>

From gniibe at fsij.org  Sun Nov 25 02:25:03 2018
From: gniibe at fsij.org (NIIBE Yutaka)
Date: Sun, 25 Nov 2018 10:25:03 +0900
Subject: UIF settings
In-Reply-To: <7aad8ab2-e3bb-ac44-d21c-7c563ca782af@propellered.com>
References: <7aad8ab2-e3bb-ac44-d21c-7c563ca782af@propellered.com>
Message-ID: <877eh2j6ds.fsf@fsij.org>

Amos Sam via Gnuk-users <gnuk-users at gnupg.org> wrote:
> I cloned gnupg repo, and build it (didn't installed it).

You need to install, if not, scdaemon invoked will be the one of old
one.

> gpg/card> uif 1 on
> gpg: error for setup UIF: Invalid name

While gpg is new one, scdaemon is old which doesn't know UIF.
Thus, scdaemon returns:

	GPG_ERR_INV_NAME                Invalid name

for the UIF object.
-- 


From amos at propellered.com  Sun Nov 25 16:35:13 2018
From: amos at propellered.com (Amos Sam)
Date: Sun, 25 Nov 2018 16:35:13 +0100
Subject: UIF settings
In-Reply-To: <877eh2j6ds.fsf@fsij.org>
References: <7aad8ab2-e3bb-ac44-d21c-7c563ca782af@propellered.com>
 <877eh2j6ds.fsf@fsij.org>
Message-ID: <abe789e9-9166-f45b-2923-9de007baf093@propellered.com>

You were right... Once I installed gnupgp from git, I was able to
activate UIF... but, switch fell off after few tries (my lousy soldering
work :-D )

Anyway, that ack btn is what I got used to on yubi, but I'll wait for
FST-01SZ to be realeased (and stable gnupg).

Thanks for answer, and for this great project!

On 11/25/18 2:25 AM, NIIBE Yutaka wrote:
> Amos Sam via Gnuk-users <gnuk-users at gnupg.org> wrote:
>> I cloned gnupg repo, and build it (didn't installed it).
> 
> You need to install, if not, scdaemon invoked will be the one of old
> one.
> 
>> gpg/card> uif 1 on
>> gpg: error for setup UIF: Invalid name
> 
> While gpg is new one, scdaemon is old which doesn't know UIF.
> Thus, scdaemon returns:
> 
> 	GPG_ERR_INV_NAME                Invalid name
> 
> for the UIF object.
> 

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 228 bytes
Desc: OpenPGP digital signature
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20181125/93dff65e/attachment.sig>

From gniibe at fsij.org  Mon Nov 26 01:31:39 2018
From: gniibe at fsij.org (NIIBE Yutaka)
Date: Mon, 26 Nov 2018 09:31:39 +0900
Subject: UIF settings
In-Reply-To: <7aad8ab2-e3bb-ac44-d21c-7c563ca782af@propellered.com>
References: <7aad8ab2-e3bb-ac44-d21c-7c563ca782af@propellered.com>
Message-ID: <874lc4of10.fsf@iwagami.gniibe.org>

Amos Sam via Gnuk-users <gnuk-users at gnupg.org> wrote:
> soldered switch to 3.3 source

I did like this with FST-01G, and it works for me.

    PA2
    <-----+
          |
          o
           /
          o
         _|_
         /// GND

Could you please test again with this circuit, when you have time?

Since I leaned English (by UNIX Manuals) after learning Electric
engineering in Japanese, it's better for me to explain in ASCII art.
(I mean, I don't have good terminology in Electronics in English.)

The switch on-off generates a signal (+3V3 to GND, and then +3V3 again,
since it's pulled up internally) and Gnuk detects its rising edge.

The detection of rising edge (transition) is important.  It should not
just to check the level.  That's because the purpose of this feature is
to require user interaction.

Well, still, an attacker can connect square wave generator to PA2 to
cheat the device.  Or an attacker with mechanical engineering can even
arrange a robot to push the button or to move a magnet to mimic the user
interaction.

I know that.  You don't need to file a bug report for that.  If enough
demands, Flying Stone Technology would develop self-defense robot for
FST-01.  But, here again, we will have an export control issue.  :-)
-- 


From gniibe at fsij.org  Mon Nov 26 02:11:42 2018
From: gniibe at fsij.org (NIIBE Yutaka)
Date: Mon, 26 Nov 2018 10:11:42 +0900
Subject: NeuG 1.0.9 and Gnuk 1.2.12
Message-ID: <87tvk4mylt.fsf@iwagami.gniibe.org>

Hello,

I fixed an issue of 96-bit unique bits for GD32F103.  I also
finally fixed a race condition of ACK button for Gnuk.  Thus,
these releases.


NeuG 1.0.9 is released.

	tag release/1.0.9
	Tagger: NIIBE Yutaka <gniibe at fsij.org>
	Date:   Tue Nov 20 17:16:08 2018 +0900
	commit 5d51022a97a5b7358d0ea62bbbc00628c6cec06a

Gnuk 1.2.12 is released.

	tag release/1.2.12
	Tagger: NIIBE Yutaka <gniibe at fsij.org>
	Date:   Sun Nov 25 14:37:44 2018 +0900
	commit 7249775c171013daca08bc21fd36546fdf74872a


I wrote two articles for FST-01SZ:

    Flying Stone Tiny 01 revision SZ:
    https://www.gniibe.org/memo/development/fst-01/fst-01-revision-sz.html

    Flying Stone Tiny 01SZ Test Plan:
    https://www.gniibe.org/memo/development/fst-01/fst-01sz-testplan.html

In the first article, you can see the connector ZL-272 (black USB
connector) and the metal enclosure ZL-271.

In the second article, you can see an orange test clip.  It's 1.27mm
pitch test clip with needles.  I imported it from China, as well as the
connector ZL-272 and the metal enclosure ZL-271.  You see, we can find
these tools and parts in Chinese market (like Taobao).

I encountered several failures for importing them.  Firstly, "USB" is
difficult, just like CD-ROM or DVD, since it could be considered
including anti-China content.  For exporting/importing, it's better to
explain it's just a part, connector and enclosure, specifically, with no
memory, disk or content.  Secondly, you need to use better terminology
for a tool like test clip.  In the translation process from Chinese to
English, "needles" or "clip" could be described wrongly.  When it
sounded like a weapon, they stopped the shipment.  In a case of mine,
the shop kindly added a small screw driver as an additional gift, and it
was described by a term in Chinese with the character which can be
interpreted as "knife", then, the entire package was stopped.


This week, I'll visit ShenZhen, for SDZIY, Seeed Technology, and
OpenTechSummit in China.

Now, I'm not sure if Seeed will like to sell FST-01SZ at Seeed Studio or
not.  I am asking them.  Your support will be helpful.  I suppose you
can write your requests to (Seeed Forum -> Products & Technology ->
Others): https://forum.seeedstudio.com/
-- 


From peter at digitalbrains.com  Mon Dec 10 16:29:53 2018
From: peter at digitalbrains.com (Peter Lebbing)
Date: Mon, 10 Dec 2018 16:29:53 +0100
Subject: Distribution of binary
Message-ID: <cdf4aec4-56b8-d3f6-3274-46bcca4ae088@digitalbrains.com>

Hello Gniibe and list,

TL;DR: Is it okay to give people gnuk-no-vidpid.elf along with the
script to insert a VID:PID?

In Debian bug #903163, Guilhem Moulin mentioned he cannot test code for
multi-card-reader GnuPG setups since he has only one reader. Chris Lamb
offered to get him a reader, but I also replied[1] since I know how to
put GnuK on a 3 dollar Maple Mini clone and both Guilhem and I will be
at the 35C3 in two weeks.

In fact, I thought, why not bring ten, for anyone interested. They're
cheap as dirt, might as well hand them out.

The Maple Mini loses a lot of the desirable properties of the FST-01, in
regard to form factor, supply chain trustworthiness etcetera.  Guilhem
would not be using it to keep secrets, but just for development.  And of
course people only have my word that I myself didn't do bad stuff. I
could write paragraph after paragraph about all the tradeoffs possible,
with ideally people building their own binary and using an SWD- or
JTAG-programmer to flash the Maple Mini. But let's not write that mail
now.

I quickly realized I had for a moment forgotten about the stipulations
regarding the FSIJ VID:PID of 234b:0000. I cannot just hand out GnuK's
fully programmed and functional.

One of the tradeoffs possible is that I put a GnuK with the illegal
VID:PID 0000:0000 on the Maple Mini, and give that to someone. I also
give them a pre-built gnuk-no-vidpid.elf and the shell scripts to put
the proper FSIJ VID:PID in it, and they use reGNUal to flash the Maple
Mini. This works since you can actually upload reGNUal to a Maple Mini
that has GnuK with VID:PID 0000:0000 on Linux, I tested it. GnuPG was
less willing to work with such a GnuK; it reports:
> ccid-driver: usb_open failed: LIBUSB_ERROR_IO

Is it legally OK if I give people gnuk-no-vidpid.elf and the shell
scripts to change the VID:PID? This for people who, after hearing me
explain the pros and cons, decides they want to have that to avoid
having to build the firmware themselves.

Cheers,

Peter.

PS: Before you reply "you need arm-none-eabi-objdump for
binary-edit.sh", let me point out that 1) x86_64-linux-gnu-objdump works
as well for this purpose and 2) I could edit the script to directly
refer to a binary offset specific to the .elf I hand out.

[1] <https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=903163#270>

-- 
I use the GNU Privacy Guard (GnuPG) in combination with Enigmail.
You can send me encrypted mail if you want some privacy.
My key is available at <http://digitalbrains.com/2012/openpgp-key-peter>

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 488 bytes
Desc: OpenPGP digital signature
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20181210/b286bcea/attachment.sig>

From peter at digitalbrains.com  Mon Dec 10 20:21:07 2018
From: peter at digitalbrains.com (Peter Lebbing)
Date: Mon, 10 Dec 2018 20:21:07 +0100
Subject: Distribution of binary
In-Reply-To: <cdf4aec4-56b8-d3f6-3274-46bcca4ae088@digitalbrains.com>
References: <cdf4aec4-56b8-d3f6-3274-46bcca4ae088@digitalbrains.com>
Message-ID: <0c4affce-3973-9a56-3234-5fbe2744eba7@digitalbrains.com>

On 10/12/2018 16:29, Peter Lebbing wrote:
> PS: Before you reply "you need arm-none-eabi-objdump for
> binary-edit.sh", let me point out that 1) x86_64-linux-gnu-objdump works
> as well for this purpose and 2) I could edit the script to directly
> refer to a binary offset specific to the .elf I hand out.

D'oh! Completely forgot about objcopy to produce a pure binary (.bin)
from .elf. That one does require the proper objcopy binary. Still, it
can be solved by directly patching the .bin with a script that uses the
offsets precomputed for the .bin file.

-- 
I use the GNU Privacy Guard (GnuPG) in combination with Enigmail.
You can send me encrypted mail if you want some privacy.
My key is available at <http://digitalbrains.com/2012/openpgp-key-peter>

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 488 bytes
Desc: OpenPGP digital signature
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20181210/2ed18e95/attachment.sig>

From gniibe at fsij.org  Tue Dec 11 03:33:19 2018
From: gniibe at fsij.org (NIIBE Yutaka)
Date: Tue, 11 Dec 2018 11:33:19 +0900
Subject: Distribution of binary
In-Reply-To: <cdf4aec4-56b8-d3f6-3274-46bcca4ae088@digitalbrains.com>
References: <cdf4aec4-56b8-d3f6-3274-46bcca4ae088@digitalbrains.com>
Message-ID: <87zhtcdc7k.fsf@iwagami.gniibe.org>

Peter Lebbing <peter at digitalbrains.com> wrote:
> TL;DR: Is it okay to give people gnuk-no-vidpid.elf along with the
> script to insert a VID:PID?

As long as it's an experimental use (it's not commercial product) with
the condition of:

    * Distribution here means delivery of a limited number of hardware
      by hand (in person)

    * Both sides have enough knowledge, and agree it's an experiment

    * Both sides actually have official Gnuk Token already

Then, I'd say, it's OK even with 234b:0000.

Please note that it's my personal opinion.  This is not something like
an official resolution at FSIJ annual meeting.

What I ask clearly is not to distribute binary of gnuk.elf which
contains VID:PID of FSIJ, by a media (like CD-ROM, SD card, etc.) or on
network.


If done for commercial product, I think that both cases (distributing a
hardware with 0000:0000, distributing a hardware with 234b:0000) anyway
violate the assumption of USB governance.  In the (ideal) USB world, it
assumes it is only done by the vendor.

If done for personal experiment, nothing could stop that, I suppose.

For distribution of experimental hardware among friends, in general,
it's better not to do that using someone's vendor ID (as a good citizen,
not to confuse the world).

For this particular case of experimental Gnuk Token, as long as it is
recognized as an experiment and both have official Gnuk Token (which
means no possible misunderstanding), it's OK.  This is my opinion.



>From here, we have other technical discussion...

For users to experiment "out of box", obviously 234b:0000 is better,
because there are situations like:

> GnuPG was less willing to work with such a GnuK; it reports:
> > ccid-driver: usb_open failed: LIBUSB_ERROR_IO

This is because of configuration.  In Debian, for example, it is the
distribution which arranges udev rules to access the hardware.  It is
basically configured based on VID:PID, because each hardware behaves
differently (unfortunately).  It could use USB interface class ID
(bInterfaceClass), in theory, when each hardware hehaves well.
-- 


From peter at digitalbrains.com  Wed Dec 12 15:48:24 2018
From: peter at digitalbrains.com (Peter Lebbing)
Date: Wed, 12 Dec 2018 15:48:24 +0100
Subject: Distribution of binary
In-Reply-To: <87zhtcdc7k.fsf@iwagami.gniibe.org>
References: <cdf4aec4-56b8-d3f6-3274-46bcca4ae088@digitalbrains.com>
 <87zhtcdc7k.fsf@iwagami.gniibe.org>
Message-ID: <8ed318e1-6048-7f1e-b2f1-fae1e30188c4@digitalbrains.com>

Hi Gniibe,

Thanks for getting back to me so quickly! I've been playing around some
more.

On 11/12/2018 03:33, NIIBE Yutaka wrote:
> As long as it's an experimental use (it's not commercial product) with
> the condition of:
> 
>      * Distribution here means delivery of a limited number of hardware
>        by hand (in person)
> 
>      * Both sides have enough knowledge, and agree it's an experiment
> 
>      * Both sides actually have official Gnuk Token already
> 
> Then, I'd say, it's OK even with 234b:0000.

Ah, okay, that's good to know! That's a really good compromise.

But there might be people who don't have a GnuK yet and might want to
experiment with a Maple Mini with GnuK. Given an explanation of the
risks involved with regard to supply chain (which includes me), they
might still be interested. The biggest hurdle: programming the Maple
Mini if you don't have equipment. If I can give them a Maple Mini with
GnuK but with a VID:PID of 0000:0000, they could build their own GnuK on
Debian stable, which is really simple, and reGNUal their design into it.
Would you be OK with a Maple Mini with GnuK with VID:PID 0000:0000,
purely for the functionality of reGNUal? Note that NeuG did not come up
on the Maple Mini and I haven't investigated why, since I didn't see any
advantage to using NeuG with reGNUal over GnuK with reGNUal.

Another option would be DFU. But I've been struggling with this for a
bit; I'll split off the thread with a mail about that.

> If done for commercial product, I think that both cases (distributing
> a hardware with 0000:0000, distributing a hardware with 234b:0000)
> anyway violate the assumption of USB governance.  In the (ideal) USB
> world, it assumes it is only done by the vendor.

Hehe, yes, 0000:0000 is definitely not okay in general. But I don't care
about that if it works under Linux for a single limited purpose. What I
care about is violating licence or spirit of GnuK and FSIJ.

>> GnuPG was less willing to work with such a GnuK; it reports:
>>> ccid-driver: usb_open failed: LIBUSB_ERROR_IO
> 
> This is because of configuration.  In Debian, for example, it is the
> distribution which arranges udev rules to access the hardware.

PEBKAC. I /had/ configured udev, but it appears something had started
pcscd without my knowledge.[1] It is working now even for GnuPG with a
VID:PID of 0000:0000. Not that I intend anyone use it as that, just
noting that technically, under Linux, it /does/ work.

Cheers,

Peter.

[1] Hypothesis: if you insert a CCID-class device which does not have an
udev rule that says ENV{ID_SMARTCARD_READER_DRIVER}="gnupg", does pcscd
start on a systemd-managed Debian stable? Because I inserted the device
before I wrote the udev rule. Anyway, it's not important, it just
occured to me that might have been it.

-- 
I use the GNU Privacy Guard (GnuPG) in combination with Enigmail.
You can send me encrypted mail if you want some privacy.  My key is
available at <http://digitalbrains.com/2012/openpgp-key-peter>

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 484 bytes
Desc: OpenPGP digital signature
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20181212/e13e2de7/attachment.sig>

From peter at digitalbrains.com  Wed Dec 12 15:51:11 2018
From: peter at digitalbrains.com (Peter Lebbing)
Date: Wed, 12 Dec 2018 15:51:11 +0100
Subject: Using GnuK with DFU bootloader
In-Reply-To: <87zhtcdc7k.fsf@iwagami.gniibe.org>
References: <cdf4aec4-56b8-d3f6-3274-46bcca4ae088@digitalbrains.com>
 <87zhtcdc7k.fsf@iwagami.gniibe.org>
Message-ID: <c70aebf9-9633-2f97-e6a0-5d7381930f2c@digitalbrains.com>

Hi Gniibe,

I was trying to make it so that you can upload GnuK to the Maple Mini
with a DFU bootloader. Here's what happened :-).

First of all, uploading by DFU
1) does not protect the flash from reading
2) keeps the bootloader intact, through which you can also read out the
flash.

So my goal is to upload GnuK through DFU and then upload another GnuK
through reGNUal, which would kill the DFU and engage read lockout.

There is already some DFU code in GnuK, I tried to leverage that.

One
~~~

The default Maple Mini DFU puts uploaded code at 0x8005000. This is too
high for GnuK (at least, without changes, it does not fit). But
STM32duino-bootloader[1] is small; it loads code at 0x8002000. So I
changed ORIGIN in gnuk/src/configure to match.

Two
~~~

It appears the DFU-code in GnuK is faulty?

First, `func` (main.c:412 [2]) is loaded from new_vector[9] while the
DFU bootloader is still there, picking up data from the bootloader (at
0x8000024). It should only be loaded later, when SYS is copied to the
first sectors.

Second, the first 4 KiB is erased, but not written with SYS.
flash_write() refuses to overwrite the first 4 KiB, leaving it empty
instead of filled with SYS.

I tried to fix these things in commit 2e2d68d, which you can find at my
GitLab: [3].

I used a copy of flash_write() with the check removed. This
should actually still be portable, since flash_program_halfword() is
also in SYS? Anyway, it'll do for now for sure.

PLEASE NOTE: upgrade_by_password.py has been modified to not lock memory
readout. After all, that is slightly annoying when debugging ;-).

Three
~~~~~

It still does not work. Why? Simple. We have SYS copied from 0x8002000
to 0x8000000, including all the pointers. So the vector at 0x8000024
(flash_erase_all_and_exec) is still pointing to the routine of the SYS
at 0x8002000, and when called, it will soon erase itself. Not so much
self-modifying as self-destroying code, and the processor faults.

Four
~~~~

My current attempt is to have the GnuK that has been loaded via DFU not
do any erasing or relocating. Instead, have a custom reGNUal erase the
whole flash including the first 4KiB, and then have it program the whole
flash including the first 4 KiB, with a bog-standard GnuK without DFU
support.

This doesn't work yet, and I really need to be doing other stuff now,
so, to be continued.

What do you make of this? Does the DFU+reGNUal work on other boards; I
cannot see how it could?

Cheers,

Peter.

[1] <https://github.com/rogerclarkmelbourne/STM32duino-bootloader>
[2] <https://gitlab.com/DigitalBrains1/gnuk/blob/master/src/main.c#L412>
[3] <https://gitlab.com/DigitalBrains1/gnuk/tree/dfu>

-- 
I use the GNU Privacy Guard (GnuPG) in combination with Enigmail.
You can send me encrypted mail if you want some privacy.
My key is available at <http://digitalbrains.com/2012/openpgp-key-peter>

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 488 bytes
Desc: OpenPGP digital signature
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20181212/5efeee20/attachment.sig>

From gniibe at fsij.org  Thu Dec 13 01:00:54 2018
From: gniibe at fsij.org (NIIBE Yutaka)
Date: Thu, 13 Dec 2018 09:00:54 +0900
Subject: Using GnuK with DFU bootloader
In-Reply-To: <c70aebf9-9633-2f97-e6a0-5d7381930f2c@digitalbrains.com>
References: <cdf4aec4-56b8-d3f6-3274-46bcca4ae088@digitalbrains.com>
 <87zhtcdc7k.fsf@iwagami.gniibe.org>
 <c70aebf9-9633-2f97-e6a0-5d7381930f2c@digitalbrains.com>
Message-ID: <87bm5qgurt.fsf@fsij.org>

Peter Lebbing <peter at digitalbrains.com> wrote:
> It appears the DFU-code in GnuK is faulty?

Possibly.

The code of DFU support in Gnuk was written in very early stage of Gnuk
development, for people with STBee and STBee mini.  No surprises if not
working.

> I tried to fix these things in commit 2e2d68d, which you can find at my
> GitLab: [3].

I will have a look at this.

> Instead, have a custom reGNUal erase the whole flash including the
> first 4KiB, and then have it program the whole flash including the
> first 4 KiB, with a bog-standard GnuK without DFU support.

I think that if you want to do that, in the first stage, flash ROM
should not be protected.


The first 4KiB cannot be written by running program (when protected).
Since I interpreted so, I keep my practice of filling the first pages of
4KiB for SYS routines (and a part of table for AES).

In the PM0075 Programming manual of STM32F10xxx Flash memory
microcontrollers, it says (section 2.4.1 in page 17):

    Once the protection byte has been programmed:

    * Main Flash memory read access is not allowed except for the user
      code (when booting from main Flash memory itself with the debug
      mode not active).

    * Pages 0-3 (for low- and medium-density devices), or pages 0-1 (for
      high-density and connectivity line devices) are automatically
      write-protected. The rest of the memory can be programmed by the
      code executed from the main Flash memory (for IAP, constant
      storage, etc.), but it is protected against write/erase (but not
      against mass erase) in debug mode or when booting from the
      embedded SRAM.

Well, it doesn't describe the specific case of IAP (in-application
programming) booting from flash ROM and running code in SRAM, but
it is likely the pages 0-3 are write-protected.
-- 


From gniibe at fsij.org  Thu Dec 13 01:19:53 2018
From: gniibe at fsij.org (NIIBE Yutaka)
Date: Thu, 13 Dec 2018 09:19:53 +0900
Subject: Distribution of binary
In-Reply-To: <8ed318e1-6048-7f1e-b2f1-fae1e30188c4@digitalbrains.com>
References: <cdf4aec4-56b8-d3f6-3274-46bcca4ae088@digitalbrains.com>
 <87zhtcdc7k.fsf@iwagami.gniibe.org>
 <8ed318e1-6048-7f1e-b2f1-fae1e30188c4@digitalbrains.com>
Message-ID: <877egegtw6.fsf@fsij.org>

Peter Lebbing <peter at digitalbrains.com> wrote:
> But there might be people who don't have a GnuK yet and might want to
> experiment with a Maple Mini with GnuK.

In that case... how about some procedure like this?

   * Give (or sell) a Maple Mini (factory setup) to your friend.

   * Offer a service of flashing Gnuk on behalf of your friend,
     in person

That is, it is your friend who flashes Gnuk onto her own board, while
you help that.

In this scenario, I think that it could be considered as:
no distribution of binary occurs.

It is the best when she uses her own notebook computer to flash the
board, but it would be also OK her using your notebook computer
(directly or indirectly).  At least, I don't mind.  It's acceptable for
me.  Even if it's all you who type in commands to flash, when it's done
by her will, it's OK for me.

For your using your notebook computer while it's completely out of
control by her... that would be considered distribution of binary from
you to her.

That's my interpretation and thought.
-- 


From jeremydrake+gnuk at eacceleration.com  Thu Dec 13 02:24:01 2018
From: jeremydrake+gnuk at eacceleration.com (Jeremy Drake)
Date: Wed, 12 Dec 2018 17:24:01 -0800 (PST)
Subject: Distribution of binary
In-Reply-To: <cdf4aec4-56b8-d3f6-3274-46bcca4ae088@digitalbrains.com>
References: <cdf4aec4-56b8-d3f6-3274-46bcca4ae088@digitalbrains.com>
Message-ID: <alpine.DEB.2.11.1812121720450.8539@jeremydrake-3dj.hostmark.eacceleration.com>

On Mon, 10 Dec 2018, Peter Lebbing wrote:

>
> In Debian bug #903163, Guilhem Moulin mentioned he cannot test code for
> multi-card-reader GnuPG setups since he has only one reader. Chris Lamb
> offered to get him a reader, but I also replied[1] since I know how to
> put GnuK on a 3 dollar Maple Mini clone and both Guilhem and I will be
> at the 35C3 in two weeks.

If all you want is to test GnuPG, and not store any secrets, couldn't you 
use the GNU/Linux port of GnuK?  There's not much documentation out there 
for that, that I've found, but a while back I took an email from (the 
predecessor to) this list's archives and attempted to format the 
instructions a little better, and correct typos.

https://salsa.debian.org/snippets/151


From peter at digitalbrains.com  Thu Dec 13 09:51:20 2018
From: peter at digitalbrains.com (Peter Lebbing)
Date: Thu, 13 Dec 2018 09:51:20 +0100
Subject: Using GnuK with DFU bootloader
In-Reply-To: <87bm5qgurt.fsf@fsij.org>
References: <cdf4aec4-56b8-d3f6-3274-46bcca4ae088@digitalbrains.com>
 <87zhtcdc7k.fsf@iwagami.gniibe.org>
 <c70aebf9-9633-2f97-e6a0-5d7381930f2c@digitalbrains.com>
 <87bm5qgurt.fsf@fsij.org>
Message-ID: <f6575692-8499-2558-9a6d-8dc288c1006c@digitalbrains.com>

On 13/12/2018 01:00, NIIBE Yutaka wrote:
> I will have a look at this.

Do note it is not actually working :-).

> I think that if you want to do that, in the first stage, flash ROM
> should not be protected.

That is my interpretation also, but the DFU doesn't engage protection.
Running GnuK with a DFU bootloader present is completely not an option,
since both SWD and the DFU bootloader can readily hand you a copy of the
encrypted private keys on the GnuK. You would subsequently need to wipe
the DFU and after that engage readout locks. Which can all theoretically
be done by GnuK and reGNUal in concert.

Cheers,

Peter.

-- 
I use the GNU Privacy Guard (GnuPG) in combination with Enigmail.
You can send me encrypted mail if you want some privacy.
My key is available at <http://digitalbrains.com/2012/openpgp-key-peter>

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 488 bytes
Desc: OpenPGP digital signature
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20181213/7b860b96/attachment.sig>

From peter at digitalbrains.com  Thu Dec 13 10:07:00 2018
From: peter at digitalbrains.com (Peter Lebbing)
Date: Thu, 13 Dec 2018 10:07:00 +0100
Subject: Distribution of binary
In-Reply-To: <877egegtw6.fsf@fsij.org>
References: <cdf4aec4-56b8-d3f6-3274-46bcca4ae088@digitalbrains.com>
 <87zhtcdc7k.fsf@iwagami.gniibe.org>
 <8ed318e1-6048-7f1e-b2f1-fae1e30188c4@digitalbrains.com>
 <877egegtw6.fsf@fsij.org>
Message-ID: <9b3783be-d288-ef12-c453-85ab3ea8708d@digitalbrains.com>

On 13/12/2018 01:19, NIIBE Yutaka wrote:
> In that case... how about some procedure like this?

That gives me plenty to work with, thank you!

I'd still like to enable the DFU method, since it can then all be done
on any computer without programming hardware (after the factory
bootloader has been replaced by a smaller alternative DFU bootloader; a
step that does require programming hardware).

I'm not comfortable lending random people my FT2232H-based programmer on a
hackers congress, what with BadUSB and all.

I realize that might sound a bit hypocritical when you say so while
handing out USB devices, but everybody needs to make their own
assessment of the risks involved. I will be worthy of any trust, but can
give no more than my word on that.

Cheers,

Peter.

-- 
I use the GNU Privacy Guard (GnuPG) in combination with Enigmail.
You can send me encrypted mail if you want some privacy.
My key is available at <http://digitalbrains.com/2012/openpgp-key-peter>

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 488 bytes
Desc: OpenPGP digital signature
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20181213/5f36f560/attachment.sig>

From peter at digitalbrains.com  Thu Dec 13 10:14:37 2018
From: peter at digitalbrains.com (Peter Lebbing)
Date: Thu, 13 Dec 2018 10:14:37 +0100
Subject: Distribution of binary
In-Reply-To: <alpine.DEB.2.11.1812121720450.8539@jeremydrake-3dj.hostmark.eacceleration.com>
References: <cdf4aec4-56b8-d3f6-3274-46bcca4ae088@digitalbrains.com>
 <alpine.DEB.2.11.1812121720450.8539@jeremydrake-3dj.hostmark.eacceleration.com>
Message-ID: <2f7229da-649a-bb41-c838-c7c86577d38b@digitalbrains.com>

On 13/12/2018 02:24, Jeremy Drake wrote:
> If all you want is to test GnuPG, and not store any secrets, couldn't
> you use the GNU/Linux port of GnuK?  There's not much documentation
> out there for that, that I've found, but a while back I took an email
> from (the predecessor to) this list's archives and attempted to format
> the instructions a little better, and correct typos.

Yes, that had occurred to me as well, after the topic of more hardware
came up. But I hadn't looked into it at all yet and I would be meeting
Guilhem in a couple of weeks anyway at the congress :-).

The OS that needs the GnuK will be running in a virtual machine, and it
will be impossible to have the GNU/Linux port of GnuK running inside
that virtual machine. I know for a fact you can pass the VM the control
of a physical stick. It will probably be possible to wire the virtual
machine to a USB-over-IP instance as well, but I haven't tried.

Thanks for the pointer and the instructions!

Peter.

-- 
I use the GNU Privacy Guard (GnuPG) in combination with Enigmail.
You can send me encrypted mail if you want some privacy.
My key is available at <http://digitalbrains.com/2012/openpgp-key-peter>

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 488 bytes
Desc: OpenPGP digital signature
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20181213/32175e7e/attachment.sig>

From gniibe at fsij.org  Fri Dec 14 01:23:19 2018
From: gniibe at fsij.org (NIIBE Yutaka)
Date: Fri, 14 Dec 2018 09:23:19 +0900
Subject: Distribution of binary
In-Reply-To: <9b3783be-d288-ef12-c453-85ab3ea8708d@digitalbrains.com>
References: <cdf4aec4-56b8-d3f6-3274-46bcca4ae088@digitalbrains.com>
 <87zhtcdc7k.fsf@iwagami.gniibe.org>
 <8ed318e1-6048-7f1e-b2f1-fae1e30188c4@digitalbrains.com>
 <877egegtw6.fsf@fsij.org>
 <9b3783be-d288-ef12-c453-85ab3ea8708d@digitalbrains.com>
Message-ID: <875zvxdki0.fsf@fsij.org>

Peter Lebbing <peter at digitalbrains.com> wrote:
> I'd still like to enable the DFU method, since it can then all be done
> on any computer without programming hardware (after the factory
> bootloader has been replaced by a smaller alternative DFU bootloader; a
> step that does require programming hardware).

I see your point.  That's fair, when done properly.

Please note that it should not result a situation like:

  (a) Random persons' knowing your offering of Maple Mini (or Blue Pill)
      at a conference.

  (b) They will just take the advantage of this opportunity to get it at
      zero price, and will flash Gnuk on to the board with FSIJ's.

  (c) Selling it at eBay (or equivalent).

If it will happen, the step (c) violates the assumption of experimental
personal use, and it will put FSIJ into difficult situation about their
management of VID.  I'd say that the step (c) constitutes a distribution
of binary, if I were a lawyer.

My request is: Please don't automate it too much, to prevent such a
situation.  I recommend requiring some manual edit (human interaction
step) which can be only proceeded after learning USB things.


Well, it was a coincidence, I just received an email yesterday:

USB Implementers Forum wrote:
> Dear VID Holders,   The USB-IF is going to make our master VID listing
> available on our public website. This is in line with standard industry
> practice and based upon requests from other industry organizations and some
> members.

I hope this oppotunity eventually brings better output of lsusb for Gnuk
Token.
-- 


From peter at digitalbrains.com  Tue Dec 18 18:59:37 2018
From: peter at digitalbrains.com (Peter Lebbing)
Date: Tue, 18 Dec 2018 18:59:37 +0100
Subject: Using GnuK with DFU bootloader
In-Reply-To: <f6575692-8499-2558-9a6d-8dc288c1006c@digitalbrains.com>
References: <cdf4aec4-56b8-d3f6-3274-46bcca4ae088@digitalbrains.com>
 <87zhtcdc7k.fsf@iwagami.gniibe.org>
 <c70aebf9-9633-2f97-e6a0-5d7381930f2c@digitalbrains.com>
 <87bm5qgurt.fsf@fsij.org>
 <f6575692-8499-2558-9a6d-8dc288c1006c@digitalbrains.com>
Message-ID: <de148aa7-dc87-54fe-e8dc-14605a5f283e@digitalbrains.com>

Hello Niibe and list,

I have implemented support for safe DFU uploads, and tested it with a
Maple Mini clone from Baite, with the STM32duino bootloader. As I said
before, unfortunately it is not possible to implement this with the
factory bootloader of Maple Mini's, because there is only 108 KiB flash
left with the factory bootloader, and GnuK is simply too large.

Normally, the SYS block of the code is at the start of the flash and is
the first thing executed. It cannot ever be updated with reGNUal. With
DFU, the DFU bootloader is at the start of the flash and GnuK starts at
an offset. Also, the DFU bootloader might leave the flash unprotected
from readout. I'm not experienced enough to say whether this is always
the case, but it is for the STM32duino bootloader and I expect it is
true for most DFU bootloaders.

We don't want the DFU bootloader to stay even when flash readout were
protected, as it might still expose the flash to readout. Flash readout
protection only protects from programming hardware, code in the flash
can still read the flash, unsurprisingly.

Also, if we want to use reGNUal to later update to a new GnuK version,
we need SYS at the start of flash because this is what reGNUal and the
new GnuK will expect.

So my implementation has two versions of SYS, one running version at an
offset, and one copy of a version at the start of the flash. The first
time GnuK runs, it will remove the DFU bootloader, install the copy of
SYS at the start of the flash and enable readout protection. It will
continue to use the copy at an offset, but the one at the start is there
for a future GnuK to start using.

The GnuK firmware increases in size by 1 kilobyte with this option.

Once reGNUal is used, the GnuK becomes identical to one that was flashed
"bare" in the usual way, without DFU. But this is not necessary for safe
operation, it is just there to provide an upgrade path. GnuK is safe to
use directly after being flashed with a DFU bootloader.

My changes can be found in commit
00039c2419919b396ff11f119820f8cae5ab1d31 at [1].

This might be useful to have during the 35C2 Congress[2] ;-) which is
from Dec 27 to Dec 30, in a bit more than a week! Niibe, I cannot ask
you to accept these changes on such short notice, so I won't. But I hope
the extra functionality is useful. I have tried several things with a
Maple Mini with this GnuK and it behaved completely normally.

By the way, I did not implement --gc-sections support for the copy of
SYS in stdaln-sys-bin.o because I seemed to be missing a small part of
the puzzle to make it work and it wasn't very necessary since the
Makefile only includes the object when DFU support is enabled. With
the current code, it is then also needed anyway.

HTH,

Peter.

[1] <https://gitlab.com/DigitalBrains1/gnuk/tree/dfu>

[2] It's the 35C3, but the last C is for Congress. Just like an LCD is
an LC display, when you write out the last C, you need to remove it from
the abbreviation, right? ;-P And as a proper name, a capitalized C.

-- 
I use the GNU Privacy Guard (GnuPG) in combination with Enigmail.
You can send me encrypted mail if you want some privacy.
My key is available at <http://digitalbrains.com/2012/openpgp-key-peter>

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 488 bytes
Desc: OpenPGP digital signature
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20181218/06503610/attachment.sig>

From gniibe at fsij.org  Thu Dec 20 04:54:17 2018
From: gniibe at fsij.org (NIIBE Yutaka)
Date: Thu, 20 Dec 2018 12:54:17 +0900
Subject: Chopstx 1.13 and FST-01SZ
Message-ID: <87o99gsviu.fsf@iwagami.gniibe.org>

Hello,

Chopstx 1.13 is released.

	tag release/1.13
	Tagger: NIIBE Yutaka <gniibe at fsij.org>
	Date:   Wed Dec 19 13:40:49 2018 +0900
	commit b6c90e3df450cf4b33571733211e1ad6849656ac

The API of chopstx_poll is improved, so that user of the function can
use the update of *USEC_P when non-timeout event occurs.


Also, I updated the PCB design of FST-01SZ a bit.

FST-01SZ (version 3.01 in fst-01) is released.

	tag release/3.01
	Tagger: NIIBE Yutaka <gniibe at fsij.org>
	Date:   Wed Dec 12 12:39:02 2018 +0900
	commit 74ad36a6acc91924b22de09b4c49a9241db052a9

It's now in production.


Here is another information.

In the end of November, I visited the new office of Seeed Technology for
the production.

Their marketing team will answer my question about if they will sell
FST-01SZ at SeeedStudio.com again, but my gut feeling is it's difficult,
because of lower volume.

And even if it will be done, their preference is selling the product as
their own, and paying back royalty.  (Here, 'royalty' is in their term).
Because it is my personal business which gets permission by FSIJ for its
use of VID:PID, this arrangement is not good for me.

Well, I'm testing configuration which doesn't use VID:PID.  This is my
current configuration in Debian.

/etc/udev/rules.d/61-gnuk-scdaemon.rules:
===============================
SUBSYSTEM=="usb", ATTR{product}=="Gnuk Token", ENV{ID_SMARTCARD_READER}="1", ENV{ID_SMARTCARD_READER_DRIVER}="gnupg"
===============================
-- 


From gniibe at fsij.org  Thu Dec 20 10:06:07 2018
From: gniibe at fsij.org (NIIBE Yutaka)
Date: Thu, 20 Dec 2018 18:06:07 +0900
Subject: Using GnuK with DFU bootloader
In-Reply-To: <de148aa7-dc87-54fe-e8dc-14605a5f283e@digitalbrains.com>
References: <cdf4aec4-56b8-d3f6-3274-46bcca4ae088@digitalbrains.com>
 <87zhtcdc7k.fsf@iwagami.gniibe.org>
 <c70aebf9-9633-2f97-e6a0-5d7381930f2c@digitalbrains.com>
 <87bm5qgurt.fsf@fsij.org>
 <f6575692-8499-2558-9a6d-8dc288c1006c@digitalbrains.com>
 <de148aa7-dc87-54fe-e8dc-14605a5f283e@digitalbrains.com>
Message-ID: <87r2ecwosg.fsf@fsij.org>

Peter Lebbing <peter at digitalbrains.com> wrote:
> I have implemented support for safe DFU uploads, and tested it with a
> Maple Mini clone from Baite, with the STM32duino bootloader.

Great.

> My changes can be found in commit
> 00039c2419919b396ff11f119820f8cae5ab1d31 at [1].

I think that you meant four commits which ends by the commit of
00039c2419919b396ff11f119820f8cae5ab1d31, right?

I'll merge them.  Hopefully, before the Congress.
-- 


From peter at digitalbrains.com  Thu Dec 20 11:51:44 2018
From: peter at digitalbrains.com (Peter Lebbing)
Date: Thu, 20 Dec 2018 11:51:44 +0100
Subject: Using GnuK with DFU bootloader
In-Reply-To: <87r2ecwosg.fsf@fsij.org>
References: <cdf4aec4-56b8-d3f6-3274-46bcca4ae088@digitalbrains.com>
 <87zhtcdc7k.fsf@iwagami.gniibe.org>
 <c70aebf9-9633-2f97-e6a0-5d7381930f2c@digitalbrains.com>
 <87bm5qgurt.fsf@fsij.org>
 <f6575692-8499-2558-9a6d-8dc288c1006c@digitalbrains.com>
 <de148aa7-dc87-54fe-e8dc-14605a5f283e@digitalbrains.com>
 <87r2ecwosg.fsf@fsij.org>
Message-ID: <40b1cbd1-81aa-069a-0c44-254cd579ff1e@digitalbrains.com>

Hello Niibe!

On 20/12/2018 10:06, NIIBE Yutaka wrote:
> I think that you meant four commits which ends by the commit of
> 00039c2419919b396ff11f119820f8cae5ab1d31, right?

Yes, exactly.

> I'll merge them.  Hopefully, before the Congress.

Very cool, thanks!

By the way, when I wrote:

On 18/12/2018 18:59, Peter Lebbing wrote:
> I have tried several things with a Maple Mini with this GnuK and it
> behaved completely normally.

I again didn't communicate very clearly.

I actually did quite a lot of testing. I hooked the GNU debugger up to a
board through SWD, and placed breakpoints at suitable places. Of the
code I've written, I verified that it did what I expected it to do.
Correctly erase the start of flash up to the running GnuK copy. Copy the
new SYS at the start of flash. Verify that the end result is that the
first 4 KiB is byte for byte equal to the first 4 KiB of a release
1.2.11 stock GnuK firmware. Verify that on reGNUal invocation, all but
the first 4 KiB is erased and reGNUal correctly executed. Finally, at
the end, add setting of flash readout protection to the code (which
precludes debugging) and verify that flash is indeed protected. Verify
that if --with-dfu is not supplied, the result is the same as before the
patches, comparing disassembled code. Probably some more stuff. I took
my time testing.

I meant that /in addition to/ all these tests, I also did a test to see
the behaviour of everything I didn't change still appeared to be the
same.

So it was quite silly of me to only mention the latter :-).

Regards,

Peter.

-- 
I use the GNU Privacy Guard (GnuPG) in combination with Enigmail.
You can send me encrypted mail if you want some privacy.
My key is available at <http://digitalbrains.com/2012/openpgp-key-peter>

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 488 bytes
Desc: OpenPGP digital signature
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20181220/17e20c56/attachment.sig>

From wk at gnupg.org  Thu Dec 20 12:58:00 2018
From: wk at gnupg.org (Werner Koch)
Date: Thu, 20 Dec 2018 12:58:00 +0100
Subject: Distribution of binary
In-Reply-To: <8ed318e1-6048-7f1e-b2f1-fae1e30188c4@digitalbrains.com> (Peter
 Lebbing's message of "Wed, 12 Dec 2018 15:48:24 +0100")
References: <cdf4aec4-56b8-d3f6-3274-46bcca4ae088@digitalbrains.com>
 <87zhtcdc7k.fsf@iwagami.gniibe.org>
 <8ed318e1-6048-7f1e-b2f1-fae1e30188c4@digitalbrains.com>
Message-ID: <871s6cpfzr.fsf@wheatstone.g10code.de>

Hi!

On Wed, 12 Dec 2018 15:48, peter at digitalbrains.com said:

> Mini if you don't have equipment. If I can give them a Maple Mini with
> GnuK but with a VID:PID of 0000:0000, they could build their own GnuK on
> Debian stable, which is really simple, and reGNUal their design into it.

May I suggest to use 1209:2440 for such uses?

I applied for this PID (what a silly acronym given that it is used more
commonly on all operating systems for sometjhing very different) so that
we can distribute our own token as member ship card and also for the use
cases you described.  See http://pid.codes/1209/2440/.  Many thanks to
the pid.codes folks for assigning that PID.


Salam-Shalom,

   Werner

-- 
Die Gedanken sind frei.  Ausnahmen regelt ein Bundesgesetz.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 227 bytes
Desc: not available
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20181220/d18aadfb/attachment.sig>

From peter at digitalbrains.com  Thu Dec 20 14:01:44 2018
From: peter at digitalbrains.com (Peter Lebbing)
Date: Thu, 20 Dec 2018 14:01:44 +0100
Subject: Distribution of binary
In-Reply-To: <871s6cpfzr.fsf@wheatstone.g10code.de>
References: <cdf4aec4-56b8-d3f6-3274-46bcca4ae088@digitalbrains.com>
 <87zhtcdc7k.fsf@iwagami.gniibe.org>
 <8ed318e1-6048-7f1e-b2f1-fae1e30188c4@digitalbrains.com>
 <871s6cpfzr.fsf@wheatstone.g10code.de>
Message-ID: <b03a2ab6-a682-8b28-4359-9e6155bd35a1@digitalbrains.com>

Hi!

On 20/12/2018 12:58, Werner Koch wrote:
> May I suggest to use 1209:2440 for such uses?

Oh, that's a good solution, thanks! That way there's no way the FSIJ
will get sullied by people not observing their conditions.

So what should be the strings for vendor and product?

Suggestions for vendor string:
pid.codes
GnuPG e.V.
Private
None

(I mean the literal string "None")

Suggestions for product string:
GnuK Token
An OpenPGP Token

With the first product string, Niibe's udev match on product string[1]
will catch this device.

Note that the current code of GnuK will choose these strings based on a
user-supplied VID:PID. So the strings will always be the same for the
supplied VID:PID. It would require code changes to implement "If the
GnuPG e.V. is spreading them, choose that as vendor, otherwise choose
'Private'".

> I applied for this PID

Nice callback to the RFC :-).

> (what a silly acronym given that it is used more commonly on all
> operating systems for sometjhing very different)

Product, process... (production process?). It would be more descriptive
if they called them VendID and ProdID. Or name it a Device rather than a
Product.

> Many thanks to the pid.codes folks for assigning that PID.

Yes, they have my thanks as well. It's a great service they are
providing.

The USB spec should have worked with 128-bit UUID's generated by vendors
without central oversight from the get-go, if you ask me. This might
have even prevented Microsoft from creating the Microsoft OS Descriptors
as a proprietary method of not relying on the USB-IF supplied
identifiers. Then again, embrace, *extend*, extinguish, right?

Cheers,

Peter.

[1] <https://lists.gnupg.org/pipermail/gnuk-users/2018-December/000129.html>

-- 
I use the GNU Privacy Guard (GnuPG) in combination with Enigmail.
You can send me encrypted mail if you want some privacy.
My key is available at <http://digitalbrains.com/2012/openpgp-key-peter>

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 488 bytes
Desc: OpenPGP digital signature
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20181220/1a5760f6/attachment.sig>

From gniibe at fsij.org  Fri Dec 21 04:02:20 2018
From: gniibe at fsij.org (NIIBE Yutaka)
Date: Fri, 21 Dec 2018 12:02:20 +0900
Subject: Using GnuK with DFU bootloader
In-Reply-To: <40b1cbd1-81aa-069a-0c44-254cd579ff1e@digitalbrains.com>
References: <cdf4aec4-56b8-d3f6-3274-46bcca4ae088@digitalbrains.com>
 <87zhtcdc7k.fsf@iwagami.gniibe.org>
 <c70aebf9-9633-2f97-e6a0-5d7381930f2c@digitalbrains.com>
 <87bm5qgurt.fsf@fsij.org>
 <f6575692-8499-2558-9a6d-8dc288c1006c@digitalbrains.com>
 <de148aa7-dc87-54fe-e8dc-14605a5f283e@digitalbrains.com>
 <87r2ecwosg.fsf@fsij.org>
 <40b1cbd1-81aa-069a-0c44-254cd579ff1e@digitalbrains.com>
Message-ID: <87lg4jr39f.fsf@iwagami.gniibe.org>

Hello, Peter,

I cherry picked your changes into master, writing ChangeLog entries.

Peter Lebbing <peter at digitalbrains.com> wrote:
> I actually did quite a lot of testing.

Thanks a lot for your intensive testing.

I have a little concern here.

diff --git a/src/main.c b/src/main.c
index a8c80b6..04a8c9e 100644
--- a/src/main.c
+++ b/src/main.c
@@ -141,7 +141,7 @@ device_initialize_once (void)
 
         addr = ORIGIN_REAL + 0x1000;
         if (addr < ORIGIN) {
-          /* Need to patch reset vector there */
+          /* Patch vectors by vector_table??? */
           handler *new_vector = (handler *) addr;
           flash_write((uintptr_t) &new_vector[1], (const uint8_t *)
                       &vector[1], sizeof(handler));


After writing Gnuk for DFU to the board, at the first run, it writes new
SYS killing DFU, and in the code above, the reset vector is patched.

This is no problem, if a user upgrades Gnuk with reGNUal at the first
run (because, for the first run, SCR->VCR and MSP are configured by DFU,
and then configured again by old SYS).

For the second run, for me, it is more clear and clean if all vectors
are updated by vector_table of chopstx/entry.c.

Currently, it updates only the reset vector by old SYS reset routine
("old" means SYS for DFU, here).  For the second run (if any), the
control goes from new SYS:reset to old SYS:reset which again sets
SCR->VCR and MSP.  (In this transition, MSP is once set to 0xffffffff,
which is not correct.)

This sounds not great.  Well, it's acceptable, because nobody should
keep using Gnuk for DFU.


In this morning, I tried to modify the code, but I realized that the
sizeof(vector_table) is not determined at the compile time of main.c, in
the current code of chopstx/entry.c.  So, I didn't change the code.


Please make sure the second reset works well.  I mean, after writing
Gnuk for DFU (by DFU), reset (which kills DFU by new SYS), reset again,
and upgrade by reGNUal.
-- 


From peter at digitalbrains.com  Sat Dec 22 15:05:12 2018
From: peter at digitalbrains.com (Peter Lebbing)
Date: Sat, 22 Dec 2018 15:05:12 +0100
Subject: Using GnuK with DFU bootloader
In-Reply-To: <87lg4jr39f.fsf@iwagami.gniibe.org>
References: <cdf4aec4-56b8-d3f6-3274-46bcca4ae088@digitalbrains.com>
 <87zhtcdc7k.fsf@iwagami.gniibe.org>
 <c70aebf9-9633-2f97-e6a0-5d7381930f2c@digitalbrains.com>
 <87bm5qgurt.fsf@fsij.org>
 <f6575692-8499-2558-9a6d-8dc288c1006c@digitalbrains.com>
 <de148aa7-dc87-54fe-e8dc-14605a5f283e@digitalbrains.com>
 <87r2ecwosg.fsf@fsij.org>
 <40b1cbd1-81aa-069a-0c44-254cd579ff1e@digitalbrains.com>
 <87lg4jr39f.fsf@iwagami.gniibe.org>
Message-ID: <26c8c375-536c-bd8e-8afb-7746ccc2f777@digitalbrains.com>

Hello Niibe!

On 21/12/2018 04:02, NIIBE Yutaka wrote:
> This sounds not great.  Well, it's acceptable, because nobody should
> keep using Gnuk for DFU.

I think it's fine to just use the GnuK that was uploaded through DFU.
The bootloader is erased and readout protection enabled, it should be as
safe as a normal bare-programmed GnuK.

> In this morning, I tried to modify the code, but I realized that the
> sizeof(vector_table) is not determined at the compile time of main.c, in
> the current code of chopstx/entry.c.  So, I didn't change the code.

I don't think it's necessary (see further mail), but as an aside: it
would still be possible by using an undefined symbol, and having the
linker fill in that symbol with the correct data. If you don't have a
custom linker script yet, it's cumbersome, because then you do need it.
But you already have a custom linker script, so it's easy.

> Please make sure the second reset works well.  I mean, after writing
> Gnuk for DFU (by DFU), reset (which kills DFU by new SYS), reset again,
> and upgrade by reGNUal.

I tried that, and it seems to work fine. I did now also notice the
unintended behaviour with regard to MSP, but it doesn't change run-time
behaviour.

I somehow hadn't realized it was loading the initial MSP from 0x8001000.
This appears to be harmless because it is overwritten with the correct
value very soon after, before it is ever used. But I fixed it and in the
following discussion, I will describe the fixed behaviour, because the
subject matter is already complicated enough without discussing this as
well.

It might be there's some confusion with all the vector tables while
trying to understand the code flow.

First, for easy reference, let's show the vector tables for a
bare-programmed GnuK:

0x8000000 sys-stm32f103.c::vector
0x8001000 chopstx/entry.c::vector_table

On with the DFU stuff. The smallest DFU bootloader possible with this
code would be 4 KiB long, hence it would locate the user code at
0x8001000. If it would locate before that, the DFU-mode GnuK would be
overwriting itself with the new SYS. We distinguish two cases: DFU-mode
GnuK is at 0x8001000 or it is at a higher address.

First, let's take the, as far as I'm aware, hypothetical situation we
have a bootloader only 4 KiB large, and it loads user code at 0x8001000.
We have the following tables:

0x8000000 stdaln-sys.elf::vector
0x8001000 sys-stm32f103.c::vector
0x8002000 chopstx/entry.c::vector_table

The latter two are from the DFU-mode GnuK, only the range
0x8000000-0x8000fff comes from stdaln-sys.elf.

When the Maple Mini boots, it ends up in stdaln-sys.elf::reset. This
sets SCR->VCR as it would be for a bare-programmed Maple Mini. It then
loads MSP with vector[0] at 0x8001000, but this is equal to the initial
MSP at reset, so it is a no-operation. It seems unavoidable because we
need the first 4 KiB to be exactly equal to a bare-programmed chip so we
can reGNUal a normal GnuK into it later.[1] It then jumps to
sys-stm32f103.c::reset from the vector table at 0x8001000, which again
modifies SCR->VCR and MSP to be correct for a GnuK at that origin
(0x8001000). In fact, it just overwrites the actions of
stdaln-sys.elf::reset, and correctly sets the initial MSP from
vector_table[0]. Finally, it jumps to chopstx/entry.c::entry, which it
got from vector_table[1] in the table at 0x8002000.  After the jump to
sys-stm32f103.c::reset, no code from stdaln-sys.elf will ever run again,
until we do a reGNUal. And only sys-stm32f103.c::vector and
chopstx/entry.c::vector_table are ever used during further running.

We need to have the whole of stdaln-sys.elf unmodified at the first 4
KiB, because that's what we rely on if ever we update the GnuK with
reGNUal. But it only runs a few lines of code at first bootup, whose
actions even get nullified by the code that runs after.

Now the other situation, where the bootloader is larger than 4 KiB.
Let's say it loads code at 0x8002000. This is correct for the Maple
Mini. Then we have the following tables:

0x8000000 stdaln-sys.elf::vector
0x8002000 sys-stm32f103.c::vector
0x8003000 chopstx/entry.c::vector_table

This is where that line of code we're discussing kicks in. The processor
boots, it goes to stdaln-sys.elf::reset, and all that code does is set
up SCR->VCR, load MSP from 0x8001000 and jump to the address at
0x8001004. Oops. That page is blank. So, I put the address of
sys-stm32f103.c::reset at 0x8001004 so it goes right. And with the new
fix, it gets the proper initial MSP. Once we end up in
sys-stm32f103.c::reset, the only vector tables that will ever be used
are sys-stm32f103.c::vector at 0x8002000 (!) and
choptx/entry.c::vector_table at 0x8003000. Only a few cycles after cpu
reset will anything in 0x8001000 be used. Only stdaln-sys.elf::reset
runs, which reads the first two vectors. During further running, ORIGIN
is set to 0x8002000, which is higher than that.

The SYS at the start of the memory might need vector_table at 0x8001000,
but it never runs again until reGNUal, and then only
flash_erase_all_and_exec() runs. I did assume flash_erase_all_and_exec()
would never need the vector_table, seeing how it is erasing all memory
but the first 4 KiB, which includes vector_table and currently all
entries in it. 

But the SYS at 0x8002000 and the GnuK at 0x8003000 never refer to
anything at 0x8001000, so there is no need to put a vector table there.

If you expect SYS ever to be using vector_table even before it jumps to
chopstx/entry.c::entry, then yes, we have a problem. Faults and
interrupts that occur in sys-stm32f103.c::reset will for a short time
have a bogus vector table (currently interrupts are disabled, so there's
no problem). However, any such code would have to be considered well
anyway because it mixes code linked at different ORIGINs, and that might
be a recipe for disaster. Since it is currently not used and would
require special attention due to mixed ORIGINs if it were ever used, I
didn't think copying the vector table was called for.

But as long as sys-stm32f103.c::reset is as lean as it is now, there's
no problem. As soon as chopstx/entry.c::entry is entered all vectors are
fully correct, and only code from the high ORIGIN ever runs.

I thought it rather unlikely sys-stm32f103.c::reset would ever get so
heavyweight as to need interrupts, seeing how it is now.

I fixed the issue with the wrong MSP for a DFU larger than 4 KiB in
commit ca3312eb253e6a523e01b64903ebb08d336218ec. Since the MSP was
overwritten with the correct value before anything used the stack, the
original code ran fine. Interrupts were disabled until well after MSP
was correct.

I also added a reset after flash_protect(). The flash programming manual
says:
>The read protection is activated by setting the RDP option byte and
>then, by applying a system reset to reload the new RDP option byte.
so it's probably better to add that reset.

Incidentally, I also fixed two clean targets in the next commit,
b57c33c204f7fc5c04aab7b2ffd0f7e0bfdc78ea. It's a tiny change. Both can
be found in [2].

If you would still like to have all of vector_table at 0x8001000 (but
with the reset vector patched to sys-stm32f103.c::reset), I could write
that as well.

Also, I was happy to discover that actually, the boards I bought to
perhaps be handed out to some people at the 35C3 /do/ have the small
STM32duino bootloader that is required for GnuK in DFU-mode! Up until
now, I had been testing with an old board revision I bought in May 2017.
It turns out that in the boards I ordered a few weeks ago they updated
the bootloader (the schematic is unchanged, but they did change the
board, it now uses a micro-USB connector rather than mini-USB).

Regards,

Peter.

[1] Perhaps you could make it so a DFU-programmed GnuK can only ever be
updated with a --with-dfu configured GnuK, then the restriction could be
weakened if this ever becomes necessary.

[2] <https://gitlab.com/DigitalBrains1/gnuk/tree/dfu-fix>

-- 
I use the GNU Privacy Guard (GnuPG) in combination with Enigmail.
You can send me encrypted mail if you want some privacy.
My key is available at <http://digitalbrains.com/2012/openpgp-key-peter>

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 488 bytes
Desc: OpenPGP digital signature
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20181222/eef428e0/attachment.sig>

From peter at digitalbrains.com  Sat Dec 22 15:15:01 2018
From: peter at digitalbrains.com (Peter Lebbing)
Date: Sat, 22 Dec 2018 15:15:01 +0100
Subject: Distribution of binary
In-Reply-To: <875zvxdki0.fsf@fsij.org>
References: <cdf4aec4-56b8-d3f6-3274-46bcca4ae088@digitalbrains.com>
 <87zhtcdc7k.fsf@iwagami.gniibe.org>
 <8ed318e1-6048-7f1e-b2f1-fae1e30188c4@digitalbrains.com>
 <877egegtw6.fsf@fsij.org>
 <9b3783be-d288-ef12-c453-85ab3ea8708d@digitalbrains.com>
 <875zvxdki0.fsf@fsij.org>
Message-ID: <9ae823fd-8eeb-a09e-f243-55a8ce2088bd@digitalbrains.com>

Hello Niibe!

On 14/12/2018 01:23, NIIBE Yutaka wrote:
>   (c) Selling it at eBay (or equivalent).
> 
> If it will happen, the step (c) violates the assumption of experimental
> personal use, and it will put FSIJ into difficult situation about their
> management of VID.  I'd say that the step (c) constitutes a distribution
> of binary, if I were a lawyer.

Yes, that would be bad. If we could quickly decide on the proper
vendor/product strings for VID:PID 1209:2440, I can simply tell anyone
interested to use that.

I don't even know if I'll be giving anybody a board :-). I mean, I'm not
going to walk around with a sign with a big arrow that says "free GnuKs
for experiments available here" :-).

Regards,

Peter.

[1] <https://lists.gnupg.org/pipermail/gnuk-users/2018-December/000132.html>
[2] <https://lists.gnupg.org/pipermail/gnuk-users/2018-December/000133.html>

-- 
I use the GNU Privacy Guard (GnuPG) in combination with Enigmail.
You can send me encrypted mail if you want some privacy.
My key is available at <http://digitalbrains.com/2012/openpgp-key-peter>

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 488 bytes
Desc: OpenPGP digital signature
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20181222/3465660f/attachment.sig>

From peter at digitalbrains.com  Sun Dec 23 12:41:37 2018
From: peter at digitalbrains.com (Peter Lebbing)
Date: Sun, 23 Dec 2018 12:41:37 +0100
Subject: Using GnuK with DFU bootloader
In-Reply-To: <87lg4jr39f.fsf@iwagami.gniibe.org>
References: <cdf4aec4-56b8-d3f6-3274-46bcca4ae088@digitalbrains.com>
 <87zhtcdc7k.fsf@iwagami.gniibe.org>
 <c70aebf9-9633-2f97-e6a0-5d7381930f2c@digitalbrains.com>
 <87bm5qgurt.fsf@fsij.org>
 <f6575692-8499-2558-9a6d-8dc288c1006c@digitalbrains.com>
 <de148aa7-dc87-54fe-e8dc-14605a5f283e@digitalbrains.com>
 <87r2ecwosg.fsf@fsij.org>
 <40b1cbd1-81aa-069a-0c44-254cd579ff1e@digitalbrains.com>
 <87lg4jr39f.fsf@iwagami.gniibe.org>
Message-ID: <186cec82-7a91-a4da-ca6f-41dfd8cc22ec@digitalbrains.com>

Hello Niibe!

On 21/12/2018 04:02, NIIBE Yutaka wrote:
> I cherry picked your changes into master, writing ChangeLog entries.

That's great, thanks a lot! And thanks for doing it so fast!

(I was so focussed on the issue I forgot to thank you earlier... I
apologize for that.)

Regards,

Peter.

-- 
I use the GNU Privacy Guard (GnuPG) in combination with Enigmail.
You can send me encrypted mail if you want some privacy.
My key is available at <http://digitalbrains.com/2012/openpgp-key-peter>

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 488 bytes
Desc: OpenPGP digital signature
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20181223/d9f8f3dd/attachment.sig>

From avamander at gmail.com  Sun Dec 23 12:53:51 2018
From: avamander at gmail.com (Avamander)
Date: Sun, 23 Dec 2018 13:53:51 +0200
Subject: U2F and nRF52840
Message-ID: <CAPLrxsEPpDUqJGdPkGT7QrZ93mCHwtG8UZ9bcKq3joE2DQ+hiA@mail.gmail.com>

Hello

As I was kindly informed by Niibe Yutaka that he doesn't have time for
answering questions in private non-encrypted e-mail and that I should ask
here instead, so I'm going to ask here, I hope that's fine.

My first question was about U2F. As far as I could see, client certificate
TLS authentication isn't widespread enough, the biggest deployment probably
being Estonian ID card authentication which isn't private at all, this
leaves pretty much only U2F on the table if I want something a bit more
secure (than just TOTP), correct? A while ago Niibe wrote that U2F is not
worth (for him) to integrate into Gnuk, a year has passed, could the
assessment have changed? If not, how (in)compatible is the current code
with a possible U2F/UAF implementation?

Second question was about porting Gnuk to other MCUs, is there a guide
available somewhere? Or just some general architectural overview? I'd love
to get/make Gnuk run on nRF52840 (and possibly get some functionality run
over NFC/BT).




Yours sincerely
Avamander
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20181223/6ee2c1d8/attachment.html>

From pablo1 at mailbox.org  Sun Dec 23 13:34:15 2018
From: pablo1 at mailbox.org (Pablo Ovelleiro Corral)
Date: Sun, 23 Dec 2018 13:34:15 +0100
Subject: Where to buy 128K st-links?
Message-ID: <20181223123415.aitpxwk4jkxejo4g@kartoffel.localdomain>


Hi,

I have seen this post outlining how to run gnuk on a st-link device:
https://blog.danman.eu/2-usb-crypto-token-for-use-with-gpg-and-ssh/

I would like to build one of those myself, but the problem seems to be
to find the correct st-link device.

There are a lot of sellers, but some of those keys seem to have a
different version of the STM32 chip with only 64K. The one needed has
a 128K flash chip on it. Most sellers don't specify the exact chip in
the device, so it's a suprise what you get.

Can anybody link me to a suppliers of those chips that delivers the
128K flash version? Has anybody build this and can share his
experieces and where he got the device?

Cheers,

Pablo

-- 
Pablo Ovelleiro Corral
Web: http://pablo.tools
XMPP: pablo1 at mailbox.org
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 833 bytes
Desc: not available
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20181223/d2f40e03/attachment.sig>

From mike at sowbug.com  Sun Dec 23 16:55:57 2018
From: mike at sowbug.com (Mike Tsao)
Date: Sun, 23 Dec 2018 07:55:57 -0800
Subject: Where to buy 128K st-links?
In-Reply-To: <20181223123415.aitpxwk4jkxejo4g@kartoffel.localdomain>
References: <20181223123415.aitpxwk4jkxejo4g@kartoffel.localdomain>
Message-ID: <CACi+kjoD4UA2BtOQT=Nihaei9X497MPfOjooy-Ec-dQP7o9+zQ@mail.gmail.com>

They're all 128K. See https://wiki.stm32duino.com/index.php?title=Blue_Pill
for one discussion.

If you use stlink to program, you need a version that knows the chip is
128K: https://lists.gnupg.org/pipermail/gnuk-users/2018-February/000019.html

On Sun, Dec 23, 2018, 6:19 AM Pablo Ovelleiro Corral <pablo1 at mailbox.org>
wrote:

>
> Hi,
>
> I have seen this post outlining how to run gnuk on a st-link device:
> https://blog.danman.eu/2-usb-crypto-token-for-use-with-gpg-and-ssh/
>
> I would like to build one of those myself, but the problem seems to be
> to find the correct st-link device.
>
> There are a lot of sellers, but some of those keys seem to have a
> different version of the STM32 chip with only 64K. The one needed has
> a 128K flash chip on it. Most sellers don't specify the exact chip in
> the device, so it's a suprise what you get.
>
> Can anybody link me to a suppliers of those chips that delivers the
> 128K flash version? Has anybody build this and can share his
> experieces and where he got the device?
>
> Cheers,
>
> Pablo
>
> --
> Pablo Ovelleiro Corral
> Web: http://pablo.tools
> XMPP: pablo1 at mailbox.org
> _______________________________________________
> Gnuk-users mailing list
> Gnuk-users at gnupg.org
> https://lists.gnupg.org/mailman/listinfo/gnuk-users
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20181223/787f39e1/attachment.html>

From peter at digitalbrains.com  Sun Dec 23 17:40:50 2018
From: peter at digitalbrains.com (Peter Lebbing)
Date: Sun, 23 Dec 2018 17:40:50 +0100
Subject: Where to buy 128K st-links?
In-Reply-To: <CACi+kjoD4UA2BtOQT=Nihaei9X497MPfOjooy-Ec-dQP7o9+zQ@mail.gmail.com>
References: <20181223123415.aitpxwk4jkxejo4g@kartoffel.localdomain>
 <CACi+kjoD4UA2BtOQT=Nihaei9X497MPfOjooy-Ec-dQP7o9+zQ@mail.gmail.com>
Message-ID: <88d6c10f-b4ab-2f36-1be0-c8ec89bce032@digitalbrains.com>

Hi,

First of all, Pablo, thanks for the interesting link :-).

On 23/12/2018 16:55, Mike Tsao wrote:
> They're all 128K. See
> https://wiki.stm32duino.com/index.php?title=Blue_Pill for one
> discussion. 

The blog post mentions the chip is a STM32F101CBT6. Note the one instead
of a three. But it goes on to mention others had found out they might
well just be a 103 on the inside.

Even though the mentioned 101 is advertised as having 128 KiB flash, it
is advertised as having 16 KiB of RAM instead of the 103's 20 KiB. Now,
it might be this is again untrue, but it might lead to trouble if it
really ends at 16 KiB.

I just looked at a compile with master,
./configure --vidpid=234b:0000 --target=ST_DONGLE --enable-factory-reset --enable-certdo
and the heap starts at just over 10 KiB. That means you can allocate a
bit less than 6 KiB of data before it will crash horribly ;-). I have no
idea how much RAM is allocated on the heap by GnuK, but it could lead to
trouble. Possibly quicker when a reGNUal is attempted...

It would be interesting to confirm some RAM sizes on some of these
devices. Not by looking at configuration registers, but by just writing
and reading data (mind any aliasing of addresses, though).

My 2 cents,

Peter.

-- 
I use the GNU Privacy Guard (GnuPG) in combination with Enigmail.
You can send me encrypted mail if you want some privacy.
My key is available at <http://digitalbrains.com/2012/openpgp-key-peter>

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 488 bytes
Desc: OpenPGP digital signature
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20181223/23575deb/attachment.sig>

From wk at gnupg.org  Sun Dec 23 20:49:34 2018
From: wk at gnupg.org (Werner Koch)
Date: Sun, 23 Dec 2018 20:49:34 +0100
Subject: Distribution of binary
In-Reply-To: <9ae823fd-8eeb-a09e-f243-55a8ce2088bd@digitalbrains.com> (Peter
 Lebbing's message of "Sat, 22 Dec 2018 15:15:01 +0100")
References: <cdf4aec4-56b8-d3f6-3274-46bcca4ae088@digitalbrains.com>
 <87zhtcdc7k.fsf@iwagami.gniibe.org>
 <8ed318e1-6048-7f1e-b2f1-fae1e30188c4@digitalbrains.com>
 <877egegtw6.fsf@fsij.org>
 <9b3783be-d288-ef12-c453-85ab3ea8708d@digitalbrains.com>
 <875zvxdki0.fsf@fsij.org>
 <9ae823fd-8eeb-a09e-f243-55a8ce2088bd@digitalbrains.com>
Message-ID: <87muowkoq9.fsf@wheatstone.g10code.de>

On Sat, 22 Dec 2018 15:15, peter at digitalbrains.com said:

> Yes, that would be bad. If we could quickly decide on the proper
> vendor/product strings for VID:PID 1209:2440, I can simply tell anyone

Linux already has a list of vendors, so the VID should not be a problem.
For 2440 I would suggest "An OpenPGP Token" to keep it flexible.


Salam-Shalom,

   Werner

-- 
Die Gedanken sind frei.  Ausnahmen regelt ein Bundesgesetz.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 227 bytes
Desc: not available
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20181223/dc19312f/attachment.sig>

From peter at digitalbrains.com  Sun Dec 23 21:42:26 2018
From: peter at digitalbrains.com (Peter Lebbing)
Date: Sun, 23 Dec 2018 21:42:26 +0100
Subject: Distribution of binary
In-Reply-To: <87muowkoq9.fsf@wheatstone.g10code.de>
References: <cdf4aec4-56b8-d3f6-3274-46bcca4ae088@digitalbrains.com>
 <87zhtcdc7k.fsf@iwagami.gniibe.org>
 <8ed318e1-6048-7f1e-b2f1-fae1e30188c4@digitalbrains.com>
 <877egegtw6.fsf@fsij.org>
 <9b3783be-d288-ef12-c453-85ab3ea8708d@digitalbrains.com>
 <875zvxdki0.fsf@fsij.org>
 <9ae823fd-8eeb-a09e-f243-55a8ce2088bd@digitalbrains.com>
 <87muowkoq9.fsf@wheatstone.g10code.de>
Message-ID: <5947c1d1-5a95-106f-040e-0a653aeb5ea8@digitalbrains.com>

Hello Werner!

On 23/12/2018 20:49, Werner Koch wrote:
> Linux already has a list of vendors, so the VID should not be a problem.
> For 2440 I would suggest "An OpenPGP Token" to keep it flexible.

ACK on the product string. But the device needs to report a string to
the computer with the vendor in it. The vendor list used by Linux says
> 1209  InterBiometrics
because that is the original owner of the VID. It seems weird to have
the device report that... I think it is technically completely compliant
to not report a vendor string at all, but this would need source code
changes to drop the reference to the string. I don't know whether an
empty string (rather than no string) is compliant.

(Note that Linux currently does not name the GnuK at all, since it has
no entry for the FSIJ VID at all. However, the strings reported by the
device itself are "Free Software Initiative of Japan"/"Gnuk Token".)

Cheers,

Peter.

-- 
I use the GNU Privacy Guard (GnuPG) in combination with Enigmail.
You can send me encrypted mail if you want some privacy.
My key is available at <http://digitalbrains.com/2012/openpgp-key-peter>

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 488 bytes
Desc: OpenPGP digital signature
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20181223/048eb7e8/attachment.sig>

From gniibe at fsij.org  Wed Dec 26 05:19:12 2018
From: gniibe at fsij.org (NIIBE Yutaka)
Date: Wed, 26 Dec 2018 13:19:12 +0900
Subject: Chopstx 1.13 and FST-01SZ
In-Reply-To: <87o99gsviu.fsf@iwagami.gniibe.org>
References: <87o99gsviu.fsf@iwagami.gniibe.org>
Message-ID: <8736qk2a4f.fsf@iwagami.gniibe.org>

Hello,

FST-01SZ, which is now in production, uses a bit of different connector
(than its prototype).  This version has four slits in the bottom side.
I think that the purpose of change is to reduce materials.

I put the datasheet as:

    fst-01/datasheet/ZL-272-variant.pdf

But... it seems that... it looks like they (a company in Dong Guang,
next to ShenZhen) use competitor's manufacturer product number, although
it's a bit different.  This is confusing.  I wish the quality is good.
-- 


From gniibe at fsij.org  Wed Dec 26 06:53:58 2018
From: gniibe at fsij.org (NIIBE Yutaka)
Date: Wed, 26 Dec 2018 14:53:58 +0900
Subject: Using GnuK with DFU bootloader
In-Reply-To: <26c8c375-536c-bd8e-8afb-7746ccc2f777@digitalbrains.com>
References: <cdf4aec4-56b8-d3f6-3274-46bcca4ae088@digitalbrains.com>
 <87zhtcdc7k.fsf@iwagami.gniibe.org>
 <c70aebf9-9633-2f97-e6a0-5d7381930f2c@digitalbrains.com>
 <87bm5qgurt.fsf@fsij.org>
 <f6575692-8499-2558-9a6d-8dc288c1006c@digitalbrains.com>
 <de148aa7-dc87-54fe-e8dc-14605a5f283e@digitalbrains.com>
 <87r2ecwosg.fsf@fsij.org>
 <40b1cbd1-81aa-069a-0c44-254cd579ff1e@digitalbrains.com>
 <87lg4jr39f.fsf@iwagami.gniibe.org>
 <26c8c375-536c-bd8e-8afb-7746ccc2f777@digitalbrains.com>
Message-ID: <87wonwzvd5.fsf@iwagami.gniibe.org>

Hello Peter,

Thanks for your fixes.  I merged and released Gnuk 1.2.13.

	tag release/1.2.13
	Tagger: NIIBE Yutaka <gniibe at fsij.org>
	Date:   Wed Dec 26 14:14:23 2018 +0900
	commit b7368e41e9d15f3f1d25572a8dc3bf53bfa95723

> It might be there's some confusion with all the vector tables while
> trying to understand the code flow.

Yes.  It's complicated.

> I also added a reset after flash_protect(). The flash programming manual
> says:
>>The read protection is activated by setting the RDP option byte and
>>then, by applying a system reset to reload the new RDP option byte.
> so it's probably better to add that reset.

IIUC, it is recommended to have power off -> power on cycle, when we
change the RDB option byte.  Perhaps, I am confused about the case of
mass erase.

Anyway, for this particular case, I thik that it is recommended to have
power off -> power on cycle, after the first run (which kills DFU).

As I added a comment in the commit log, we should know that this reset
event in the first run uses old RESET vector.  This does not go through
newly written SYS.  Thus, the VCR register keeps its old value.  When
there is no power cycle, after reGNUal's reset, it might go wrong place.

> Incidentally, I also fixed two clean targets in the next commit,
> b57c33c204f7fc5c04aab7b2ffd0f7e0bfdc78ea. It's a tiny change. Both can
> be found in [2].

Thank you.  All merged.

> Also, I was happy to discover that actually, the boards I bought to
> perhaps be handed out to some people at the 35C3 /do/ have the small
> STM32duino bootloader that is required for GnuK in DFU-mode! Up until
> now, I had been testing with an old board revision I bought in May 2017.
> It turns out that in the boards I ordered a few weeks ago they updated
> the bootloader (the schematic is unchanged, but they did change the
> board, it now uses a micro-USB connector rather than mini-USB).

It seems that it's common in China.  I hope they change MPN
(manufacturer part number), when having such changes (hardware-wise or
firmware-wise), so that a user can distinguish changes.
-- 


From gniibe at fsij.org  Wed Dec 26 07:55:47 2018
From: gniibe at fsij.org (NIIBE Yutaka)
Date: Wed, 26 Dec 2018 15:55:47 +0900
Subject: U2F and nRF52840
In-Reply-To: <CAPLrxsEPpDUqJGdPkGT7QrZ93mCHwtG8UZ9bcKq3joE2DQ+hiA@mail.gmail.com>
References: <CAPLrxsEPpDUqJGdPkGT7QrZ93mCHwtG8UZ9bcKq3joE2DQ+hiA@mail.gmail.com>
Message-ID: <87k1jwzsi4.fsf@iwagami.gniibe.org>

Hello,

Please note that Gnuk is a firmware which supports OpenPGP card
protocol.  With its capability of three private keys, OpenPGP card
supports digital signature, encryption, and authentication.  Speaking
about authentication, we can put SSH key, by its authentication feature.

Avamander <avamander at gmail.com> wrote:
> My first question was about U2F. As far as I could see, client certificate
> TLS authentication isn't widespread enough, the biggest deployment probably
> being Estonian ID card authentication which isn't private at all, this
> leaves pretty much only U2F on the table if I want something a bit more
> secure (than just TOTP), correct?

I don't know about current situation of web authentication well.
Currently, I don't use any services which use/require U2F.  I think that
client certificate TLS authentication is still good, when it is our own
server.

We have (very experimental) software for OpenPGP card, called Scute,
which enables client certificate TLS authentication with the card/token.

Once, around 2012, I used Scute with Gnuk Token to be authenticated by
my own OpenID server, so that I could login to other services with
OpenID.  Unfortunately, OpenID hasn't become popular enough.


If I will need to use U2F, I will implement another firmware software
using some parts of Gnuk (USB, CCID, and Crypto).

That's because, for me, the use cases sound very different.  For typical
use cases of OpenPGP card, it's your encrypted resources, to be
accessed.  Or you are going make digital signature for your data in your
control.  For web authentication with U2F, it is some external service
provider, who asks your identity with a dongle.  It seems for me that
it's not good idea to use a single device (or single software) for both
use cases.

> If not, how (in)compatible is the current code with a possible U2F/UAF
> implementation?

Crypto routines can be reused.  The USB protocol, CCID, is same.  (CCID
protocol is the protocol of card reader.)  Application layer is
different.

> Second question was about porting Gnuk to other MCUs, is there a guide
> available somewhere?

I don't know about such a guide.  Last year, Aurelien Jarno did some
work for STM32L432.

> I'd love to get/make Gnuk run on nRF52840 (and possibly get some
> functionality run over NFC/BT).

Use of wireless technology requires another encryption.  And, I just
found that nRF52840 comes with hardware crypto accelerator.

Well, while some keywords are some, I feel that we are taling about
somehow different topics.  For Gnuk, I'm talking about ... something
like a bicycle which I can control using my own skill and my own energy.
I'm afraid you are talking about something like luxury automatic car.

Gnuk doen't depend on any hardware crypto accelerator.  This is on
purpose.  It is important for Gnuk to minimize attack surface.  A
hardware crypto accelerator by semiconductor vendor, which is difficult
to examine by its users, can bring possible attack vectors.  In many
cases, development with a hardware crypto accelerator might require NDA,
which can bring another type attack vector (say, of social engineering).
-- 


From peter at digitalbrains.com  Fri Dec 28 20:08:13 2018
From: peter at digitalbrains.com (Peter Lebbing)
Date: Fri, 28 Dec 2018 20:08:13 +0100
Subject: Using GnuK with DFU bootloader
In-Reply-To: <87wonwzvd5.fsf@iwagami.gniibe.org>
References: <cdf4aec4-56b8-d3f6-3274-46bcca4ae088@digitalbrains.com>
 <87zhtcdc7k.fsf@iwagami.gniibe.org>
 <c70aebf9-9633-2f97-e6a0-5d7381930f2c@digitalbrains.com>
 <87bm5qgurt.fsf@fsij.org>
 <f6575692-8499-2558-9a6d-8dc288c1006c@digitalbrains.com>
 <de148aa7-dc87-54fe-e8dc-14605a5f283e@digitalbrains.com>
 <87r2ecwosg.fsf@fsij.org>
 <40b1cbd1-81aa-069a-0c44-254cd579ff1e@digitalbrains.com>
 <87lg4jr39f.fsf@iwagami.gniibe.org>
 <26c8c375-536c-bd8e-8afb-7746ccc2f777@digitalbrains.com>
 <87wonwzvd5.fsf@iwagami.gniibe.org>
Message-ID: <977d88f3-a298-ba83-8c49-48283f3b7a21@digitalbrains.com>

Hello Niibe!

On 26/12/2018 06:53, NIIBE Yutaka wrote:
> Thanks for your fixes.  I merged and released Gnuk 1.2.13.

Thank you, it's much appreciated!

> As I added a comment in the commit log, we should know that this reset
> event in the first run uses old RESET vector.  This does not go through
> newly written SYS.  Thus, the VCR register keeps its old value.  When
> there is no power cycle, after reGNUal's reset, it might go wrong place.

I've been investigating this when I had free time during the congress.

I think that it's not the case that the NVIC system reset actually uses
a relocated vector table to find the reset vector! It is my
interpretation that on NVIC system reset, the VCR register is cleared to
default and the vector at 0x0000 0004 and MSP at 0x0000 0000 are taken.
I've found statements on reset and reset vector in the following
sections:

Programming Manual (PM0056):
- Page 15 -> Stack pointer and Program counter
- Page 32 -> Reset
- Page 15 -> Directly below figure
- Page 133 -> Vector table offset register reset value
Reference manual (RM0008):
- Page 90 -> System reset ("resets all registers to their reset values
  except...") and they explicitly group 'Software reset' under this type
  of reset.

And this is also what seems to happen when nvic_system_reset() is
invoked from device_initialize_once(), as the following gdb trace seems
to indicate. Now, debugging over reset is a bit funky, openocd drops the
connection for a moment (fraction of a second), but the program counter
when it picks up again is where it would be for the vector at
0x0000 0004.

The break at 0x80031d8 is at main.c:154, the call to nvic_system_reset
from device_initialize_once(). I show all the various vector tables, and
then single-step over the reset instruction. What we see is that openocd
regains control at 0x8000272, which is only referenced from the table at
0x8000000. So it appears that is the table that is used, i.e., VCR is
cleared before the reset vector is looked up.

While reading, keep a close eye on the hexadecimal address of a
function. Since there are sys-stmf103.o's at both 0x8000000 and
0x8002000, the labels are ambiguous and you need the address to know
which of those it refers to.

--8<---------------cut here---------------start------------->8---
$ arm-none-eabi-gdb --eval-command="target remote :3333" build/gnuk.elf
GNU gdb (7.12-6+9+b2) 7.12.0.20161007-git
[...]
Reading symbols from build/gnuk.elf...done.
Remote debugging using :3333
0x080000f0 in ?? ()
(gdb) add-symbol-file build/stdaln-sys.elf 0x8000000
add symbol table from file "build/stdaln-sys.elf" at
        .text_addr = 0x8000000
(y or n) y
Reading symbols from build/stdaln-sys.elf...warning: section .text not found in /home/peter/src/arm/gnuk/src/build/stdaln-sys.elf
done.
(gdb) break *0x80031d8
Breakpoint 1 at 0x80031d8: file ../chopstx/mcu/sys-stm32f103.h, line 119.
(gdb) continue
Continuing.
Note: automatically using hardware breakpoints for read-only addresses.

Breakpoint 1, 0x080031d8 in nvic_system_reset ()
    at ../chopstx/mcu/sys-stm32f103.h:119
119       (func) ();
(gdb) display/i $pc
1: x/i $pc
=> 0x80031d8 <main+232>:        blx     r3
(gdb) display/a $msp
2: /a $msp = 0x20000060 <main_base+96>
(gdb) x/a 0xe000ed00 + 8
0xe000ed08:     0x8003000 <vector_table>
(gdb) x/2a 0x8000000
0x8000000 <vector>:     0x20005000      0x8000271 <reset>
(gdb) x/2a 0x8001000
0x8001000:      0x20000060 <main_base+96>       0x8002271 <reset>
(gdb) x/2a 0x8002000
0x8002000 <vector>:     0x20005000      0x8002271 <reset>
(gdb) x/2a 0x8003000
0x8003000 <vector_table>:       0x20000060 <main_base+96>       0x8003491 <entry>
(gdb) si 6
0x08002260      309       SCB->AIRCR = (0x05FA0000 | (SCB->AIRCR & 0x70) | SCB_AIRCR_SYSRESETREQ);
1: x/i $pc
=> 0x8002260 <nvic_system_reset+12>:    str     r3, [r1, #12]
2: /a $msp = 0x20000060 <main_base+96>
(gdb) si
0x08000272 in reset () at ../chopstx/mcu/sys-stm32f103.c:323
323       asm volatile ("cpsid  i\n\t"          /* Mask all interrupts. */
1: x/i $pc
=> 0x8000272 <reset+2>: ldr     r0, [pc, #32]   ; (0x8000294 <reset+36>)
2: /a $msp = 0x20005000
(gdb) 
--8<---------------cut here---------------end--------------->8---

OpenOCD complains on that (last) "si" above:

--8<---------------cut here---------------start------------->8---
Info : SWD IDCODE 0x1ba01477
Error: Failed to read memory at 0xfffff000
--8<---------------cut here---------------end--------------->8---

I don't know why that error is there. It has something to do with a
reset during a debugging session.

So... I think the VCR register contents don't matter on invoking
nvic_system_reset().

Also, I think that if a "reset" call from a bare-programmed GnuK works,
then a "reset" call from a DFU-programmed GnuK should work as well. On a
bare-programmed GnuK, it would take these vectors if VCR were unchanged:

--8<---------------cut here---------------start------------->8---
(gdb) x/a 0xe000ed00 + 8
0xe000ed08:     0x8001000 <vector_table>
(gdb) x/2a 0x8001000
0x8001000 <vector_table>:       0x20000060 <main_base+96>       0x80013f1 <entry>
--8<---------------cut here---------------end--------------->8---

That's no different than a DFU-programmed GnuK taking the vectors at
0x8003000: they would both skip setting up the VCR and take the correct
MSP directly from the vector table, and continue running in the main
application.

However, current GnuK doesn't ever invoke nvic_system_reset() AFAIK.
reGNUal does, and actually has VCR pointing into the SRAM when it calls
nvic_system_reset(). Again, this is a moot point since VCR is not used.
I investigated the reGNUal reset and it goes fine as well.

> It seems that it's common in China.  I hope they change MPN
> (manufacturer part number), when having such changes (hardware-wise or
> firmware-wise), so that a user can distinguish changes.

I think they handled it pretty well. The silkscreen of the board clearly
indicates a new board revision. The AliExpress product ID is the same.
The old "item specifics" didn't mention a model number, but the new one
has the new board revision as the model number now. The product pictures
clearly show a new board with a new board revision code clearly visible
in the silkscreen. And the new bootloader is compatible with the old
bootloader in usage, so it's a very welcome improvement that they now
flash the more advanced bootloader STM32duino-bootloader. They had one
omission: the product text still says you need a mini-B cable. I alerted
them to this and they said they would change the text.

I agree it could be even better, but at the price point they sell them
at, you really can't realistically expect everything to be best of
industry :-).

I hope this clears up some more details!

Regards,

Peter.

-- 
I use the GNU Privacy Guard (GnuPG) in combination with Enigmail.
You can send me encrypted mail if you want some privacy.
My key is available at <http://digitalbrains.com/2012/openpgp-key-peter>

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 488 bytes
Desc: OpenPGP digital signature
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20181228/d6fae6a3/attachment.sig>

From gniibe at fsij.org  Sat Dec 29 01:45:26 2018
From: gniibe at fsij.org (NIIBE Yutaka)
Date: Sat, 29 Dec 2018 09:45:26 +0900
Subject: Using GnuK with DFU bootloader
In-Reply-To: <977d88f3-a298-ba83-8c49-48283f3b7a21@digitalbrains.com>
References: <cdf4aec4-56b8-d3f6-3274-46bcca4ae088@digitalbrains.com>
 <87zhtcdc7k.fsf@iwagami.gniibe.org>
 <c70aebf9-9633-2f97-e6a0-5d7381930f2c@digitalbrains.com>
 <87bm5qgurt.fsf@fsij.org>
 <f6575692-8499-2558-9a6d-8dc288c1006c@digitalbrains.com>
 <de148aa7-dc87-54fe-e8dc-14605a5f283e@digitalbrains.com>
 <87r2ecwosg.fsf@fsij.org>
 <40b1cbd1-81aa-069a-0c44-254cd579ff1e@digitalbrains.com>
 <87lg4jr39f.fsf@iwagami.gniibe.org>
 <26c8c375-536c-bd8e-8afb-7746ccc2f777@digitalbrains.com>
 <87wonwzvd5.fsf@iwagami.gniibe.org>
 <977d88f3-a298-ba83-8c49-48283f3b7a21@digitalbrains.com>
Message-ID: <87pntlupnd.fsf@fsij.org>

Hello, Peter,

Thanks a lot for your correcting my misunderstanding.

Well, I wonder how I will put the correction to the wrong description in
my commit log.  Perhaps, I will address it in another commit log.

Peter Lebbing <peter at digitalbrains.com> wrote:
> I think that it's not the case that the NVIC system reset actually uses
> a relocated vector table to find the reset vector! It is my
> interpretation that on NVIC system reset, the VCR register is cleared to
> default and the vector at 0x0000 0004 and MSP at 0x0000 0000 are taken.
> I've found statements on reset and reset vector in the following
> sections:
>
> Programming Manual (PM0056):
> - Page 15 -> Stack pointer and Program counter
> - Page 32 -> Reset
> - Page 15 -> Directly below figure
> - Page 133 -> Vector table offset register reset value
> Reference manual (RM0008):
> - Page 90 -> System reset ("resets all registers to their reset values
>   except...") and they explicitly group 'Software reset' under this type
>   of reset.
>
> And this is also what seems to happen when nvic_system_reset() is
> invoked from device_initialize_once(), as the following gdb trace seems
> to indicate.
[...]
> So... I think the VCR register contents don't matter on invoking
> nvic_system_reset().

I see.  Thank you for your time to investigate this.

Then, there are no problem what I was care of.  It goes through by new
SYS reset routine, and reGNUal will be able to use new SYS routines.

> However, current GnuK doesn't ever invoke nvic_system_reset() AFAIK.
> reGNUal does, and actually has VCR pointing into the SRAM when it calls
> nvic_system_reset(). Again, this is a moot point since VCR is not used.
> I investigated the reGNUal reset and it goes fine as well.

I had forgotten this case when I wrote previous mail.  Indeed, if
current VCR were used for nvic_system_reset, this wouldn't work.

BTW, today, I can't find the reason why I call it VCR (vector control
register, which we have the name in the comment of mcu/sys-stm32f103.c).
In ARMv7m manual and Cortex-M3 manual, it is called VTOR (vector table
offset register).

I'm going to fix the comment in Chopstx, to avoid confusion.
-- 


From jeremydrake+gnuk at eacceleration.com  Thu Jan  3 02:29:32 2019
From: jeremydrake+gnuk at eacceleration.com (Jeremy Drake)
Date: Wed, 2 Jan 2019 17:29:32 -0800 (PST)
Subject: Distribution of binary
In-Reply-To: <b03a2ab6-a682-8b28-4359-9e6155bd35a1@digitalbrains.com>
References: <cdf4aec4-56b8-d3f6-3274-46bcca4ae088@digitalbrains.com>
 <87zhtcdc7k.fsf@iwagami.gniibe.org>
 <8ed318e1-6048-7f1e-b2f1-fae1e30188c4@digitalbrains.com>
 <871s6cpfzr.fsf@wheatstone.g10code.de>
 <b03a2ab6-a682-8b28-4359-9e6155bd35a1@digitalbrains.com>
Message-ID: <alpine.DEB.2.11.1901021650520.7725@jeremydrake-3dj.hostmark.eacceleration.com>

On Thu, 20 Dec 2018, Peter Lebbing wrote:

> On 20/12/2018 12:58, Werner Koch wrote:
>> May I suggest to use 1209:2440 for such uses?
>
> Oh, that's a good solution, thanks! That way there's no way the FSIJ
> will get sullied by people not observing their conditions.

Also, with as long as this discussion of how to properly exercise freedom 
2 of the essential freedoms [1] has gone on, I was beginning to wonder if 
this truly qualified as "free software" ;)

> So what should be the strings for vendor and product?
>
> Suggestions for vendor string:
> pid.codes
> GnuPG e.V.
> Private
> None
>
> (I mean the literal string "None")

I would suggest something generic here, like "Open Source Developer"

> Suggestions for product string:
> GnuK Token
> An OpenPGP Token
>
> With the first product string, Niibe's udev match on product string[1]
> will catch this device.

I would vote for the more specific option here, namely "GnuK Token", given 
that the string is stored in the device itself.

If we were talking about adding to usb.ids, I would swap which should be 
generic and which should be specific, and vote for "GnuPG e.V."/"An 
OpenPGP Token" as these strings are given to any device with that VID:PID.

> Note that the current code of GnuK will choose these strings based on a
> user-supplied VID:PID. So the strings will always be the same for the
> supplied VID:PID. It would require code changes to implement "If the
> GnuPG e.V. is spreading them, choose that as vendor, otherwise choose
> 'Private'".

Anyone who wants to distribute binaries (or by extension hardware) with 
different strings need only modify GNUK_USB_DEVICE_ID text file at the 
root of the source tree, IIRC.

I believe that some software "knows" the 234b:0001 VID:PID, and should be 
taught that 1209:2440 should be treated the same.  Off the top of my head, 
the udev rules which have already been mentioned, plus libccid [2] and 
OpenKeychain [3].


[1] https://www.gnu.org/philosophy/free-sw.en.html
[2] https://salsa.debian.org/rousseau/CCID/tree/master/readers
[3] https://github.com/open-keychain/open-keychain/blob/894bac6c8df2e651369afc8e0aef4e17779c4de6/OpenKeychain/src/main/java/org/sufficientlysecure/keychain/securitytoken/usb/UsbTransport.java#L70



From jeremydrake+gnuk at eacceleration.com  Thu Jan  3 02:31:44 2019
From: jeremydrake+gnuk at eacceleration.com (Jeremy Drake)
Date: Wed, 2 Jan 2019 17:31:44 -0800 (PST)
Subject: U2F and nRF52840
In-Reply-To: <87k1jwzsi4.fsf@iwagami.gniibe.org>
References: <CAPLrxsEPpDUqJGdPkGT7QrZ93mCHwtG8UZ9bcKq3joE2DQ+hiA@mail.gmail.com>
 <87k1jwzsi4.fsf@iwagami.gniibe.org>
Message-ID: <alpine.DEB.2.11.1901021730080.7725@jeremydrake-3dj.hostmark.eacceleration.com>

>> If not, how (in)compatible is the current code with a possible U2F/UAF
>> implementation?
>
> Crypto routines can be reused.  The USB protocol, CCID, is same.  (CCID
> protocol is the protocol of card reader.)  Application layer is
> different.

Is it?  I haven't looked too closely, but I was under the impression that 
U2F was implemented as a HID device rather than CCID/"smartcard".


From peter at digitalbrains.com  Thu Jan  3 12:25:52 2019
From: peter at digitalbrains.com (Peter Lebbing)
Date: Thu, 3 Jan 2019 12:25:52 +0100
Subject: Distribution of binary
In-Reply-To: <alpine.DEB.2.11.1901021650520.7725@jeremydrake-3dj.hostmark.eacceleration.com>
References: <cdf4aec4-56b8-d3f6-3274-46bcca4ae088@digitalbrains.com>
 <87zhtcdc7k.fsf@iwagami.gniibe.org>
 <8ed318e1-6048-7f1e-b2f1-fae1e30188c4@digitalbrains.com>
 <871s6cpfzr.fsf@wheatstone.g10code.de>
 <b03a2ab6-a682-8b28-4359-9e6155bd35a1@digitalbrains.com>
 <alpine.DEB.2.11.1901021650520.7725@jeremydrake-3dj.hostmark.eacceleration.com>
Message-ID: <25f2a63f-4830-ec28-2c24-d462536ff6e4@digitalbrains.com>

Hello Jeremy,

On 03/01/2019 02:29, Jeremy Drake wrote:
> Also, with as long as this discussion of how to properly exercise
> freedom 2 of the essential freedoms [1] has gone on, I was beginning
> to wonder if this truly qualified as "free software" ;)

I'm happy with the outcome that there is an easier to use VID:PID for
the GnuK, but I feel this misrepresents the situation. Or in two words:
I disagree. I see the smiley there, but I'd still like to present a
differing view.

First of all, it's the USB-IF that is causing problems here, not the
FSIJ or GnuK. The USB-IF has these unfree requirements on use of "their"
identifiers. I think I misphrased when I wrote "sullying the FSIJ", it
should have been "getting the FSIJ into trouble".

The GPL uses copyright law as the framework to shape the licence.  I
think there are many jurisdictions where copyright law doesn't cover one
or two 16-bit identifiers, so I suspect you need to be well acquainted
with the law to exactly say how GPL interacts with identifiers.
Interoperability however /is/ partly about identifiers, and in several
jurisdictions you are allowed to make an interoperable implementation.
But if you want to go down that road, you need to sue the USB-IF over
their "licence" on the identifiers, because I'm sure in the current
situation they will not agree unless forced to do so by a court. I don't
think many people would be willing to spend the money and effort
required to go to court over this, so that's not likely to happen. I
also doubt a court would even be willing to rule against the USB-IF
anyway.

But free software is also about intent and practical consequences and
spirit and not just the law.

That same page[1] also mentions:
| Thus, it is acceptable for the license to require that you change the
| name of the modified version, remove a logo, or identify your
| modifications as yours.

Now this gets more into trademark than copyright, and we see that they
do allow you to limit redistribution of this type of data. It does
however continue
| As long as these requirements are not so burdensome that they
| effectively hamper you from releasing your changes, they are
| acceptable; [...]

and without an alternative to the FSIJ VID:PID, it indeed gets slightly
murky (but this unwelcome situation is forced by the USB-IF, not the
FSIJ or GnuK).

There are two conflicting rulesets here: on the one hand the contract
with USB-IF and on the other hand free software. If you believe free
software licences should extend to usage of VID:PID pairs, this quickly
leads to the stalemate that it becomes impossible to have a free USB
device when it is using the identifiers of a company still under
contract with the USB-IF. Note that the USB-IF doesn't condone the use
of the pid.codes range; they simply can't do much about it either. The
contract under which they were allocated is with a company that doesn't
exist anymore.

In an ideal world, the whole industry would have agreed on a different
identification mechanism that uses identifiers that are not so tightly
controlled by an organization selling them. Either randomly generated
UUIDs or DNS labels (so you can create identifiers within the domain you
own) or something like that[2]. Microsoft has done this for themselves
with the Microsoft OS Descriptor.

As I mentioned before, in an ideal world, this would have been the case
from the onset. But I think UUID's weren't that commonly used when USB
was originally developed, even though they already existed.

> Anyone who wants to distribute binaries (or by extension hardware)
> with different strings need only modify GNUK_USB_DEVICE_ID text file
> at the root of the source tree, IIRC.

Yes. Changing to a supported VID:PID is simply an argument to
./configure, this is checked for sanity (it's limited to the listed
IDs), and is part of the regular build process. But also changing the
associated strings requires editing GNUK_USB_DEVICE_ID in the source.
This requires providing access to this modified source when you
distribute. Other device strings would change as well: the revision
string (USB string descriptor 4 currently) changes to
"release/1.2.13-modified" or ""release/1.2.13-1-gabcdef0" (git commit
object) instead of "release/1.2.13". And just like this change is not
immediately evident, there might be more I'm not realizing.

The actual change to the file is small. But it has implications.

So that's why I think the better way to solve this if we were to suggest
using different strings for a VID:PID, would be to change the code such
that alternatives can be selected through ./configure.

> I believe that some software "knows" the 234b:0001 VID:PID, and should
> be taught that 1209:2440 should be treated the same.  Off the top of
> my head, the udev rules which have already been mentioned, plus
> libccid [2] and OpenKeychain [3].

(234b:0001 is NeuG, you mean 234b:0000)

I agree, good point. I get the sense the 1209:2440 VID:PID hasn't
actually been used yet, it was still in the "we plan to do this" phase.
I could be wrong though. It would be good if consumers of these ID's get
to know about them by default. But the udev rule could also just match
on "An OpenPGP Token" without considering the VID:PID.

Regards,

Peter.

[1] https://www.gnu.org/philosophy/free-sw.en.html

[2] Note that you can actually generate UUID's from DNS labels. They're
just not that human-readable anymore.

-- 
I use the GNU Privacy Guard (GnuPG) in combination with Enigmail.
You can send me encrypted mail if you want some privacy.
My key is available at <http://digitalbrains.com/2012/openpgp-key-peter>

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 488 bytes
Desc: OpenPGP digital signature
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20190103/a15ba1c4/attachment.sig>

From lists at georgweiss.de  Thu Jan  3 13:22:53 2019
From: lists at georgweiss.de (lists at georgweiss.de)
Date: Thu, 3 Jan 2019 13:22:53 +0100
Subject: neug on ST-link V2: usb errors
Message-ID: <a89b5c93-4049-0534-bf4c-4daae72b098e@smtp.biduda.org>

Hi,

I own multiple (also different hw versions) ST-Link V2 dongles and can
flash/run gnuk on them.

However if i try to run them with different versions of neug it will not
be recognized as usb-device (most of the time).

Occassionally if i try hard re-plugging the dongle it will be detected
(also when i reset the STM32F103 chip via shortcut-ing NRST and VSSA as
described in [1])

I tried 5 different dongles (which are running gnuk just fine) so i do
not believe that it's a hardware issue.

I would appreciate any suggestions.



Compiling/Flashing was done in a debian (stretch) docker container:
--
root at gnuk-13997:/test# cat VERSION
release/1.0.9
root at gnuk-13997:/test/src# ./configure --vidpid=234b:0001
--target=ST_DONGLE --with-dfu
root at gnuk-13997:/test# gcc --version
gcc (Debian 6.3.0-18+deb9u1) 6.3.0 20170516
---

--flash-log---
root at gnuk-13997:/out# telnet localhost 4444
Trying 127.0.0.1...
Connected to localhost.
Escape character is '^]'.
Open On-Chip Debugger
> reset halt
target state: halted
target halted due to debug-request, current mode: Thread
xPSR: 0x01000000 pc: 0x08000258 msp: 0x20005000
> stm32f1x unlock 0
device id = 0x20036410
flash size = 128kbytes
target state: halted
target halted due to breakpoint, current mode: Thread
xPSR: 0x61000000 pc: 0x2000003a msp: 0x20005000
stm32x unlocked.
INFO: a reset or power cycle is required for the new settings to take
effect.
> reset halt
target state: halted
target halted due to debug-request, current mode: Thread
xPSR: 0x01000000 pc: 0x08000258 msp: 0x20005000
> stm32f1x mass_erase 0
stm32x mass erase complete
> flash write_bank 0 /out/neug.bin 0
target state: halted
target halted due to breakpoint, current mode: Thread
xPSR: 0x61000000 pc: 0x2000003a msp: 0x20005000
wrote 24612 bytes from file /out/neug.bin to flash bank 0 at offset
0x00000000 in 1.090145s (22.048 KiB/s)
> reset run
---

--dmesg--[st-link v2 dongle with neug]---
[ 5171.461872] usb 4-2: new full-speed USB device number 6 using ohci-pci
[ 5171.602877] usb 4-2: device descriptor read/64, error -62
[ 5171.848884] usb 4-2: device descriptor read/64, error -62
[ 5172.091901] usb 4-2: new full-speed USB device number 7 using ohci-pci
[ 5172.232905] usb 4-2: device descriptor read/64, error -62
[ 5172.480913] usb 4-2: device descriptor read/64, error -62
[ 5172.587958] usb usb4-port2: attempt power cycle
[ 5173.035949] usb 4-2: new full-speed USB device number 8 using ohci-pci
[ 5173.451957] usb 4-2: device not accepting address 8, error -62
[ 5173.587964] usb 4-2: new full-speed USB device number 9 using ohci-pci
[ 5174.003990] usb 4-2: device not accepting address 9, error -62
[ 5174.004038] usb usb4-port2: unable to enumerate USB device
[ 5178.264172] usb 4-2: new full-speed USB device number 10 using ohci-pci
[ 5178.404185] usb 4-2: device descriptor read/64, error -62
[ 5178.648188] usb 4-2: device descriptor read/64, error -62
[ 5178.892201] usb 4-2: new full-speed USB device number 11 using ohci-pci
[ 5179.032205] usb 4-2: device descriptor read/64, error -62
[ 5179.280217] usb 4-2: device descriptor read/64, error -62
[ 5179.388244] usb usb4-port2: attempt power cycle
[ 5179.836243] usb 4-2: new full-speed USB device number 12 using ohci-pci
[ 5180.252260] usb 4-2: device not accepting address 12, error -62
[ 5180.388246] usb 4-2: new full-speed USB device number 13 using ohci-pci
[ 5180.804260] usb 4-2: device not accepting address 13, error -62
[ 5180.804275] usb usb4-port2: unable to enumerate USB device
[ 5182.630367] usb 4-2: new full-speed USB device number 14 using ohci-pci
[ 5182.792923] usb 4-2: New USB device found, idVendor=234b,
idProduct=0001, bcdDevice= 2.00
[ 5182.792926] usb 4-2: New USB device strings: Mfr=1, Product=2,
SerialNumber=3
[ 5182.792927] usb 4-2: Product: NeuG True RNG
[ 5182.792929] usb 4-2: Manufacturer: Free Software Initiative of Japan
[ 5182.792929] usb 4-2: SerialNumber: FSIJ-1.0.8-67105349
[ 5184.254048] usb 4-2: USB disconnect, device number 14
[ 5185.822486] usb 4-2: new full-speed USB device number 15 using ohci-pci
[ 5185.962513] usb 4-2: device descriptor read/64, error -62
[ 5186.208523] usb 4-2: device descriptor read/64, error -62
[ 5186.452535] usb 4-2: new full-speed USB device number 16 using ohci-pci
[ 5186.592546] usb 4-2: device descriptor read/64, error -62
[ 5186.840558] usb 4-2: device descriptor read/64, error -62
[ 5186.948573] usb usb4-port2: attempt power cycle
---

--dmesg--[same st-link v2 dongle with gnuk]---
[ 8522.378992] usb 7-4: new full-speed USB device number 118 using ohci-pci
[ 8522.550000] usb 7-4: New USB device found, idVendor=234b,
idProduct=0000, bcdDevice= 2.00
[ 8522.550002] usb 7-4: New USB device strings: Mfr=1, Product=2,
SerialNumber=3
[ 8522.550003] usb 7-4: Product: Gnuk Token
[ 8522.550005] usb 7-4: Manufacturer: Free Software Initiative of Japan
[ 8522.550005] usb 7-4: SerialNumber: FSIJ-1.2.13-87201725
---

1 - https://nx3d.org/gnuk-st-link-v2/


From peter at digitalbrains.com  Thu Jan  3 15:58:27 2019
From: peter at digitalbrains.com (Peter Lebbing)
Date: Thu, 3 Jan 2019 15:58:27 +0100
Subject: neug on ST-link V2: usb errors
In-Reply-To: <a89b5c93-4049-0534-bf4c-4daae72b098e@smtp.biduda.org>
References: <a89b5c93-4049-0534-bf4c-4daae72b098e@smtp.biduda.org>
Message-ID: <0ef25a96-76fb-c1ed-6445-d9254d1c5fd2@digitalbrains.com>

On 03/01/2019 13:22, lists at georgweiss.de wrote:
> root at gnuk-13997:/test/src# ./configure --vidpid=234b:0001
> --target=ST_DONGLE --with-dfu

It seems like you're using SWD to upload the binary, so --with-dfu will
do the wrong thing: it will build an image to flash at an offset of 
12 KiB from the start rather than one that begins right at the start.

But for some reason, when I built NeuG for the Maple Mini, it also
didn't come up. I might have done something trivial wrong, though, I
stopped looking immediately.

HTH,

Peter.

-- 
I use the GNU Privacy Guard (GnuPG) in combination with Enigmail.
You can send me encrypted mail if you want some privacy.
My key is available at <http://digitalbrains.com/2012/openpgp-key-peter>

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 488 bytes
Desc: OpenPGP digital signature
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20190103/b5b46c09/attachment.sig>

From jeremydrake+gnuk at eacceleration.com  Thu Jan  3 20:08:57 2019
From: jeremydrake+gnuk at eacceleration.com (Jeremy Drake)
Date: Thu, 3 Jan 2019 11:08:57 -0800 (PST)
Subject: Distribution of binary
In-Reply-To: <87r2dt8tij.fsf@ponder.i-did-not-set--mail-host-address--so-tickle-me>
References: <cdf4aec4-56b8-d3f6-3274-46bcca4ae088@digitalbrains.com>
 <87zhtcdc7k.fsf@iwagami.gniibe.org>
 <8ed318e1-6048-7f1e-b2f1-fae1e30188c4@digitalbrains.com>
 <871s6cpfzr.fsf@wheatstone.g10code.de>
 <b03a2ab6-a682-8b28-4359-9e6155bd35a1@digitalbrains.com>
 <alpine.DEB.2.11.1901021650520.7725@jeremydrake-3dj.hostmark.eacceleration.com>
 <25f2a63f-4830-ec28-2c24-d462536ff6e4@digitalbrains.com>
 <87r2dt8tij.fsf@ponder.i-did-not-set--mail-host-address--so-tickle-me>
Message-ID: <alpine.DEB.2.11.1901031056150.7606@jeremydrake-3dj.hostmark.eacceleration.com>

> I'd also like to put out a wishlist request that it be possible to build
> with a NULL/default VID:PID and other configurable strings
> (GNUK_USB_DEVICE_ID) of a generated GnuK binary, so that distributions
> such as Debian could ship a built GnuK image that user's can then
> install on their device, injecting the appropriate VID:PID and perhaps
> other settings while flashing to the device with a script of some kind.

This has already been done for the VID:PID.

* Major changes in Gnuk 1.2.8

   Released 2018-01-23, by NIIBE Yutaka

** No inclusion of VID:PID in gnuk.elf

Distribution of binary image with VID:PID would violate vendor ID
agreement to USB Forum.  Now, we have new file named gnuk-vidpid.elf
for flashing.  The file gnuk.elf can be used to generate
gnuk-vidpid.elf and we can check if it is reproducible or not.


* Major changes in Gnuk 1.2.10

   Released 2018-05-10, by NIIBE Yutaka

** No inclusion of VID:PID in gnuk-no-vidpid.elf
Now, we have new file named gnuk-no-vidpid.elf with no VID:PID.  The
file gnuk.elf has the VID:PID, like version 1.2.7 or older.


From jeremydrake+gnuk at eacceleration.com  Thu Jan  3 21:00:25 2019
From: jeremydrake+gnuk at eacceleration.com (Jeremy Drake)
Date: Thu, 3 Jan 2019 12:00:25 -0800 (PST)
Subject: Distribution of binary
In-Reply-To: <87o98x8ql3.fsf@ponder.i-did-not-set--mail-host-address--so-tickle-me>
References: <cdf4aec4-56b8-d3f6-3274-46bcca4ae088@digitalbrains.com>
 <87zhtcdc7k.fsf@iwagami.gniibe.org>
 <8ed318e1-6048-7f1e-b2f1-fae1e30188c4@digitalbrains.com>
 <871s6cpfzr.fsf@wheatstone.g10code.de>
 <b03a2ab6-a682-8b28-4359-9e6155bd35a1@digitalbrains.com>
 <alpine.DEB.2.11.1901021650520.7725@jeremydrake-3dj.hostmark.eacceleration.com>
 <25f2a63f-4830-ec28-2c24-d462536ff6e4@digitalbrains.com>
 <87r2dt8tij.fsf@ponder.i-did-not-set--mail-host-address--so-tickle-me>
 <alpine.DEB.2.11.1901031056150.7606@jeremydrake-3dj.hostmark.eacceleration.com>
 <87o98x8ql3.fsf@ponder.i-did-not-set--mail-host-address--so-tickle-me>
Message-ID: <alpine.DEB.2.11.1901031156460.7606@jeremydrake-3dj.hostmark.eacceleration.com>



On Thu, 3 Jan 2019, Vagrant Cascadian wrote:

> How do you take gnuk-no-vidpid.elf and turn it into something usable
> with a VID:PID? Is there a script you can use to inject the VID:PID? Are
> you expected to take a hex editor to it?

./configure generates a script which performs the modifications.

> As far as I can tell, the way to produce an image with VID:PID included
> still requires the GnuK source to build the flashable image?  Maybe it's
> just my lack of understanding (admittedly very rough), or a
> documentation issue...

I believe the way it currently stands you would need the GnuK source, but 
I don't think it would be difficult to isolate.


From vagrant at debian.org  Thu Jan  3 19:51:00 2019
From: vagrant at debian.org (Vagrant Cascadian)
Date: Thu, 03 Jan 2019 10:51:00 -0800
Subject: Distribution of binary
In-Reply-To: <25f2a63f-4830-ec28-2c24-d462536ff6e4@digitalbrains.com>
References: <cdf4aec4-56b8-d3f6-3274-46bcca4ae088@digitalbrains.com>
 <87zhtcdc7k.fsf@iwagami.gniibe.org>
 <8ed318e1-6048-7f1e-b2f1-fae1e30188c4@digitalbrains.com>
 <871s6cpfzr.fsf@wheatstone.g10code.de>
 <b03a2ab6-a682-8b28-4359-9e6155bd35a1@digitalbrains.com>
 <alpine.DEB.2.11.1901021650520.7725@jeremydrake-3dj.hostmark.eacceleration.com>
 <25f2a63f-4830-ec28-2c24-d462536ff6e4@digitalbrains.com>
Message-ID: <87r2dt8tij.fsf@ponder.i-did-not-set--mail-host-address--so-tickle-me>

On 2019-01-03, Peter Lebbing wrote:
> On 03/01/2019 02:29, Jeremy Drake wrote:
>> Anyone who wants to distribute binaries (or by extension hardware)
>> with different strings need only modify GNUK_USB_DEVICE_ID text file
>> at the root of the source tree, IIRC.
>
> Yes. Changing to a supported VID:PID is simply an argument to
> ./configure, this is checked for sanity (it's limited to the listed
> IDs), and is part of the regular build process. But also changing the
> associated strings requires editing GNUK_USB_DEVICE_ID in the source.
> This requires providing access to this modified source when you
> distribute. Other device strings would change as well: the revision
> string (USB string descriptor 4 currently) changes to
> "release/1.2.13-modified" or ""release/1.2.13-1-gabcdef0" (git commit
> object) instead of "release/1.2.13". And just like this change is not
> immediately evident, there might be more I'm not realizing.
>
> The actual change to the file is small. But it has implications.
>
> So that's why I think the better way to solve this if we were to suggest
> using different strings for a VID:PID, would be to change the code such
> that alternatives can be selected through ./configure.

I'd also like to put out a wishlist request that it be possible to build
with a NULL/default VID:PID and other configurable strings
(GNUK_USB_DEVICE_ID) of a generated GnuK binary, so that distributions
such as Debian could ship a built GnuK image that user's can then
install on their device, injecting the appropriate VID:PID and perhaps
other settings while flashing to the device with a script of some kind.

A few benefits of this approach off the top of my head:

- Users uncomfortable with compiling software wouldn't have to
- Reproducibile Builds testing could demonstrate integrity of the source
  to binary
- Packages in Debian can have various QA tests done automatically


live well,
  vagrant
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 227 bytes
Desc: not available
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20190103/6f47fc59/attachment.sig>

From vagrant at debian.org  Thu Jan  3 20:54:16 2019
From: vagrant at debian.org (Vagrant Cascadian)
Date: Thu, 03 Jan 2019 11:54:16 -0800
Subject: Distribution of binary
In-Reply-To: <alpine.DEB.2.11.1901031056150.7606@jeremydrake-3dj.hostmark.eacceleration.com>
References: <cdf4aec4-56b8-d3f6-3274-46bcca4ae088@digitalbrains.com>
 <87zhtcdc7k.fsf@iwagami.gniibe.org>
 <8ed318e1-6048-7f1e-b2f1-fae1e30188c4@digitalbrains.com>
 <871s6cpfzr.fsf@wheatstone.g10code.de>
 <b03a2ab6-a682-8b28-4359-9e6155bd35a1@digitalbrains.com>
 <alpine.DEB.2.11.1901021650520.7725@jeremydrake-3dj.hostmark.eacceleration.com>
 <25f2a63f-4830-ec28-2c24-d462536ff6e4@digitalbrains.com>
 <87r2dt8tij.fsf@ponder.i-did-not-set--mail-host-address--so-tickle-me>
 <alpine.DEB.2.11.1901031056150.7606@jeremydrake-3dj.hostmark.eacceleration.com>
Message-ID: <87o98x8ql3.fsf@ponder.i-did-not-set--mail-host-address--so-tickle-me>

On 2019-01-03, Jeremy Drake wrote:
>> I'd also like to put out a wishlist request that it be possible to build
>> with a NULL/default VID:PID and other configurable strings
>> (GNUK_USB_DEVICE_ID) of a generated GnuK binary, so that distributions
>> such as Debian could ship a built GnuK image that user's can then
>> install on their device, injecting the appropriate VID:PID and perhaps
>> other settings while flashing to the device with a script of some kind.
>
> This has already been done for the VID:PID.
>
> * Major changes in Gnuk 1.2.8
>
>    Released 2018-01-23, by NIIBE Yutaka
>
> ** No inclusion of VID:PID in gnuk.elf
>
> Distribution of binary image with VID:PID would violate vendor ID
> agreement to USB Forum.  Now, we have new file named gnuk-vidpid.elf
> for flashing.  The file gnuk.elf can be used to generate
> gnuk-vidpid.elf and we can check if it is reproducible or not.
>
>
> * Major changes in Gnuk 1.2.10
>
>    Released 2018-05-10, by NIIBE Yutaka
>
> ** No inclusion of VID:PID in gnuk-no-vidpid.elf
> Now, we have new file named gnuk-no-vidpid.elf with no VID:PID.  The
> file gnuk.elf has the VID:PID, like version 1.2.7 or older.

Yes, at least that appears to be partly done...

How do you take gnuk-no-vidpid.elf and turn it into something usable
with a VID:PID? Is there a script you can use to inject the VID:PID? Are
you expected to take a hex editor to it?

As far as I can tell, the way to produce an image with VID:PID included
still requires the GnuK source to build the flashable image?  Maybe it's
just my lack of understanding (admittedly very rough), or a
documentation issue...


live well,
  vagrant
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 227 bytes
Desc: not available
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20190103/285f388c/attachment.sig>

From ndk.clanbo at gmail.com  Thu Jan  3 22:09:15 2019
From: ndk.clanbo at gmail.com (NdK)
Date: Thu, 3 Jan 2019 22:09:15 +0100
Subject: U2F and nRF52840
In-Reply-To: <alpine.DEB.2.11.1901021730080.7725@jeremydrake-3dj.hostmark.eacceleration.com>
References: <CAPLrxsEPpDUqJGdPkGT7QrZ93mCHwtG8UZ9bcKq3joE2DQ+hiA@mail.gmail.com>
 <87k1jwzsi4.fsf@iwagami.gniibe.org>
 <alpine.DEB.2.11.1901021730080.7725@jeremydrake-3dj.hostmark.eacceleration.com>
Message-ID: <1cf228cc-9b7b-21e5-f8ad-502ba0bc9742@gmail.com>

On 03/01/19 02:31, Jeremy Drake via Gnuk-users wrote:

> Is it?? I haven't looked too closely, but I was under the impression
> that U2F was implemented as a HID device rather than CCID/"smartcard".
You're right. U2F uses HID, not CCID.

BYtE,
 Diego


From gniibe at fsij.org  Fri Jan  4 02:12:08 2019
From: gniibe at fsij.org (NIIBE Yutaka)
Date: Fri, 04 Jan 2019 10:12:08 +0900
Subject: U2F and nRF52840
In-Reply-To: <alpine.DEB.2.11.1901021730080.7725@jeremydrake-3dj.hostmark.eacceleration.com>
References: <CAPLrxsEPpDUqJGdPkGT7QrZ93mCHwtG8UZ9bcKq3joE2DQ+hiA@mail.gmail.com>
 <87k1jwzsi4.fsf@iwagami.gniibe.org>
 <alpine.DEB.2.11.1901021730080.7725@jeremydrake-3dj.hostmark.eacceleration.com>
Message-ID: <87a7kh445z.fsf@iwagami.gniibe.org>

Jeremy Drake <jeremydrake+gnuk at eacceleration.com> wrote:
> Is it?  I haven't looked too closely, but I was under the impression that 
> U2F was implemented as a HID device rather than CCID/"smartcard".

Right.  I was wrong.  U2F defines three protocols (for Bluetooth, NFC
and USB), and USB one is HID.

Well, in Gnuk, there is an experimental implementation for HID protocol.

The HID implementation in Gnuk is not general one, but very specific
use.  It was old experiment.  I was considering using it to control
(virtual) card of Gnuk, so that Gnuk can support multiple cards and a
user can send command of "insert" / "remove" of card.
-- 


From jeremydrake+gnuk at eacceleration.com  Fri Jan  4 03:02:18 2019
From: jeremydrake+gnuk at eacceleration.com (Jeremy Drake)
Date: Thu, 3 Jan 2019 18:02:18 -0800 (PST)
Subject: U2F and nRF52840
In-Reply-To: <87k1jwzsi4.fsf@iwagami.gniibe.org>
References: <CAPLrxsEPpDUqJGdPkGT7QrZ93mCHwtG8UZ9bcKq3joE2DQ+hiA@mail.gmail.com>
 <87k1jwzsi4.fsf@iwagami.gniibe.org>
Message-ID: <alpine.DEB.2.11.1901031800010.7606@jeremydrake-3dj.hostmark.eacceleration.com>



On Wed, 26 Dec 2018, NIIBE Yutaka wrote:

> If I will need to use U2F, I will implement another firmware software
> using some parts of Gnuk (USB, CCID, and Crypto).
>

I think somebody else may have beaten you to it:
https://github.com/gl-sergei/u2f-token



From pablo1 at mailbox.org  Thu Jan 10 07:50:06 2019
From: pablo1 at mailbox.org (Pablo Ovelleiro Corral)
Date: Thu, 10 Jan 2019 07:50:06 +0100
Subject: Run Gnuk on NUCLEO F103RB
Message-ID: <20190110065006.7wdxkhonbkcny5rs@kartoffel.localdomain>


Hello,

quick question regarding supported hardware: I saw the hardware
requirement for Gnuk is the micro controller STM32F103.
(https://wiki.debian.org/GNUK#Gnuk_Hardware).

Will it run on one of this boards?:
https://www.reichelt.de/nucleo-64-arm-cortex-m3-stm32-f1-serie-nucleo-f103rb-p154270.html?&trstct=pos_7

It is not listed explicitely in the hardware list, but I might get my
hands on one of those for cheap and would like to know if I can use it
for gnuk.

The hardware list is pretty small in general, maybe it would be nice
to expand it.

Cheers,

Pablo


-- 
Pablo Ovelleiro Corral
Web: http://pablo.tools
XMPP: pablo1 at mailbox.org
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 833 bytes
Desc: not available
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20190110/34c182e9/attachment.sig>

From gniibe at fsij.org  Thu Jan 10 09:32:10 2019
From: gniibe at fsij.org (NIIBE Yutaka)
Date: Thu, 10 Jan 2019 17:32:10 +0900
Subject: Run Gnuk on NUCLEO F103RB
In-Reply-To: <20190110065006.7wdxkhonbkcny5rs@kartoffel.localdomain>
References: <20190110065006.7wdxkhonbkcny5rs@kartoffel.localdomain>
Message-ID: <87o98o9alx.fsf@fsij.org>

Hello,

This week, I did hand-soldering for STM32 Nucleo.  I tested Gnuk 1.2.13
on that board (in order to check if my hand-soldering is good).  All
worked fine for me.

Pablo Ovelleiro Corral <pablo1 at mailbox.org> wrote:
> quick question regarding supported hardware: I saw the hardware
> requirement for Gnuk is the micro controller STM32F103.
> (https://wiki.debian.org/GNUK#Gnuk_Hardware).
>
> Will it run on one of this boards?:
> https://www.reichelt.de/nucleo-64-arm-cortex-m3-stm32-f1-serie-nucleo-f103rb-p154270.html?&trstct=pos_7

Please see:

	https://www.fsij.org/gnuk/neug-on-stm32-nucleo-f103.html


The purpose for my Nucleo board is not Gnuk, in fact.  I'm considering
to make poorman's card reader with this board.  My frustration testing
OpenPGPcard has been: there is no good card reader with free firmware.
In this year, I plan to have a solution.  And this is the first step.
-- 


From email at kmkcl.de  Fri Jan 11 00:10:47 2019
From: email at kmkcl.de (=?UTF-8?Q?Karsten_M=c3=bcller?=)
Date: Fri, 11 Jan 2019 00:10:47 +0100
Subject: gnuk with GD32F103
Message-ID: <d40b3d22-d43f-f006-f220-c1c321bfbc50@kmkcl.de>

Hello,

I am going to build my own gnuk device (schematic based on german
nitrokey version) and after first success with original STM32F103
microcontroller, I want to try a GD32F103 microcontroller. (as used in
fst-01sz version)
Unfortunately it does not work out of the box.

My first attempt was to flash same binarys... Then, for a quick and
dirty test, I adapt FST-01SZ board file with pin configuration of
nitrokey... so clock settings and gd32 specific settings stay the same.
(For latter, I only found a compile decision in adc functions - is that
correct?) But that did not work either.

For compiling I use arm toolchain and for programming texane/stlink with
a stlinkv2 programmer. Programming gives no errors.

I am wondering, because I thought that both microcontrollers nearly the
same from an outer point of view.
Is there anything else to consider, if using GD32F103 instead of STM32F103?

best regards,

Karsten



From mike at sowbug.com  Fri Jan 11 06:20:39 2019
From: mike at sowbug.com (Mike Tsao)
Date: Thu, 10 Jan 2019 21:20:39 -0800
Subject: PSA: building chopstx on Ubuntu is very broken
Message-ID: <CACi+kjpsG805N19Jgc9NnZkT9ab9B+c3ZXPyWTGfz3oUxp2UzQ@mail.gmail.com>

Background:

https://github.com/im-tomu/tomu-quickstart/issues/13
https://bugs.launchpad.net/ubuntu/+source/newlib/+bug/1767223

If you try building anything using chopstx, including gnuk and neug, using
the Ubuntu 18.04 "gcc-arm-none-eabi" compiler, or
the libnewlib-arm-none-eabi library, the resulting binaries won't work.
You'll get as far as flashing the image to your device and plugging it into
USB, and then you'll get all sorts of errors in dmesg like these:

[80745.158745] usb 1-4.4: new full-speed USB device number 46 using xhci_hcd
[80745.158892] usb 1-4.4: Device not responding to setup address.
[80745.366901] usb 1-4.4: Device not responding to setup address.
[80745.574730] usb 1-4.4: device not accepting address 46, error -71
[80745.575119] usb 1-4-port4: unable to enumerate USB device

Use the arm-provided toolchain instead (
https://developer.arm.com/open-source/gnu-toolchain/gnu-rm/downloads) and
you'll have a better outcome. This has been broken in the Ubuntu
distribution for more than 6 months (maybe upstream Debian as well). I'm
sure it would be very frustrating for someone who was following this
project's build instructions carefully, yet still ended up with nothing
working.

I hope this PSA saves you from that frustration.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20190110/4ccc775c/attachment.html>

From gniibe at fsij.org  Fri Jan 11 07:37:47 2019
From: gniibe at fsij.org (NIIBE Yutaka)
Date: Fri, 11 Jan 2019 15:37:47 +0900
Subject: gnuk with GD32F103
In-Reply-To: <d40b3d22-d43f-f006-f220-c1c321bfbc50@kmkcl.de>
References: <d40b3d22-d43f-f006-f220-c1c321bfbc50@kmkcl.de>
Message-ID: <871s5jbsxw.fsf@fsij.org>

Hello,

Karsten M?ller <email at kmkcl.de> wrote:
> I am going to build my own gnuk device (schematic based on german
> nitrokey version) and after first success with original STM32F103
> microcontroller, I want to try a GD32F103 microcontroller. (as used in
> fst-01sz version)
> Unfortunately it does not work out of the box.

I think that your writing of "schematic based on german nitrokey
version" may be not accurate expression, if it's for Gnuk, well, from
the author of FST-01* design.  IIUC, at least some of Nitrokey board
designs are based on my FST-01 design, including the one which is almost
same circuit.  Do you know the FST-01 design (no suffix version), or
the design of FST-01G?

It's good if you can show your schematics and how it's different to
FST-01.

> My first attempt was to flash same binarys... Then, for a quick and
> dirty test, I adapt FST-01SZ board file with pin configuration of
> nitrokey... so clock settings and gd32 specific settings stay the same.
> (For latter, I only found a compile decision in adc functions - is that
> correct?) But that did not work either.

Please elaborate your configuration of Gnuk.

For Gnuk with GD32F103 (examples are BLUE_PILL_G and FST_01SZ with
board-blue-pill-g.h and board-fst-01sz.h respectively), you can find
MHZ=96 in src/configure.  This is important for GD32F103.
-- 


From gniibe at fsij.org  Fri Jan 11 07:58:57 2019
From: gniibe at fsij.org (NIIBE Yutaka)
Date: Fri, 11 Jan 2019 15:58:57 +0900
Subject: PSA: building chopstx on Ubuntu is very broken
In-Reply-To: <CACi+kjpsG805N19Jgc9NnZkT9ab9B+c3ZXPyWTGfz3oUxp2UzQ@mail.gmail.com>
References: <CACi+kjpsG805N19Jgc9NnZkT9ab9B+c3ZXPyWTGfz3oUxp2UzQ@mail.gmail.com>
Message-ID: <87y37rade6.fsf@fsij.org>

Hello,

Mike Tsao <mike at sowbug.com> wrote:
> https://github.com/im-tomu/tomu-quickstart/issues/13
> https://bugs.launchpad.net/ubuntu/+source/newlib/+bug/1767223
>
> If you try building anything using chopstx, including gnuk and neug, using
> the Ubuntu 18.04 "gcc-arm-none-eabi" compiler, or
> the libnewlib-arm-none-eabi library, the resulting binaries won't work.

Thanks for sharing information.

It's unfortunate that Ubuntu 18.04 has wrong version of newlib binary
package.


As written in Gnuk/README, I use:

========================== Excerpt from README

You need GNU toolchain and newlib for 'arm-none-eabi' target.

On Debian we can install the packages of gcc-arm-none-eabi,
gdb-arm-none-eabi and its friends.  I'm using:

	binutils-arm-none-eabi	2.31.1-2+10
	gcc-arm-none-eabi 	15:7-2018-q2-4
	gdb-arm-none-eabi 	7.12-6+9+b2
	libnewlib-arm-none-eabi	3.0.0.20180802-2

==========================

In Debian, libnewlib-arm-none-eabi is build with new version of
gcc-arm-none-eabi, thus, no problem.

I'm going to update to newer newlib in Debian testing, and we don't need
gdb-arm-none-eabi (because normal gdb supports arm-none-eabi binaries)
now.
-- 


From mike at sowbug.com  Wed Jan 30 05:21:23 2019
From: mike at sowbug.com (Mike Tsao)
Date: Tue, 29 Jan 2019 20:21:23 -0800
Subject: Possible bug or opportunity for user error with admin/user password
Message-ID: <CACi+kjpQ4ioN1uK47pGcySUMj-EkHe9j_RmveTHWX8fCy4vGFg@mail.gmail.com>

This is on FSIJ-1.2.13 running on an ST_DONGLE.

   1. Flash using standard method.
   2. gpg --card-edit
   3. factory-reset, y, yes
   4. rm -rf .gnupg, kill gpg-connect-agent, etc. so GnuPG is fresh
   5. gpg --import my-secret-subkeys.gpg
   6. gpg --edit-key myname
   7. key 1
   8. keytocard
   9. (answer menu for encryption key)
   10. when asked for admin PIN, enter 12345678
   11. when asked again for admin PIN, enter 12345678
   12. exit
   13. gpg --card-edit
   14. admin
   15. passwd
   16. enter 1 for user PIN
   17. *enter 12345678*
   18. when asked for new password, enter thisismypassword
   19. when asked again for new password, enter thisismypassword
   20. exit
   21. gpg --card-status to confirm that the gnuk device is now loaded with
   the key
   22. gpg -d something-encrypted-with-this-key.asc
   23. when prompted, enter thisismypassword
   24. get "no decryption key"
   25. try again
   26. try again
   27. device is locked

Do you see what I did wrong? At step 17 I entered 12345678 instead of
123456. I forgot that the default admin PIN is different from the default
user PIN. But the messages that GnuPG printed suggested that the password
change succeeded! (See transcript below.)

Moreover, I went back to step 25 and tried entering 123456. Nope -- the
password is indeed changed, but it's changed to neither 123456, 12345678,
or thisismypassword.

The bug I'm reporting is that I don't understand why GnuPG accepted the
wrong initial user PIN. Why didn't it report that the password change
failed? Aside from it being obviously frustrating because the only way to
fix it is to factory-reset and do the whole process over again. But it
could be a serious issue if a user believes the device is correctly set up,
and then (foolishly) discards other copies of the secret subkey.

I hope this is something within gnuk's control. If it's just GnuPG being
silly, then there isn't much this team can do about it.

(transcript of session follows)
> admin
Admin commands are allowed

gpg/card> passwd
gpg: OpenPGP card no. D2760001xxxxxxxx detected

1 - change PIN
2 - unblock PIN
3 - change Admin PIN
4 - set the Reset Code
Q - quit

Your selection? 1 [entered 12345678, then thisismypassword twice]

*PIN changed.    <===== NOTE REPORT OF SUCCESS*

1 - change PIN
2 - unblock PIN
3 - change Admin PIN
4 - set the Reset Code
Q - quit

Your selection? q

gpg/card> verify [entered thisismypassword]

Reader ...........: 234B:0000:FSIJ-1.2.13-xxxxx
Application ID ...: D2760001xxxxxxx
Version ..........: 2.0
Manufacturer .....: unmanaged S/N range
Serial number ....: xxxxxx
Name of cardholder: [not set]
Language prefs ...: [not set]
Sex ..............: unspecified
URL of public key : [not set]
Login data .......: [not set]
Signature PIN ....: forced
Key attributes ...: ed25519 rsa2048 rsa2048
Max. PIN lengths .: 127 127 127
*PIN retry counter : 2 3 3                 <===== NOTE DECREMENT*

(end transcript)
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20190129/e7f62459/attachment.html>

From peter at digitalbrains.com  Wed Jan 30 12:07:20 2019
From: peter at digitalbrains.com (Peter Lebbing)
Date: Wed, 30 Jan 2019 12:07:20 +0100
Subject: Possible bug or opportunity for user error with admin/user
 password
In-Reply-To: <CACi+kjpQ4ioN1uK47pGcySUMj-EkHe9j_RmveTHWX8fCy4vGFg@mail.gmail.com>
References: <CACi+kjpQ4ioN1uK47pGcySUMj-EkHe9j_RmveTHWX8fCy4vGFg@mail.gmail.com>
Message-ID: <fb512dd2-6236-d094-038a-ab817178ca30@digitalbrains.com>

Hi,

I think your new password is now "78thisismypassword".

There's an annoying design deficiency in the OpenPGP Card
specification. It says this:

> The length of the existing password is known in the card, so that
> neither a delimiter nor padding for filling up fixed formats is
> necessary for UTF-8. The length of the new UTF-8 password therefore
> computes L new = Lc ? L old.

Do you see the problem? :-)

The data field for changing OLDPIN to NEWPIN is formatted as:

OLDPINNEWPIN

The data field that is sent when you specify the old PIN as OLDPINBAD
and the new PIN as NEWPIN is:

OLDPINBADNEWPIN

So the pin is changed to BADNEWPIN.

So any suffix you accidentally add to the old PIN becomes a prefix to
the new PIN.

This is in the specification, not the GnuK implementation :-(.

And the mistake in the reasoning of the specification is that even
though the card might be completely certain of the length of the old
PIN, the user might not be. Add default PINs that only differ in suffix,
and we get a trap sprung for the unsuspecting user.

HTH,

Peter.

-- 
I use the GNU Privacy Guard (GnuPG) in combination with Enigmail.
You can send me encrypted mail if you want some privacy.
My key is available at <http://digitalbrains.com/2012/openpgp-key-peter>

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 488 bytes
Desc: OpenPGP digital signature
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20190130/38196e18/attachment.sig>

From mike at sowbug.com  Wed Jan 30 16:22:58 2019
From: mike at sowbug.com (Mike Tsao)
Date: Wed, 30 Jan 2019 07:22:58 -0800
Subject: Possible bug or opportunity for user error with admin/user
 password
In-Reply-To: <fb512dd2-6236-d094-038a-ab817178ca30@digitalbrains.com>
References: <CACi+kjpQ4ioN1uK47pGcySUMj-EkHe9j_RmveTHWX8fCy4vGFg@mail.gmail.com>
 <fb512dd2-6236-d094-038a-ab817178ca30@digitalbrains.com>
Message-ID: <CACi+kjrkCm_tq1N5Ppv+8P6tcKHjeHyhOgk+1M4T_FBWjHVa1w@mail.gmail.com>

Peter, that's a pretty wacky design decision. Thanks for spelling it out
for me. Next time I set up a new key, I'll verify that this was in fact the
issue. Meanwhile, I hope that our record of this discussion rescues another
person from an exasperating experience in the future!

On Wed, Jan 30, 2019 at 3:07 AM Peter Lebbing <peter at digitalbrains.com>
wrote:

> Hi,
>
> I think your new password is now "78thisismypassword".
>
> There's an annoying design deficiency in the OpenPGP Card
> specification. It says this:
>
> > The length of the existing password is known in the card, so that
> > neither a delimiter nor padding for filling up fixed formats is
> > necessary for UTF-8. The length of the new UTF-8 password therefore
> > computes L new = Lc ? L old.
>
> Do you see the problem? :-)
>
> The data field for changing OLDPIN to NEWPIN is formatted as:
>
> OLDPINNEWPIN
>
> The data field that is sent when you specify the old PIN as OLDPINBAD
> and the new PIN as NEWPIN is:
>
> OLDPINBADNEWPIN
>
> So the pin is changed to BADNEWPIN.
>
> So any suffix you accidentally add to the old PIN becomes a prefix to
> the new PIN.
>
> This is in the specification, not the GnuK implementation :-(.
>
> And the mistake in the reasoning of the specification is that even
> though the card might be completely certain of the length of the old
> PIN, the user might not be. Add default PINs that only differ in suffix,
> and we get a trap sprung for the unsuspecting user.
>
> HTH,
>
> Peter.
>
> --
> I use the GNU Privacy Guard (GnuPG) in combination with Enigmail.
> You can send me encrypted mail if you want some privacy.
> My key is available at <http://digitalbrains.com/2012/openpgp-key-peter>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20190130/ca7e3bb4/attachment.html>

From wk at gnupg.org  Wed Jan 30 18:38:54 2019
From: wk at gnupg.org (Werner Koch)
Date: Wed, 30 Jan 2019 18:38:54 +0100
Subject: Possible bug or opportunity for user error with admin/user
 password
In-Reply-To: <CACi+kjrkCm_tq1N5Ppv+8P6tcKHjeHyhOgk+1M4T_FBWjHVa1w@mail.gmail.com>
 (Mike Tsao's message of "Wed, 30 Jan 2019 07:22:58 -0800")
References: <CACi+kjpQ4ioN1uK47pGcySUMj-EkHe9j_RmveTHWX8fCy4vGFg@mail.gmail.com>
 <fb512dd2-6236-d094-038a-ab817178ca30@digitalbrains.com>
 <CACi+kjrkCm_tq1N5Ppv+8P6tcKHjeHyhOgk+1M4T_FBWjHVa1w@mail.gmail.com>
Message-ID: <87ef8ucafl.fsf@wheatstone.g10code.de>

Hi!

On Wed, 30 Jan 2019 07:22, mike at sowbug.com said:
> Peter, that's a pretty wacky design decision. Thanks for spelling it out

Actually this is not OpenPGP card specific but demanded by ISO-7816.
The practice of having a longer Admin PIN with the same prefix as the
User PIN is also common.  Indeed, it is an ugly API but you should
consider that it has been standardized about 25 years ago and back then
the chips needed to spare as much memory as possible.


Salam-Shalom,

   Werner

-- 
Die Gedanken sind frei.  Ausnahmen regelt ein Bundesgesetz.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 227 bytes
Desc: not available
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20190130/e10cf46a/attachment.sig>

From peter at digitalbrains.com  Wed Jan 30 20:17:32 2019
From: peter at digitalbrains.com (Peter Lebbing)
Date: Wed, 30 Jan 2019 20:17:32 +0100
Subject: Possible bug or opportunity for user error with admin/user
 password
In-Reply-To: <87ef8ucafl.fsf@wheatstone.g10code.de>
References: <CACi+kjpQ4ioN1uK47pGcySUMj-EkHe9j_RmveTHWX8fCy4vGFg@mail.gmail.com>
 <fb512dd2-6236-d094-038a-ab817178ca30@digitalbrains.com>
 <CACi+kjrkCm_tq1N5Ppv+8P6tcKHjeHyhOgk+1M4T_FBWjHVa1w@mail.gmail.com>
 <87ef8ucafl.fsf@wheatstone.g10code.de>
Message-ID: <0da0187b-4a5f-3f92-f4e3-8457668cbd9c@digitalbrains.com>

Hi all!

On 30/01/2019 18:38, Werner Koch wrote:
> Actually this is not OpenPGP card specific but demanded by ISO-7816.

ISO 7816-4:2013, section 11.5.7 CHANGE REFERENCE DATA command, states:
Verification data followed without delimitation by new reference data

While I knew it is a standardized command, I misremembered the details,
my mistake.

Anyway, can't we work around this? If we do a VERIFY first to check if
the old PIN is accepted, we can then do a CHANGE REFERENCE DATA only
when the VERIFY worked out okay. That way, entering the old PIN with a
suffix will fail on VERIFY.

Unfortunately, this is not fool-proof with smartcard readers with a
PIN-pad, since they require you to re-enter the PIN for CHANGE REFERENCE
DATA. Still, as long as the user doesn't mistype in such a way as to
create such a suffix, it will catch the mistake. It does mean that with
a PIN-pad, the user needs to enter the old PIN twice. I think that's
preferable to the confusion we have now. For PINs entered through
pinentry, we can just repeat it programmatically, the user doesn't have
to retype.

Or if you don't like that, you could just implement the check for cases
where pinentry is used, not for the PIN-pad case.

> Indeed, it is an ugly API but you should consider that it has been
> standardized about 25 years ago and back then the chips needed to
> spare as much memory as possible.

Hmmmm, even then I think it's overzealous optimization, given the
problem at hand. You'd need one byte more in your packet buffer, but
will CHANGE REFERENCE DATA often be the largest packet in your card
application (and hence determine the size of your buffer)? Even if that
were the case, they should have thought of a clever solution :-).

I suspect they simply forgot this special case, thinking "the length is
known", without asking themselves "to whom?".

Cheers,

Peter.

-- 
I use the GNU Privacy Guard (GnuPG) in combination with Enigmail.
You can send me encrypted mail if you want some privacy.  My key is
available at <http://digitalbrains.com/2012/openpgp-key-peter>

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 488 bytes
Desc: OpenPGP digital signature
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20190130/d630fffa/attachment.sig>

From jeremydrake+gnuk at eacceleration.com  Wed Jan 30 20:40:34 2019
From: jeremydrake+gnuk at eacceleration.com (Jeremy Drake)
Date: Wed, 30 Jan 2019 11:40:34 -0800 (PST)
Subject: Possible bug or opportunity for user error with admin/user
 password
In-Reply-To: <CACi+kjpQ4ioN1uK47pGcySUMj-EkHe9j_RmveTHWX8fCy4vGFg@mail.gmail.com>
References: <CACi+kjpQ4ioN1uK47pGcySUMj-EkHe9j_RmveTHWX8fCy4vGFg@mail.gmail.com>
Message-ID: <alpine.DEB.2.11.1901301139590.6052@jeremydrake-3dj.hostmark.eacceleration.com>

On a related note, I have found that the process of setting PINs and
loading keys (whether importing or generating) is highly order dependent,
and if I do not do things in exactly the right order, unexpected things
happen and I wind up having to start over.  It looks like the order
followed here is almost the same as the order I wrote down to follow that
works for me, except I would have changed the admin pin before importing
the key.



On Tue, 29 Jan 2019, Mike Tsao wrote:

> This is on FSIJ-1.2.13 running on an ST_DONGLE.
>
>   1. Flash using standard method.
>   2. gpg --card-edit
>   3. factory-reset, y, yes
>   4. rm -rf .gnupg, kill gpg-connect-agent, etc. so GnuPG is fresh
>   5. gpg --import my-secret-subkeys.gpg
>   6. gpg --edit-key myname
>   7. key 1
>   8. keytocard
>   9. (answer menu for encryption key)
>   10. when asked for admin PIN, enter 12345678
>   11. when asked again for admin PIN, enter 12345678
>   12. exit
>   13. gpg --card-edit
>   14. admin
>   15. passwd
>   16. enter 1 for user PIN
>   17. *enter 12345678*
>   18. when asked for new password, enter thisismypassword
>   19. when asked again for new password, enter thisismypassword
>   20. exit
>   21. gpg --card-status to confirm that the gnuk device is now loaded with
>   the key
>   22. gpg -d something-encrypted-with-this-key.asc
>   23. when prompted, enter thisismypassword
>   24. get "no decryption key"
>   25. try again
>   26. try again
>   27. device is locked
>
> Do you see what I did wrong? At step 17 I entered 12345678 instead of
> 123456. I forgot that the default admin PIN is different from the default
> user PIN. But the messages that GnuPG printed suggested that the password
> change succeeded! (See transcript below.)
>
> Moreover, I went back to step 25 and tried entering 123456. Nope -- the
> password is indeed changed, but it's changed to neither 123456, 12345678,
> or thisismypassword.
>
> The bug I'm reporting is that I don't understand why GnuPG accepted the
> wrong initial user PIN. Why didn't it report that the password change
> failed? Aside from it being obviously frustrating because the only way to
> fix it is to factory-reset and do the whole process over again. But it
> could be a serious issue if a user believes the device is correctly set up,
> and then (foolishly) discards other copies of the secret subkey.
>
> I hope this is something within gnuk's control. If it's just GnuPG being
> silly, then there isn't much this team can do about it.
>
> (transcript of session follows)
>> admin
> Admin commands are allowed
>
> gpg/card> passwd
> gpg: OpenPGP card no. D2760001xxxxxxxx detected
>
> 1 - change PIN
> 2 - unblock PIN
> 3 - change Admin PIN
> 4 - set the Reset Code
> Q - quit
>
> Your selection? 1 [entered 12345678, then thisismypassword twice]
>
> *PIN changed.    <===== NOTE REPORT OF SUCCESS*
>
> 1 - change PIN
> 2 - unblock PIN
> 3 - change Admin PIN
> 4 - set the Reset Code
> Q - quit
>
> Your selection? q
>
> gpg/card> verify [entered thisismypassword]
>
> Reader ...........: 234B:0000:FSIJ-1.2.13-xxxxx
> Application ID ...: D2760001xxxxxxx
> Version ..........: 2.0
> Manufacturer .....: unmanaged S/N range
> Serial number ....: xxxxxx
> Name of cardholder: [not set]
> Language prefs ...: [not set]
> Sex ..............: unspecified
> URL of public key : [not set]
> Login data .......: [not set]
> Signature PIN ....: forced
> Key attributes ...: ed25519 rsa2048 rsa2048
> Max. PIN lengths .: 127 127 127
> *PIN retry counter : 2 3 3                 <===== NOTE DECREMENT*
>
> (end transcript)
>


From mike at sowbug.com  Wed Jan 30 21:00:38 2019
From: mike at sowbug.com (Mike Tsao)
Date: Wed, 30 Jan 2019 12:00:38 -0800
Subject: Possible bug or opportunity for user error with admin/user
 password
In-Reply-To: <alpine.DEB.2.11.1901301139590.6052@jeremydrake-3dj.hostmark.eacceleration.com>
References: <CACi+kjpQ4ioN1uK47pGcySUMj-EkHe9j_RmveTHWX8fCy4vGFg@mail.gmail.com>
 <alpine.DEB.2.11.1901301139590.6052@jeremydrake-3dj.hostmark.eacceleration.com>
Message-ID: <CACi+kjq6Q67d6Y8=28v+aXqTO1oph1mRVm4ij42xwdpHv9SR-A@mail.gmail.com>

Jeremy, I believe you're running into a common issue that adding a PIN to
an empty device is not supported, or at least is a no-op. The reason, I
think, is that the PIN is implemented as symmetric encryption of the
secrets it's protecting, so if no keys have been added, then there's
nothing to encrypt, so the PIN effectively vanishes into thin air.

Since everyone appreciates armchair quarterbacking, I wonder whether it
could have been done as a tagged structure of some sort that contains the
keys, but also is > 0 bytes in length when empty. Then the PIN would have
something to encrypt, and a way for the system to know whether an asserted
PIN is valid.

On Wed, Jan 30, 2019 at 11:41 AM Jeremy Drake <
jeremydrake+gnuk at eacceleration.com> wrote:

> On a related note, I have found that the process of setting PINs and
> loading keys (whether importing or generating) is highly order dependent,
> and if I do not do things in exactly the right order, unexpected things
> happen and I wind up having to start over.  It looks like the order
> followed here is almost the same as the order I wrote down to follow that
> works for me, except I would have changed the admin pin before importing
> the key.
>
>
>
> On Tue, 29 Jan 2019, Mike Tsao wrote:
>
> > This is on FSIJ-1.2.13 running on an ST_DONGLE.
> >
> >   1. Flash using standard method.
> >   2. gpg --card-edit
> >   3. factory-reset, y, yes
> >   4. rm -rf .gnupg, kill gpg-connect-agent, etc. so GnuPG is fresh
> >   5. gpg --import my-secret-subkeys.gpg
> >   6. gpg --edit-key myname
> >   7. key 1
> >   8. keytocard
> >   9. (answer menu for encryption key)
> >   10. when asked for admin PIN, enter 12345678
> >   11. when asked again for admin PIN, enter 12345678
> >   12. exit
> >   13. gpg --card-edit
> >   14. admin
> >   15. passwd
> >   16. enter 1 for user PIN
> >   17. *enter 12345678*
> >   18. when asked for new password, enter thisismypassword
> >   19. when asked again for new password, enter thisismypassword
> >   20. exit
> >   21. gpg --card-status to confirm that the gnuk device is now loaded
> with
> >   the key
> >   22. gpg -d something-encrypted-with-this-key.asc
> >   23. when prompted, enter thisismypassword
> >   24. get "no decryption key"
> >   25. try again
> >   26. try again
> >   27. device is locked
> >
> > Do you see what I did wrong? At step 17 I entered 12345678 instead of
> > 123456. I forgot that the default admin PIN is different from the default
> > user PIN. But the messages that GnuPG printed suggested that the password
> > change succeeded! (See transcript below.)
> >
> > Moreover, I went back to step 25 and tried entering 123456. Nope -- the
> > password is indeed changed, but it's changed to neither 123456, 12345678,
> > or thisismypassword.
> >
> > The bug I'm reporting is that I don't understand why GnuPG accepted the
> > wrong initial user PIN. Why didn't it report that the password change
> > failed? Aside from it being obviously frustrating because the only way to
> > fix it is to factory-reset and do the whole process over again. But it
> > could be a serious issue if a user believes the device is correctly set
> up,
> > and then (foolishly) discards other copies of the secret subkey.
> >
> > I hope this is something within gnuk's control. If it's just GnuPG being
> > silly, then there isn't much this team can do about it.
> >
> > (transcript of session follows)
> >> admin
> > Admin commands are allowed
> >
> > gpg/card> passwd
> > gpg: OpenPGP card no. D2760001xxxxxxxx detected
> >
> > 1 - change PIN
> > 2 - unblock PIN
> > 3 - change Admin PIN
> > 4 - set the Reset Code
> > Q - quit
> >
> > Your selection? 1 [entered 12345678, then thisismypassword twice]
> >
> > *PIN changed.    <===== NOTE REPORT OF SUCCESS*
> >
> > 1 - change PIN
> > 2 - unblock PIN
> > 3 - change Admin PIN
> > 4 - set the Reset Code
> > Q - quit
> >
> > Your selection? q
> >
> > gpg/card> verify [entered thisismypassword]
> >
> > Reader ...........: 234B:0000:FSIJ-1.2.13-xxxxx
> > Application ID ...: D2760001xxxxxxx
> > Version ..........: 2.0
> > Manufacturer .....: unmanaged S/N range
> > Serial number ....: xxxxxx
> > Name of cardholder: [not set]
> > Language prefs ...: [not set]
> > Sex ..............: unspecified
> > URL of public key : [not set]
> > Login data .......: [not set]
> > Signature PIN ....: forced
> > Key attributes ...: ed25519 rsa2048 rsa2048
> > Max. PIN lengths .: 127 127 127
> > *PIN retry counter : 2 3 3                 <===== NOTE DECREMENT*
> >
> > (end transcript)
> >
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20190130/0cffb575/attachment.html>

From gniibe at fsij.org  Thu Jan 31 08:19:25 2019
From: gniibe at fsij.org (NIIBE Yutaka)
Date: Thu, 31 Jan 2019 16:19:25 +0900
Subject: Possible bug or opportunity for user error with admin/user
 password
In-Reply-To: <0da0187b-4a5f-3f92-f4e3-8457668cbd9c@digitalbrains.com>
References: <CACi+kjpQ4ioN1uK47pGcySUMj-EkHe9j_RmveTHWX8fCy4vGFg@mail.gmail.com>
 <fb512dd2-6236-d094-038a-ab817178ca30@digitalbrains.com>
 <CACi+kjrkCm_tq1N5Ppv+8P6tcKHjeHyhOgk+1M4T_FBWjHVa1w@mail.gmail.com>
 <87ef8ucafl.fsf@wheatstone.g10code.de>
 <0da0187b-4a5f-3f92-f4e3-8457668cbd9c@digitalbrains.com>
Message-ID: <877eele1ky.fsf@c720>

Hello,

BTW, I'm glad to see Gnuk on ST_DONGLE is running.  It might confuse a
border official effectively, when there is such an opportunity.  No, I
don't have any experience, though.

I know the issue in question.  I reported in 2011 to GnuPG mailing list,
and had a note:

https://www.gniibe.org/log/bugreport/gnupg/openpgp-card-spec-2.0-chenge-reference-data.html

Peter Lebbing <peter at digitalbrains.com> wrote:
> Hmmmm, even then I think it's overzealous optimization, given the
> problem at hand. You'd need one byte more in your packet buffer, but
> will CHANGE REFERENCE DATA often be the largest packet in your card
> application (and hence determine the size of your buffer)? Even if that
> were the case, they should have thought of a clever solution :-).
>
> I suspect they simply forgot this special case, thinking "the length is
> known", without asking themselves "to whom?".

I have same suspect.

Anyway, my "solution" is using KDF feature.  With KDF feature, the
length is fixed, so, no such problem.

I think that KDF feature is mature, now.  Having GnuPG 2.2 in Debian
backports, I can promote the use this year.  I will write a short howto.
-- 


From gniibe at fsij.org  Thu Jan 31 08:34:05 2019
From: gniibe at fsij.org (NIIBE Yutaka)
Date: Thu, 31 Jan 2019 16:34:05 +0900
Subject: FOSDEM and FST-01SZ
Message-ID: <874l9pe0wi.fsf@c720>

Hello,

I'm now in Brussels, after visiting Hong Kong.  I now have FST-01SZ!

Last year, when I sent a talk proposal to FOSDEM, I was not sure if the
product would be available or not.  Happily, here is the one.

FST-01SZ consists of two parts:

* Board with GD32F103TB
* Metal shell

The board is in the shell, but a user can examine the board by pulling
the board from the shell.  And he can put his own firmware through SWD
port.  It is a user who put the board and bend two nails.

Next, he can put the board in the shell into another enclosure (it's an
option).

In the photo, you can find a metal enclosure with a little hole.  The
hole is for LED light.  There are many type of enclosures (plastic,
metal, wood, etc.) in China, since the form factor of the metal shell is
a kind of de-facto standard.  When we can buy many (like >= 1000), we
can ask customization like putting logo.

Putting the metal shell to this metal case is one-way procedure.  It is
not (easily) possible to pull the board out again.  This can be
considered "feature", in terms of tamper resistance.


I wish you happy forthcoming FOSDEM and Chinese New Year.
-- 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: IMG_20190128_130220_IMGP.jpg
Type: image/jpeg
Size: 80505 bytes
Desc: FST-01SZ with a metal case
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20190131/c322f259/attachment.jpg>

From frederic.suel at free.fr  Thu Jan 31 10:56:51 2019
From: frederic.suel at free.fr (=?UTF-8?B?RnLDqWTDqXJpYyBTVUVM?=)
Date: Thu, 31 Jan 2019 10:56:51 +0100
Subject: Possible bug or opportunity for user error with admin/user
 password
In-Reply-To: <877eele1ky.fsf@c720>
References: <CACi+kjpQ4ioN1uK47pGcySUMj-EkHe9j_RmveTHWX8fCy4vGFg@mail.gmail.com>
 <fb512dd2-6236-d094-038a-ab817178ca30@digitalbrains.com>
 <CACi+kjrkCm_tq1N5Ppv+8P6tcKHjeHyhOgk+1M4T_FBWjHVa1w@mail.gmail.com>
 <87ef8ucafl.fsf@wheatstone.g10code.de>
 <0da0187b-4a5f-3f92-f4e3-8457668cbd9c@digitalbrains.com>
 <877eele1ky.fsf@c720>
Message-ID: <014af178-8c33-a77b-37ed-a8889ffc7b11@free.fr>

Hello,

I confirm that chinese ST-DONGLE V2 clone is running too. I find a clone
call "MX-LINK V2 of 2018-02-18" which has two leds and a STM32F103CBU6
(72 Mhz) processor instead of STM32F101CB1b (36 Mhz) as usual in this
type of clone. For the usual clone, you have to change in configure MHZ
from 72 to 36 before to compile.

I confirm too that MX-LINK V2 clone run fine as NEUG TRNG on Debian.

It can be find in some Chinese vendors, the picture on the clone is a
big M instead of noting or a big ST.

Fr?d?ric

Le 31/01/2019 ? 08:19, NIIBE Yutaka a ?crit?:
> Hello,
>
> BTW, I'm glad to see Gnuk on ST_DONGLE is running.  It might confuse a
> border official effectively, when there is such an opportunity.  No, I
> don't have any experience, though.
>
> I know the issue in question.  I reported in 2011 to GnuPG mailing list,
> and had a note:
>
> https://www.gniibe.org/log/bugreport/gnupg/openpgp-card-spec-2.0-chenge-reference-data.html
>
> Peter Lebbing <peter at digitalbrains.com> wrote:
>> Hmmmm, even then I think it's overzealous optimization, given the
>> problem at hand. You'd need one byte more in your packet buffer, but
>> will CHANGE REFERENCE DATA often be the largest packet in your card
>> application (and hence determine the size of your buffer)? Even if that
>> were the case, they should have thought of a clever solution :-).
>>
>> I suspect they simply forgot this special case, thinking "the length is
>> known", without asking themselves "to whom?".
> I have same suspect.
>
> Anyway, my "solution" is using KDF feature.  With KDF feature, the
> length is fixed, so, no such problem.
>
> I think that KDF feature is mature, now.  Having GnuPG 2.2 in Debian
> backports, I can promote the use this year.  I will write a short howto.


From noodles at earth.li  Thu Jan 31 13:23:25 2019
From: noodles at earth.li (Jonathan McDowell)
Date: Thu, 31 Jan 2019 12:23:25 +0000
Subject: FOSDEM and FST-01SZ
In-Reply-To: <874l9pe0wi.fsf@c720>
References: <874l9pe0wi.fsf@c720>
Message-ID: <20190131122325.zt53hpf72b6uldgo@earth.li>

On Thu, Jan 31, 2019 at 04:34:05PM +0900, NIIBE Yutaka wrote:
> I'm now in Brussels, after visiting Hong Kong.  I now have FST-01SZ!
> 
> Last year, when I sent a talk proposal to FOSDEM, I was not sure if the
> product would be available or not.  Happily, here is the one.
> 
> FST-01SZ consists of two parts:
> 
> * Board with GD32F103TB
> * Metal shell
> 
> The board is in the shell, but a user can examine the board by pulling
> the board from the shell.  And he can put his own firmware through SWD
> port.  It is a user who put the board and bend two nails.

Very nice! Now my only wishlist item missing is a button to confirm
signing. ;) Do you have any idea what pricing for the new device + case
is likely to be?

J.

-- 
Are you out of my mind?


From gniibe at fsij.org  Fri Feb  1 14:47:41 2019
From: gniibe at fsij.org (NIIBE Yutaka)
Date: Fri, 01 Feb 2019 22:47:41 +0900
Subject: FOSDEM and FST-01SZ
In-Reply-To: <20190131122325.zt53hpf72b6uldgo@earth.li>
References: <874l9pe0wi.fsf@c720> <20190131122325.zt53hpf72b6uldgo@earth.li>
Message-ID: <87zhrfy60y.fsf@c720>

Jonathan McDowell <noodles at earth.li> wrote:
> Very nice!

Glad to hear that. :-)

> Now my only wishlist item missing is a button to confirm signing.

Yes, I remember.

Since I put a hall effect sensor on FST-01SZ, you can use magnet
movement to acknowledge signing/decryption/authentication request from
host PC.  It is a feature added in OpenPGPcard specification, and
recent GnuPG 2.2 supports this, with pop-up window to notify a user,
if you use internal CCID driver.

I'm testing FST-01SZ prototype + magnet for five months.  My opinion is:
for me, enabling the interaction for singing/authentication makes sense
in some situations, but it is questionable for decryption, because my
practice is removing Gnuk Token when not needed, and I don't want to
move off my hands from keyboard to acknowledge decryption.

My decision is not a button but a hall effect sensor, because I have an
experience (with FS-BB48), having button on a surface of a board is not
good for electrical connection of USB.  And having capacitive touch
button on a edge is difficult for me.

I hope you can use a magnet for the interaction.

> Do you have any idea what pricing for the new device + case is likely
> to be?

At FOSDEM, from me, it is 30 Euro.  Please note that I only have 10
cases this time (I got them as sample), and there is no logo on that
(GnuPG, Gnuk, or whatever).  I bring plenty of FST-01SZ, it is 25 Euro.

I wish I will able to arrange the order of metal case, in order to ask
distribution of FST-01SZ + case from FSF (as same price setting as
FST-01 and FST-01G).  Now I'm not sure if I can put some logo (the
number matters!).  It may be with no logo.

Note that FST-01G is still available from FSF.  I only have a few of
them.
-- 


From tomli at tomli.me  Wed Feb  6 18:54:41 2019
From: tomli at tomli.me (Tom Li)
Date: Thu, 7 Feb 2019 01:54:41 +0800
Subject: Utilizing Memory Protection Unit on STM32?
Message-ID: <20190206175441.GA17636@localhost.localdomain>

Hello.

It's clear on the datasheet that the Cortex M3-series of microcontroller
cores have an optional Memory Protection Unit (MPU), which is provided
by both STM32 and GD32's chips. Having a memory protection mechanism
can help reducing the impact of an accidental buffer overflows in gnuk,
thus improving security.

I'm still new to the Cortex M3 architecture. My question is, how feasible
is it to introduce new code to utilize the memory protection unit? Can
we simply mark the stack of each chopstx process as non-executable? If
it's difficult, what is the main obstacle preventing it from being
used? It seems to me, that the memory region-based model may potentially
be somewhat inflexible to deal with.

Thanks! And congrat on the successful production of FST-01SZ, I wish you
are enjoying the FOSDEM conference of this year.

Tom Li
Beijing GNU/Linux User Group
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 833 bytes
Desc: not available
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20190207/25cf77d0/attachment.sig>

From peter at digitalbrains.com  Wed Feb  6 20:47:23 2019
From: peter at digitalbrains.com (Peter Lebbing)
Date: Wed, 6 Feb 2019 20:47:23 +0100
Subject: Utilizing Memory Protection Unit on STM32?
In-Reply-To: <20190206175441.GA17636@localhost.localdomain>
References: <20190206175441.GA17636@localhost.localdomain>
Message-ID: <b08f0997-b51b-916b-0da8-8b01776bed85@digitalbrains.com>

On 06/02/2019 18:54, Tom Li via Gnuk-users wrote:
> It's clear on the datasheet that the Cortex M3-series of microcontroller
> cores have an optional Memory Protection Unit (MPU), which is provided
> by both STM32 and GD32's chips.

Are you sure? The Cortex-M3 Programming Manual (PM0056) says:

> Refer to the corresponding device datasheet to see if the MPU is
> present in the STM32 type you are using.

If we now compare the datasheet for the STM32F103CB, the medium-density
device used in the GnuK, to an XL-density device like the STM32F103RFT,
I notice that the former has the following subsections of section 2.3:

| 2.3 Overview
| 2.3.1 ARM ? Cortex ? -M3 core with embedded Flash and SRAM
| 2.3.2 Embedded Flash memory
| 2.3.3 CRC (cyclic redundancy check) calculation unit
| 2.3.4 Embedded SRAM
| [...]

Whereas the latter, the XL-density part has:

| 2.3 Overview
| 2.3.1 ARM? Cortex?-M3 core with embedded Flash and SRAM
| 2.3.2 Memory protection
| 2.3.3 Embedded Flash memory
| 2.3.4 CRC (cyclic redundancy check) calculation unit
| 2.3.5 Embedded SRAM
| [...]

I must say, they could have presented this information in a much easier
way, but I think you're mistaken that the 103CB has an MPU. It's too
bad.

I also looked at the datasheet for a high-density device (in between the
103CB and the 103RFT), but it seemed to be missing the MPU as well.

I didn't check the GD32 part, but it would be quite a hefty upgrade if
they chose to include the MPU silicon on their version of the 103CB!

HTH,

Peter.

-- 
I use the GNU Privacy Guard (GnuPG) in combination with Enigmail.
You can send me encrypted mail if you want some privacy.
My key is available at <http://digitalbrains.com/2012/openpgp-key-peter>

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 488 bytes
Desc: OpenPGP digital signature
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20190206/ad8fbb70/attachment.sig>

From tomli at tomli.me  Wed Feb  6 21:31:18 2019
From: tomli at tomli.me (Tom Li)
Date: Thu, 7 Feb 2019 04:31:18 +0800
Subject: Utilizing Memory Protection Unit on STM32?
In-Reply-To: <b08f0997-b51b-916b-0da8-8b01776bed85@digitalbrains.com>
References: <20190206175441.GA17636@localhost.localdomain>
 <b08f0997-b51b-916b-0da8-8b01776bed85@digitalbrains.com>
Message-ID: <20190206203118.GC17636@localhost.localdomain>

On Wed, Feb 06, 2019 at 08:47:23PM +0100, Peter Lebbing wrote:
> On 06/02/2019 18:54, Tom Li via Gnuk-users wrote:
> > It's clear on the datasheet that the Cortex M3-series of microcontroller
> > cores have an optional Memory Protection Unit (MPU), which is provided
> > by both STM32 and GD32's chips.
> 
> Are you sure? The Cortex-M3 Programming Manual (PM0056) says:
> [...]
>
> I also looked at the datasheet for a high-density device (in between the
> 103CB and the 103RFT), but it seemed to be missing the MPU as well.
> 
> I didn't check the GD32 part, but it would be quite a hefty upgrade if
> they chose to include the MPU silicon on their version of the 103CB!
> 
> HTH,
> 
> Peter.

Oops, Nevermind. I'm wrong.

I've just reviewed the GD32F103 datasheet, it only does mention the Memory
Protection Unit, but it only says the MPU can be provided by Cortex-M3 core
without additional notes. So it's not in fact supported.

I was reviewing a bunch of different datasheets in a Sunday afternoon in
2018, including F and L series from different vendor. The bulletpoint of
the MPU in GD32 datasheet probably confused me and I mixed them up.

Tom Li
Beijing GNU/Linux User Group.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 833 bytes
Desc: not available
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20190207/b6860792/attachment.sig>

From peter at digitalbrains.com  Thu Feb  7 17:06:30 2019
From: peter at digitalbrains.com (Peter Lebbing)
Date: Thu, 7 Feb 2019 17:06:30 +0100
Subject: Where to buy 128K st-links?
In-Reply-To: <20181223123415.aitpxwk4jkxejo4g@kartoffel.localdomain>
References: <20181223123415.aitpxwk4jkxejo4g@kartoffel.localdomain>
Message-ID: <5f6af451-929e-1a02-97be-d341d12e6e14@digitalbrains.com>

On 23/12/2018 13:34, Pablo Ovelleiro Corral wrote:
> Can anybody link me to a suppliers of those chips that delivers the
> 128K flash version? Has anybody build this and can share his
> experieces and where he got the device?

I was curious about chips other than the STM32F103CB capable of being
used as though they were, and these things are cheap. So I bought the
following three:

https://www.aliexpress.com/item/1Set-ST-LINK-Stlink-ST-Link-V2-Mini-STM8-STM32-Simulator-Download-Programmer-Programming-With-Cover/32869967486.html

https://www.aliexpress.com/item/ST-LINK-Stlink-ST-Link-V2-Mini-STM8-STM32-Simulator-Download-Programmer-Programming-with-Cover/32921831799.html

https://www.aliexpress.com/item/ST-Link-V2-new-stlink-mini-STM8STM32-STLINK-simulator-download-programming-With-Cover/32719963657.html

Now, I just /might/ have mixed them up upon reception, but I don't think
so. The first two have an STM32F103C8, which is officially the 64 KiB
version, but in all likelihood have 128 KiB.

The third one, the one from the WAVGAT Store, was more interesting. It
has a chip marked

| STM32
| GC102CB
| GH213 9U
| CHNO46

which you can see here:

http://digitalbrains.com/tmp/WAVGAT-ST-Link-v2-?C

I couldn't find what a GC102 is, does anybody know? Anyway, it reports
itself as a medium-density F10x does. I kinda forgot to save the log of
that OpenOCD session, but here is the output for a proper STM32F103CB:

| SWD IDCODE 0x1ba01477
| > flash probe 0
| device id = 0x20036410
| flash size = 128kbytes
| flash 'stm32f1x' found at 0x08000000

And I remember that this GC102CB reported the same numbers.

I checked the memory, and it has 128 KiB of flash and 20 KiB of RAM. I
used SWD to fill both memories with 32-bit words containing the word
address being programmed as the data, and I could read it back
succesfully. So the first word programmed to memory was 0x00000000, the
second word 0x00000001, etcetera. This should catch any address aliasing
occurring, and it worked fine. As soon as you tried to write beyond the
20 KiB RAM, OpenOCD would throw an error.

I flashed this thing with GnuK and am using it to see if there are any
(stability?) issues. It works, *but* I did notice that reGNUal failed!
So it is not 100% equal to an F103CB.

So if you order one of the others, you have a fair chance of receiving a
F103C8, which should be 128 KiB despite it not being marked as such. I
ordered another 5 from different suppliers to see what I'll get. I think
it's interesting to look at to what extent these chips that are marked
differently are usable, but I'm not giving it any priority at the
moment.

Does anybody know what the *bleep* an STM32GC102 is? What are
interesting registers to look at? I see the SWD IDCODE, the
DBGMCU_IDCODE register at 0xE0042000 (that's "device id" in the output
above) and the Flash size register at 0x1FFFF7E0, are there any more
interesting ones? I plan to compare a complete register space dump in
the future, but if it's too noisy I'll forego that avenue. I'm
currently using the device as a GnuK, so I can't do anything with it at
the moment.

This ST-Link V2 with the GC102 chip is running a normal GnuK fine, it's
config string is
Config: ST_DONGLE:dfu=no:debug=no:pinpad=no:certdo=yes:factory_reset=yes

I've seen people say they lowered the CPU clock frequency. I didn't
change a thing, so it's probably running at the normal 72 MHz, because I
think the USB will not work if the crystal doesn't match. So apparently
it matches.

This mail is signed with the device in question :-).

HTH,

Peter.

-- 
I use the GNU Privacy Guard (GnuPG) in combination with Enigmail.
You can send me encrypted mail if you want some privacy.
My key is available at <http://digitalbrains.com/2012/openpgp-key-peter>

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 488 bytes
Desc: OpenPGP digital signature
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20190207/b155dcb3/attachment.sig>

From dmanriq at gmail.com  Fri Feb 22 16:15:54 2019
From: dmanriq at gmail.com (Daniel Manrique)
Date: Fri, 22 Feb 2019 10:15:54 -0500
Subject: Private data objects
Message-ID: <CAF680uegS=BXpJ3ATSWVbvig=7iEKECnQqPefpD_6rsW+JxHdQ@mail.gmail.com>

Hi,

I've been testing gnuk on a st-link stick for some weeks now. In general it
works pretty well. I'm very happy with it and very grateful for Niibe's
great work.

One thing that I've noted is that gnuk doesn't seem to implement the
private data objects (DO1-4) from the openpgp card specification. In my
case that's what currently prevents me to fully adopt gnuk instead of still
relying on a smartcard.

My question is: are there plans to implement the private data objects? how
difficult would be to do it?

Thank you very much for your help!

Daniel
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20190222/949a2859/attachment.html>

From gniibe at fsij.org  Sat Mar  2 01:00:43 2019
From: gniibe at fsij.org (NIIBE Yutaka)
Date: Sat, 02 Mar 2019 09:00:43 +0900
Subject: Chopstx 1.14
Message-ID: <87zhqem9g4.fsf@c720>

Hello,

Chopstx 1.14 is released.

	tag release/1.14
	Tagger: NIIBE Yutaka <gniibe at fsij.org>
	Date:   Sat Mar 2 08:49:13 2019 +0900
	commit aeea3c31f8dab3e5920e4c35f6199b519f928c79


The change is only USART driver for STM32.

	* Enhancement of driver: USART for STM32
	Now, it supports smartcard communication.


With this, I started developing smartcard reader.  See:

    https://identi.ca/gniibe/image/C6-E_MdgTUyH-fclCh_ONQ
-- 


From dmanriq at gmail.com  Sat Mar  2 02:12:38 2019
From: dmanriq at gmail.com (Daniel Manrique)
Date: Fri, 1 Mar 2019 20:12:38 -0500
Subject: Private data objects
Message-ID: <CAF680ueg41125jRCd42PY9jFuexAqhNczZvrGtfc0EWTAe1tRw@mail.gmail.com>

(I have tried to send this message before but didn't seem to make it
through. My apologies if you receive it twice.)

Hi,

I've been testing gnuk on a st-link stick for some weeks now. In general it
works pretty well. I'm very happy with it and very grateful for Niibe's
great work.

One thing that I've noted is that gnuk doesn't seem to implement the
private data objects (DO1-4) from the openpgp card specification. In my
case that's what currently prevents me to fully adopt gnuk instead of still
relying on a smartcard.

My question is: are there plans to implement the private data objects? how
difficult would be to do it?

Thank you very much for your help!
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20190301/403567f0/attachment.html>

From gniibe at fsij.org  Mon Mar  4 01:01:52 2019
From: gniibe at fsij.org (NIIBE Yutaka)
Date: Mon, 04 Mar 2019 09:01:52 +0900
Subject: Private data objects
In-Reply-To: <CAF680ueg41125jRCd42PY9jFuexAqhNczZvrGtfc0EWTAe1tRw@mail.gmail.com>
References: <CAF680ueg41125jRCd42PY9jFuexAqhNczZvrGtfc0EWTAe1tRw@mail.gmail.com>
Message-ID: <87a7iby0b3.fsf@iwagami.gniibe.org>

Daniel Manrique <dmanriq at gmail.com> wrote:
> One thing that I've noted is that gnuk doesn't seem to implement the
> private data objects (DO1-4) from the openpgp card specification. In my
> case that's what currently prevents me to fully adopt gnuk instead of still
> relying on a smartcard.
>
> My question is: are there plans to implement the private data objects? how
> difficult would be to do it?

Please note that Gnuk doesn't implement all (possible) features of
OpenPGPcard specification.  Keeping out some feature(s) makes sense.
Keeping the implementation stupid and simpler is also important.

Well, for example, I somehow regret my adding support of ACK button
feature (though I don't have any idea removing that).  I did that
because the feature was added in V3 specification, and I was not sure if
it were useful.  For six-month experience, my own judgement is that it's
not that useful for my use case.


Back to the specific feature, let me explain about DO1-4 and certificate
object(s).  I don't support those objects because of three reasons;
there is no good definition how those can be used and useful.
Implementing those objects interferes lower-level communication, and
there may be not enough room to keep those objects in flash memory
anyway.

Certificate object support is now compile time option.  Until V2
specification, it is a single object.  In V3 specification, it is
enhanced to three objects.  Gnuk can support one, but writing the object
is supported incompatible way while reading is compatible.


If you want to support DO1-4 objects (with the limitation of less than
256 bytes), I'd suggest start your experiment from enhancing Gnuk by
adding support of read-only compile-time defined objects.  Then, you can
proceed adding flash memory management for those objects... to support
writing objects.

Supporting larger size, I think that we need to modify our
implementation of communication protocol (of ISO 7816), or we need to
support larger-size object by introducing some
peculiar/incompatible/ugly method like we did for certificate object.
The former would require larger surgery of implementation.
-- 


From gniibe at fsij.org  Mon Mar  4 04:08:40 2019
From: gniibe at fsij.org (NIIBE Yutaka)
Date: Mon, 04 Mar 2019 12:08:40 +0900
Subject: Gnuk 1.2.14
Message-ID: <875zszxrnr.fsf@iwagami.gniibe.org>

Hello,

Gnuk 1.2.14 is released.

	tag release/1.2.14
	Tagger: NIIBE Yutaka <gniibe at fsij.org>
	Date:   Mon Mar 4 12:01:38 2019 +0900
	commit 177ef67edfa2306c2a369a037362385c354083e1

The changes are:

* Timeout for ACK button support

* Upgrade of Chopstx to 1.14

-- 


From email at kmkcl.de  Mon Mar  4 05:43:46 2019
From: email at kmkcl.de (=?UTF-8?Q?Karsten_M=c3=bcller?=)
Date: Mon, 4 Mar 2019 05:43:46 +0100
Subject: gnuk with GD32F103
In-Reply-To: <871s5jbsxw.fsf@fsij.org>
References: <d40b3d22-d43f-f006-f220-c1c321bfbc50@kmkcl.de>
 <871s5jbsxw.fsf@fsij.org>
Message-ID: <ebbb5529-fdd3-d286-7237-3efd7fb07167@kmkcl.de>

Hello,

thank you very much for your response. At this weekend I had some time
to do some further trials...
So I adapted the design to FST01-SZ. But it does not work and I have no
clue what to do next. 

That is my current status:

* PCB is based on FST-01, without SPI-Chip (and other pin for USB-EN -
like nitrokey_start)
* Software compiles and works on STM32F103
* on PCB with GD32F103, programming with a simple hello world program
works and also all connections (pin toggling with test program) and
oscillator/PLL... - so chip seems OK
* Software is compiled with --target=FST01_SZ (and check, that it is
compiled with -DMHZ=96)
* with logic analyzer no USB-Packets are detected (in contrast to
STM32F103 version)
* I also test with and without USB-EN pin (once in software - comment
out define, once in hardware by desoldering resistor)
* on STM32 it only works with both enabled, on GD32 nothing works.

I wonder, because for me it seems that USB-EN is not really necessary?
(FST01_SZ version does not have this pin)

My suggestion is, that either hardware or software (maybe compile
process?) is faulty...
I know, it is against the idea/license to share binarys, but would it be
possible to get a working binary for testing ( I think, vidpid equals
zero would be OK, because there has to be any USB communication which
can be seen on logic analyzer) or a other method to test my compiled
software?

I would be happy for any hints or ideas for target-oriented debugging.

sincerely,
Karsten M?ller



From gniibe at fsij.org  Mon Mar  4 06:36:09 2019
From: gniibe at fsij.org (NIIBE Yutaka)
Date: Mon, 04 Mar 2019 14:36:09 +0900
Subject: gnuk with GD32F103
In-Reply-To: <ebbb5529-fdd3-d286-7237-3efd7fb07167@kmkcl.de>
References: <d40b3d22-d43f-f006-f220-c1c321bfbc50@kmkcl.de>
 <871s5jbsxw.fsf@fsij.org> <ebbb5529-fdd3-d286-7237-3efd7fb07167@kmkcl.de>
Message-ID: <874l8jmcae.fsf@c720>

Karsten M?ller <email at kmkcl.de> wrote:
> * PCB is based on FST-01, without SPI-Chip (and other pin for USB-EN -
> like nitrokey_start)

FST-01G and FST-01SZ don't use USB-EN any more.  I removed the pin
because it is not needed.  I know a design with USB-EN, like Maple-Mini,
and that is a reason why FST-01 has that.

The intended use of USB-EN in FST-01 was for a device to ask host to do
re-enumeration.  For this purpose, simply driving USB signals (D+ and
D-) to GND is actually OK.  For strict conformance to the USB
specification, it's better supporting high impedance state of D+.  But,
(for me), the fixed pull-up of D+ can be acceptable, as long as it
works.

In short, I suggest removing USB-EN.  Please have a look at FST-01SZ
schematics, it pulls-up D+ line to +3V3 directly (no USB-EN control at
all).

> * I also test with and without USB-EN pin (once in software - comment
> out define, once in hardware by desoldering resistor)

The resistor should be there to pull up D+ line to +3V3.  Having USB-EN
means, it is configurable (pull-up to +3V3 or not).  "Removing" should
be being fixed to pull up to +3V3, not removing the registor itself.

In chopstx/board/board-fst-01.h, hardware pin of USB-EN pin (PA10) is
designated to the pin which usb_cable_config function controls.  In
chopstx/board/board-fst-01g.h and chopstx/board/board-fst-01sz.h, there
is nothing.

So, if you use FST-01SZ configuration for a hardware with USB-EN, USB
functionality is simply not available.  To enable USB functionality, you
need to put a resistor (1K5) to pull up to +3V3.
-- 


From email at kmkcl.de  Tue Mar  5 19:07:52 2019
From: email at kmkcl.de (=?UTF-8?Q?Karsten_M=c3=bcller?=)
Date: Tue, 5 Mar 2019 19:07:52 +0100
Subject: gnuk with GD32F103
In-Reply-To: <874l8jmcae.fsf@c720>
References: <d40b3d22-d43f-f006-f220-c1c321bfbc50@kmkcl.de>
 <871s5jbsxw.fsf@fsij.org> <ebbb5529-fdd3-d286-7237-3efd7fb07167@kmkcl.de>
 <874l8jmcae.fsf@c720>
Message-ID: <637eb289-98c4-4bc8-90e4-e474641c3560@kmkcl.de>

Hello,

thank you very much, I am happy that it works now.

Am 04.03.19 um 06:36 schrieb NIIBE Yutaka:
> FST-01G and FST-01SZ don't use USB-EN any more.  I removed the pin
> because it is not needed.  I know a design with USB-EN, like Maple-Mini,
> and that is a reason why FST-01 has that.
>
> The intended use of USB-EN in FST-01 was for a device to ask host to do
> re-enumeration.  For this purpose, simply driving USB signals (D+ and
> D-) to GND is actually OK.  For strict conformance to the USB
> specification, it's better supporting high impedance state of D+.  But,
> (for me), the fixed pull-up of D+ can be acceptable, as long as it
> works.

Thanks for explanation.

> In short, I suggest removing USB-EN.  Please have a look at FST-01SZ
> schematics, it pulls-up D+ line to +3V3 directly (no USB-EN control at
> all).
While reading I realized that ESD-Protection NUF2221W1 has an integrated
pullup.

When designing PCB I choose an other TVS diode and use discrete series
resistors (like in nitrokey start) but I overlooked pullup resistance in
datasheet.

Thanks,

Karsten




From ardavast at noiseoverip.com  Thu Mar 14 16:00:24 2019
From: ardavast at noiseoverip.com (Ardavast Dayleryan)
Date: Thu, 14 Mar 2019 17:00:24 +0200
Subject: ST-LINK/V2 ID 0000:0000
Message-ID: <CAG=VjEn39xAO=5Or1Z6CtFB=CgbC==sEsCd_gnhvLUPuNHbaBQ@mail.gmail.com>

Hello,

I saw that there was a similar thread here before, but I still can't
understand what am I doing wrong.
The versions are:
gnuk: 177ef67edfa2306c2a369a037362385c354083e1 (release/1.2.14)
chopstx: aeea3c31f8dab3e5920e4c35f6199b519f928c79 (release/1.14)

I run Ubuntu 18.04, so I used the toolchain from here:
https://developer.arm.com/open-source/gnu-toolchain/gnu-rm/downloads
I compiled gnuk with these commands:
./configure --vidpid=234b:0000 --target=ST_DONGLE
make
CROSS=/home/ardavast/Downloads/gcc-arm-none-eabi-8-2018-q4-major/bin/arm-none-eabi-
build/gnuk-vidpid.bin

I flashed an ST-LINK/V2 device with OpenOCD:
reset halt
stm32f1x unlock 0
reset halt
stm32f1x mass_erase 0
flash write_bank 0 /home/ardavast/src/gnuk-orig/src/build/gnuk-vidpid.bin 0
stm32f1x lock 0
reset halt

After plugging the device, I get the following:
dmesg:
[ 8192.537428] usb 3-3: new full-speed USB device number 45 using xhci_hcd
[ 8192.686923] usb 3-3: New USB device found, idVendor=0000, idProduct=0000
[ 8192.686928] usb 3-3: New USB device strings: Mfr=1, Product=2,
SerialNumber=3
[ 8192.686931] usb 3-3: Product: Gnuk Token
[ 8192.686934] usb 3-3: Manufacturer: Free Software Initiative of Japan
[ 8192.686937] usb 3-3: SerialNumber: FSIJ-1.2.14-67023331

usb-devices:
T:  Bus=03 Lev=01 Prnt=01 Port=02 Cnt=01 Dev#= 45 Spd=12  MxCh= 0
D:  Ver= 2.00 Cls=00(>ifc ) Sub=00 Prot=00 MxPS=64 #Cfgs=  1
P:  Vendor=0000 ProdID=0000 Rev=00.00
S:  Manufacturer=Free Software Initiative of Japan
S:  Product=Gnuk Token
S:  SerialNumber=FSIJ-1.2.14-67023331
C:  #Ifs= 1 Cfg#= 1 Atr=80 MxPwr=100mA
I:  If#= 0 Alt= 0 #EPs= 3 Cls=0b(scard) Sub=00 Prot=00 Driver=(none)
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20190314/9cca068a/attachment.html>

From peter at digitalbrains.com  Thu Mar 14 18:02:22 2019
From: peter at digitalbrains.com (Peter Lebbing)
Date: Thu, 14 Mar 2019 18:02:22 +0100
Subject: ST-LINK/V2 ID 0000:0000
In-Reply-To: <CAG=VjEn39xAO=5Or1Z6CtFB=CgbC==sEsCd_gnhvLUPuNHbaBQ@mail.gmail.com>
References: <CAG=VjEn39xAO=5Or1Z6CtFB=CgbC==sEsCd_gnhvLUPuNHbaBQ@mail.gmail.com>
Message-ID: <7fbbc9b1-82eb-e426-9dbc-d6f307a35414@digitalbrains.com>

On 14/03/2019 16:00, Ardavast Dayleryan wrote:
> make CROSS=/home/ardavast/Downloads/gcc-arm-none-eabi-8-2018-q4-major/bin/arm-none-eabi- build/gnuk-vidpid.bin

Ooh... that target is a leftover from before the targets were
gnuk-no-vidpid.elf and gnuk.elf. You should probably omit the target
completely for future compatibility, but the current default target is
'all'.

I suggest doing:

make CROSS=/home/ardavast/Downloads/gcc-arm-none-eabi-8-2018-q4-major/bin/arm-none-eabi-

But this is currently the same:

make CROSS=/home/ardavast/Downloads/gcc-arm-none-eabi-8-2018-q4-major/bin/arm-none-eabi- all

Then you get build/gnuk.bin to flash to the chip, rather than
build/gnuk-vidpid.bin.

Background: it was decided to rename the old gnuk.elf target that
omitted the VID/PID to gnuk-novidpid.elf, and the
gnuk-vidpid.{elf,bin,hex} targets that contain the VID/PID to
gnuk.{elf,bin,hex}. 

HTH,

Peter.

-- 
I use the GNU Privacy Guard (GnuPG) in combination with Enigmail.
You can send me encrypted mail if you want some privacy.
My key is available at <http://digitalbrains.com/2012/openpgp-key-peter>


From peter at digitalbrains.com  Thu Mar 14 18:07:18 2019
From: peter at digitalbrains.com (Peter Lebbing)
Date: Thu, 14 Mar 2019 18:07:18 +0100
Subject: ST-LINK/V2 ID 0000:0000
In-Reply-To: <7fbbc9b1-82eb-e426-9dbc-d6f307a35414@digitalbrains.com>
References: <CAG=VjEn39xAO=5Or1Z6CtFB=CgbC==sEsCd_gnhvLUPuNHbaBQ@mail.gmail.com>
 <7fbbc9b1-82eb-e426-9dbc-d6f307a35414@digitalbrains.com>
Message-ID: <9ffabf8a-3598-4e4f-697b-2c09e6a6e405@digitalbrains.com>

On 14/03/2019 18:02, Peter Lebbing wrote:
> Ooh... that target is a leftover from before the targets were
> gnuk-no-vidpid.elf and gnuk.elf.

I jumped to conclusions; I reckoned it was accidentally still in the Makefile, 
but it is not there. I see a ChangeLog entry for version 1.2.10 released on 
2018-05-10 that mentions removing the target. So that raises the question: what 
version are you trying to compile? I strongly suspect you should stick to the 
latest released version to get relevant bug fixes. And a pre-1.2.10 version 
would really be very old indeed.

HTH,

Peter.

-- 
I use the GNU Privacy Guard (GnuPG) in combination with Enigmail.
You can send me encrypted mail if you want some privacy.
My key is available at <http://digitalbrains.com/2012/openpgp-key-peter>


From peter at digitalbrains.com  Thu Mar 14 18:19:04 2019
From: peter at digitalbrains.com (Peter Lebbing)
Date: Thu, 14 Mar 2019 18:19:04 +0100
Subject: ST-LINK/V2 ID 0000:0000
In-Reply-To: <9ffabf8a-3598-4e4f-697b-2c09e6a6e405@digitalbrains.com>
References: <CAG=VjEn39xAO=5Or1Z6CtFB=CgbC==sEsCd_gnhvLUPuNHbaBQ@mail.gmail.com>
 <7fbbc9b1-82eb-e426-9dbc-d6f307a35414@digitalbrains.com>
 <9ffabf8a-3598-4e4f-697b-2c09e6a6e405@digitalbrains.com>
Message-ID: <82b4bf87-6de6-d8c7-78e7-8b6cc26b4934@digitalbrains.com>

On 14/03/2019 18:07, Peter Lebbing wrote:
> So that raises the question: what version are you trying to compile?

Wow, I'm trying to be helpful but I'm generating a lot of noise. You already 
mentioned that, and I can reproduce it.

GNU make will automatically compute the target gnuk-vidpin.bin and intermediate 
gnuk-vidpid.elf, and the chopstx rules.mk is written in such a way that it 
actually wildcards any elf file to build the project! So you could write 
build/my-cool-project.bin and it would actually build something equal to 
gnuk-no-vidpid.elf! Haha.

So it's back to my suggestion in the first mail: don't give a target, or if you 
feel you must, specify 'all'. For curiosity's sake, build/gnuk.bin will also work.

HTH,

Peter.

-- 
I use the GNU Privacy Guard (GnuPG) in combination with Enigmail.
You can send me encrypted mail if you want some privacy.
My key is available at <http://digitalbrains.com/2012/openpgp-key-peter>


From ardavast at noiseoverip.com  Fri Mar 15 18:24:35 2019
From: ardavast at noiseoverip.com (Ardavast Dayleryan)
Date: Fri, 15 Mar 2019 19:24:35 +0200
Subject: ST-LINK/V2 ID 0000:0000
In-Reply-To: <82b4bf87-6de6-d8c7-78e7-8b6cc26b4934@digitalbrains.com>
References: <CAG=VjEn39xAO=5Or1Z6CtFB=CgbC==sEsCd_gnhvLUPuNHbaBQ@mail.gmail.com>
 <7fbbc9b1-82eb-e426-9dbc-d6f307a35414@digitalbrains.com>
 <9ffabf8a-3598-4e4f-697b-2c09e6a6e405@digitalbrains.com>
 <82b4bf87-6de6-d8c7-78e7-8b6cc26b4934@digitalbrains.com>
Message-ID: <CAG=VjEnQzoE=x_4Nj5xmeUWLtFdWGG_g-KWhgZ8hnyF2MKdSkA@mail.gmail.com>

Thank you!

I was able to build a working version of gnuk.bin with:
./configure --vidpid=234b:0000 --target=ST_DONGLE
make
CROSS=/home/ardavast/Downloads/gcc-arm-none-eabi-8-2018-q4-major/bin/arm-none-eabi-

The only problem was that just setting the CROSS variable is not enough,
because on line 17 in binary-edit.sh, arm-none-eabi-objdump is called
directly.  So I had to expose it in $PATH, otherwise the build fails
somewhat
silently (exit status 0):

cp -p build/gnuk-no-vidpid.elf build/gnuk.elf
env FILE="build/gnuk.elf" bash put-vid-pid-ver.sh
binary-edit.sh: line 17: arm-none-eabi-objdump: command not found
Offset is
/home/ardavast/Downloads/gcc-arm-none-eabi-8-2018-q4-major/bin/arm-none-eabi-objcopy
-O ihex build/gnuk.elf build/gnuk.hex
/home/ardavast/Downloads/gcc-arm-none-eabi-8-2018-q4-major/bin/arm-none-eabi-objcopy
-O binary build/gnuk.elf build/gnuk.bin
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20190315/e183f9b1/attachment.html>

From peter at digitalbrains.com  Fri Mar 15 20:19:05 2019
From: peter at digitalbrains.com (Peter Lebbing)
Date: Fri, 15 Mar 2019 20:19:05 +0100
Subject: ST-LINK/V2 ID 0000:0000
In-Reply-To: <CAG=VjEnQzoE=x_4Nj5xmeUWLtFdWGG_g-KWhgZ8hnyF2MKdSkA@mail.gmail.com>
References: <CAG=VjEn39xAO=5Or1Z6CtFB=CgbC==sEsCd_gnhvLUPuNHbaBQ@mail.gmail.com>
 <7fbbc9b1-82eb-e426-9dbc-d6f307a35414@digitalbrains.com>
 <9ffabf8a-3598-4e4f-697b-2c09e6a6e405@digitalbrains.com>
 <82b4bf87-6de6-d8c7-78e7-8b6cc26b4934@digitalbrains.com>
 <CAG=VjEnQzoE=x_4Nj5xmeUWLtFdWGG_g-KWhgZ8hnyF2MKdSkA@mail.gmail.com>
Message-ID: <bd2c3f13-a13b-b560-d85e-f441acff2d81@digitalbrains.com>

On 15/03/2019 18:24, Ardavast Dayleryan wrote:
> I was able to build a working version of gnuk.bin with:

Ah, that's good to hear!

> The only problem was that just setting the CROSS variable is not enough,
> because on line 17 in binary-edit.sh, arm-none-eabi-objdump is called
> directly.

The way I see it, the CROSS variable is currently not used to indicate
/which/ cross-compiler to use, but rather to indicate /whether/ to
cross-compile or compile natively. The latter is for debugging purely on
the host without additional hardware.[1]

Since put-vid-pid-ver.sh is not needed for the native version, it is
implied that it is for cross-compilation to ARM, so there was no need to
depend on some variable CROSS. In fact, the variable is not available in
the environment, it is only available in the Makefile currently.

This all could be fixed, but first it should be decided whether the GnuK
project /wants/ to support specifying different cross-compilers and the
burden of complexity that comes with it (testing functionality before
release and such).

One area that could be improved is the failure mode when the shell
script does not find a required executable. Failing loudly is always
better than failing inconspicuously, IMO.

HTH,

Peter.

[1] I can also imagine a scenario where a virtual machine has no access
to the private key material, but is able to use an on-disk key of the
host or a different VM through emulation of a GnuK.

-- 
I use the GNU Privacy Guard (GnuPG) in combination with Enigmail.
You can send me encrypted mail if you want some privacy.
My key is available at <http://digitalbrains.com/2012/openpgp-key-peter>

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 488 bytes
Desc: OpenPGP digital signature
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20190315/bf768e78/attachment.sig>

From e.rigas at cranfield.ac.uk  Wed Mar 20 16:55:06 2019
From: e.rigas at cranfield.ac.uk (Rigas, Evangelos)
Date: Wed, 20 Mar 2019 15:55:06 +0000
Subject: Alternative Gnuk token board design
Message-ID: <3d2ed970587b366c5ba78c6d3a694b2bae704a4a.camel@cranfield.ac.uk>

Hello all,

First, I would like to thank you for your great work.

I was insipired by Niibe's work on FST-01 token and Gnuk and decided to
make my own (a good excuse to get familiarised with Kicad).

My main goal was to make the token more compact, reduce the BOM
slightly and add the Hall effect sensor from FST-01SZ (The board uses
the STM32F103TB as FST-01G). 

You can find the design files here: https://git.rnd2.org/erigas/gnukey
(pcb) and https://git.rnd2.org/erigas/gnukey-ds (case).

I tried Gnuk and GnuPG (from Git) and it works perfectly (even the ACK 
button).

You can find the changes to chopstx here: 
https://git.rnd2.org/erigas/chopstx/src/branch/gnukey 
in case you want to include it to the project. 
In that case I will try to get a PID from pid.codes as mentioned in a
previous thread (Binary distribution).


Kind regards,
Evangelos Rigas

From e.rigas at cranfield.ac.uk  Wed Mar 20 15:46:56 2019
From: e.rigas at cranfield.ac.uk (Rigas, Evangelos)
Date: Wed, 20 Mar 2019 14:46:56 +0000
Subject: Alternative Gnuk token board design
Message-ID: <a5d3e2602bc17b86ca6a0744477ac7510207b327.camel@cranfield.ac.uk>

Hello all,

First, I would like to thank you for your great work.

I was insipired by Niibe's work on FST-01 token and Gnuk and decided to
make my own (a good excuse to get familiarised with Kicad).

My main goal was to make the token more compact, reduce the BOM
slightly and add the Hall effect sensor from FST-01SZ (The board uses
the STM32F103TB as FST-01G). 

You can find the design files here: https://git.rnd2.org/erigas/gnukey
(pcb) and https://git.rnd2.org/erigas/gnukey-ds (case).

I tried Gnuk and GnuPG (from Git) and it works perfectly (even the ACK 
button).

You can find the changes to chopstx here: 
https://git.rnd2.org/erigas/chopstx/src/branch/gnukey 
in case you want to include it to the project. 
In that case I will try to get a PID from pid.codes as mentioned in a
previous thread (Binary distribution).


Kind regards,
Evangelos Rigas

From peter at digitalbrains.com  Thu Mar 21 13:43:18 2019
From: peter at digitalbrains.com (Peter Lebbing)
Date: Thu, 21 Mar 2019 13:43:18 +0100
Subject: Alternative Gnuk token board design
In-Reply-To: <3d2ed970587b366c5ba78c6d3a694b2bae704a4a.camel@cranfield.ac.uk>
References: <3d2ed970587b366c5ba78c6d3a694b2bae704a4a.camel@cranfield.ac.uk>
Message-ID: <70945deb-8f3c-00f9-713b-52d6776f8bdc@digitalbrains.com>

On 20/03/2019 16:55, Rigas, Evangelos wrote:
> You can find the design files here: https://git.rnd2.org/erigas/gnukey
> (pcb) and https://git.rnd2.org/erigas/gnukey-ds (case).

That looks really nice, thanks for expanding the ecosystem!

And a nice touch to include a design for the pogo pins.

But based on what I've read with regard to edge connectors on PCB's, you
should probably use hard gold for the fingers of the connector.
Otherwise they will wear out rather quickly and might leave conductive
"dust" in your connectors. I'm just warning you about this possibility
in case you did not know, as I don't see a comment in your Git
repository.

Having a PCB fab do hard gold on a part of the PCB boosts the price by
quite a bit, unfortunately.

HTH,

Peter.

PS: With regard to programming connections, Niibe writes at [1] about
using "Mac-8's XC-2" connectors. I have yet to find anything like that
that will be shipped to The Netherlands! They look really useful, but
are made of unobtainium.

[1] <http://www.gniibe.org/memo/development/fst-01/dongle/fst-01-swd-connection.html>

-- 
I use the GNU Privacy Guard (GnuPG) in combination with Enigmail.
You can send me encrypted mail if you want some privacy.
My key is available at <http://digitalbrains.com/2012/openpgp-key-peter>

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 488 bytes
Desc: OpenPGP digital signature
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20190321/7e8916fd/attachment.sig>

From e.rigas at cranfield.ac.uk  Thu Mar 21 15:37:48 2019
From: e.rigas at cranfield.ac.uk (Rigas, Evangelos)
Date: Thu, 21 Mar 2019 14:37:48 +0000
Subject: Alternative Gnuk token board design
In-Reply-To: <70945deb-8f3c-00f9-713b-52d6776f8bdc@digitalbrains.com>
References: <3d2ed970587b366c5ba78c6d3a694b2bae704a4a.camel@cranfield.ac.uk>
 <70945deb-8f3c-00f9-713b-52d6776f8bdc@digitalbrains.com>
Message-ID: <1cfce0607966df198256553eb9dd43ac14d1d1ce.camel@cranfield.ac.uk>

On Thu, 2019-03-21 at 13:43 +0100, Peter Lebbing wrote:
> And a nice touch to include a design for the pogo pins.

Thanks Peter.
I plan to design a PCB (some sort of a jig) for programming. That way
it will be easier to make, instead of relying on expensive 3D printers.

As for the gold platting of the connector, you are right. That is why I
ordered the PCB with ENIG (Immersion Gold).
Is not the same quality as hard gold, but an order of magnitude
cheaper.

In addition, ENIG offers better planarity on the exposed pads which
helps with SMD soldering; compared to the default hot air solder
leveling (HASL) process.

Cheers,

Evangelos

From mike at sowbug.com  Fri Mar 22 00:18:24 2019
From: mike at sowbug.com (Mike Tsao)
Date: Thu, 21 Mar 2019 16:18:24 -0700
Subject: Alternative Gnuk token board design
In-Reply-To: <1cfce0607966df198256553eb9dd43ac14d1d1ce.camel@cranfield.ac.uk>
References: <3d2ed970587b366c5ba78c6d3a694b2bae704a4a.camel@cranfield.ac.uk>
 <70945deb-8f3c-00f9-713b-52d6776f8bdc@digitalbrains.com>
 <1cfce0607966df198256553eb9dd43ac14d1d1ce.camel@cranfield.ac.uk>
Message-ID: <CACi+kjogiaLeogQXXwMGGxcxnxsCedHSn7D-m5gWN2bvzt9n8w@mail.gmail.com>

Evangelos:

I did a project a few years ago that has a similar form factor to yours:
https://github.com/sowbug/weblight

A notable difference is that the Weblight board can be inserted in either
top or bottom orientation in the Type A slot, a little like Type C but
through the magic of diodes rather than symmetric design of the female
connector. This was more important for my project because it had a visual
component to it, but I'm sure users would appreciate the flexibility. Plus
you're already solder-masking both sides of the PCB, so it's no additional
manufacturing cost except for the diodes.

As you can see in the board order I did
<https://github.com/sowbug/weblight/blob/master/hardware/mfg/production/1.0/pcbcart-pcb-order-160930.pdf>,
I chose ENIG finish with 2.0mm thickness. We ended up ordering another
1,000 in addition to that order, and we've never had a complaint about
proper fit in USB ports.

I also took the ProtoProg
<http://protofusion.org/wordpress/2013/05/open-hardware-pogo-pin-programmer/>
concept
for the pogo programming, ordering the PCBs from OSH Park
<https://oshpark.com/shared_projects/fqvxyzoH> (I'm in the US, so that was
a perfect option for me). That tool is AVR-based, so it's not applicable to
your project except to the extent you might want to copy that design and
alter it for STM32 programming.

Mike

On Thu, Mar 21, 2019 at 7:37 AM Rigas, Evangelos <e.rigas at cranfield.ac.uk>
wrote:

> On Thu, 2019-03-21 at 13:43 +0100, Peter Lebbing wrote:
> > And a nice touch to include a design for the pogo pins.
>
> Thanks Peter.
> I plan to design a PCB (some sort of a jig) for programming. That way
> it will be easier to make, instead of relying on expensive 3D printers.
>
> As for the gold platting of the connector, you are right. That is why I
> ordered the PCB with ENIG (Immersion Gold).
> Is not the same quality as hard gold, but an order of magnitude
> cheaper.
>
> In addition, ENIG offers better planarity on the exposed pads which
> helps with SMD soldering; compared to the default hot air solder
> leveling (HASL) process.
>
> Cheers,
>
> Evangelos
> _______________________________________________
> Gnuk-users mailing list
> Gnuk-users at gnupg.org
> https://lists.gnupg.org/mailman/listinfo/gnuk-users
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20190321/e95ece16/attachment.html>

From matias at imap.cc  Sat Mar 23 00:12:18 2019
From: matias at imap.cc (Matias N.)
Date: Fri, 22 Mar 2019 19:12:18 -0400
Subject: Porting to NuttX / composite mode / U2F
Message-ID: <cf037883-61d5-4a27-907c-bf027626fea1@www.fastmail.com>

Hi,
I was wondering whether you think it should be possible (and not too much work) to port the application logic to the NuttX RTOS, instead of using chopstx. I ask because it would be interesting to add more functionality to the device by taking advantage of NuttX features, such as USB composite mode. This would then allow to integrate other modes such as U2F in the same device (by taking advantage of existing https://github.com/gl-sergei/u2f-token).

I understand that U2F functionality is not planned for gnuk itself, right?

Best,
Matias
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20190322/5ff00d32/attachment.html>

From gniibe at fsij.org  Mon Mar 25 02:08:15 2019
From: gniibe at fsij.org (NIIBE Yutaka)
Date: Mon, 25 Mar 2019 10:08:15 +0900
Subject: Porting to NuttX / composite mode / U2F
In-Reply-To: <cf037883-61d5-4a27-907c-bf027626fea1@www.fastmail.com>
References: <cf037883-61d5-4a27-907c-bf027626fea1@www.fastmail.com>
Message-ID: <87bm1z7ocg.fsf@iwagami.gniibe.org>

"Matias N." <matias at imap.cc> wrote:
> I was wondering whether you think it should be possible (and not too
> much work) to port the application logic to the NuttX RTOS, instead of
> using chopstx.

I think it should be possible (if an RTOS supports something like POSIX
threads).  I don't know how much work is needed.  You can examine
GNU/Linux port.

But... please note that the exact reason why I use Chopstx is less
functionality.  I don't have a plan to support other RTOS for Gnuk.

> I ask because it would be interesting to add more functionality to the
> device by taking advantage of NuttX features, such as USB composite
> mode.

In my opinion, USB composite device is not good for security device.

Apparently, users have a problem with old implementation (Yubikey NEO),
when they want to use multiple features simultaneously (like OTP and
OpenPGPcard), see my comment at:

    https://dev.gnupg.org/T4225#119535

While Yubikey NEO supports "mode", it seems Yubikey 4 (and later)
supports "applications".  I only have experience with Yubikey NEO.  I'll
try Yubikey 4.  Perhaps, things are now improved.

> I understand that U2F functionality is not planned for gnuk itself, right?

I don't have any plan for U2F.  My opinion is it is good to have
seperate device for U2F.  If it is in a single device, it's better to
use applications interchangeably (not simultaneously), or you would need
a driver which is dedicated to the device to serve multiple features
securely.
-- 


From e.rigas at cranfield.ac.uk  Mon Mar 25 11:57:21 2019
From: e.rigas at cranfield.ac.uk (Rigas, Evangelos)
Date: Mon, 25 Mar 2019 10:57:21 +0000
Subject: Alternative Gnuk token board design
In-Reply-To: <CACi+kjogiaLeogQXXwMGGxcxnxsCedHSn7D-m5gWN2bvzt9n8w@mail.gmail.com>
References: <3d2ed970587b366c5ba78c6d3a694b2bae704a4a.camel@cranfield.ac.uk>
 <70945deb-8f3c-00f9-713b-52d6776f8bdc@digitalbrains.com>
 <1cfce0607966df198256553eb9dd43ac14d1d1ce.camel@cranfield.ac.uk>
 <CACi+kjogiaLeogQXXwMGGxcxnxsCedHSn7D-m5gWN2bvzt9n8w@mail.gmail.com>
Message-ID: <aeb6a26807d5424024f09afb4eb3f5ba55248c6f.camel@cranfield.ac.uk>

Hi Mike,

I had a look on weblight, the trick with diodes is realy nice.
As for the ProtoProg, I had a similar design in mind.

Thanks, for the links.

Evangelos

On Thu, 2019-03-21 at 16:18 -0700, Mike Tsao wrote:
Evangelos:

I did a project a few years ago that has a similar form factor to yours: https://github.com/sowbug/weblight

A notable difference is that the Weblight board can be inserted in either top or bottom orientation in the Type A slot, a little like Type C but through the magic of diodes rather than symmetric design of the female connector. This was more important for my project because it had a visual component to it, but I'm sure users would appreciate the flexibility. Plus you're already solder-masking both sides of the PCB, so it's no additional manufacturing cost except for the diodes.

As you can see in the board order I did<https://github.com/sowbug/weblight/blob/master/hardware/mfg/production/1.0/pcbcart-pcb-order-160930.pdf>, I chose ENIG finish with 2.0mm thickness. We ended up ordering another 1,000 in addition to that order, and we've never had a complaint about proper fit in USB ports.

I also took the ProtoProg<http://protofusion.org/wordpress/2013/05/open-hardware-pogo-pin-programmer/> concept for the pogo programming, ordering the PCBs from OSH Park<https://oshpark.com/shared_projects/fqvxyzoH> (I'm in the US, so that was a perfect option for me). That tool is AVR-based, so it's not applicable to your project except to the extent you might want to copy that design and alter it for STM32 programming.

Mike

On Thu, Mar 21, 2019 at 7:37 AM Rigas, Evangelos <e.rigas at cranfield.ac.uk<mailto:e.rigas at cranfield.ac.uk>> wrote:
On Thu, 2019-03-21 at 13:43 +0100, Peter Lebbing wrote:
> And a nice touch to include a design for the pogo pins.

Thanks Peter.
I plan to design a PCB (some sort of a jig) for programming. That way
it will be easier to make, instead of relying on expensive 3D printers.

As for the gold platting of the connector, you are right. That is why I
ordered the PCB with ENIG (Immersion Gold).
Is not the same quality as hard gold, but an order of magnitude
cheaper.

In addition, ENIG offers better planarity on the exposed pads which
helps with SMD soldering; compared to the default hot air solder
leveling (HASL) process.

Cheers,

Evangelos
_______________________________________________
Gnuk-users mailing list
Gnuk-users at gnupg.org<mailto:Gnuk-users at gnupg.org>
https://lists.gnupg.org/mailman/listinfo/gnuk-users
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20190325/e7734ac0/attachment.html>

From matias at imap.cc  Mon Mar 25 22:29:29 2019
From: matias at imap.cc (Matias N.)
Date: Mon, 25 Mar 2019 17:29:29 -0400
Subject: Can't reflash ST-Link dongle
Message-ID: <ee2b5b56-b994-42c8-aebd-92a37df393f0@www.fastmail.com>

Hi,
I was using gnuk on my st-link dongle for some time. I tried to update using gnuk scripts and my board stopped responding. Since I figured I messed up doing this I went ahead and recompiled gnuk and flashed using another st-link dongle. Flashing works however onces re-plugged the device cannot reenumerate. I get:

[531046.370438] usb usb3-port4: unable to enumerate USB device
[531051.092809] usb 3-3: USB disconnect, device number 14
[531058.670516] usb 3-4: new full-speed USB device number 39 using xhci_hcd
[531058.798583] usb 3-4: device descriptor read/64, error -71
[531059.034586] usb 3-4: device descriptor read/64, error -71
[531059.270525] usb 3-4: new full-speed USB device number 40 using xhci_hcd
[531059.398550] usb 3-4: device descriptor read/64, error -71
[531059.638560] usb 3-4: device descriptor read/64, error -71
[531059.746567] usb usb3-port4: attempt power cycle
[531060.398516] usb 3-4: new full-speed USB device number 41 using xhci_hcd
[531060.398622] usb 3-4: Device not responding to setup address.

Since I figured maybe I failed programming, I downloaded a DFU binary configured for the led on PA9 (as is the case for this dongle) and this works perfectly (right after flashing, the LED starts to blink). So, I'm thinking this could be a problem then with the gnuk binary I'm obtaining. I tried with lastest release and also with the version I had, 1.2.8.

I'm doing (for 1.2.8):
./configure --vidpid=234b:0000 --target=ST_DONGLE
make build/gnuk-vidpid.bin
openocd -f interface/stlink-v2.cfg -f target/stm32f1x.cfg -c init -c "reset halt" -c "flash write_image erase build/gnuk-vidpid.bin 0x08000000" -c "verify_image build/gnuk-vidpid.bin" -c "reset run" -c "shutdown"

I'm not sure if this is due to the board not being in reset or something (since the dongle does not have the reset pin mapped). However, if that's the case, I don't understand why flashing the DFU binary works.

Maybe I could ask if someone can send me a precompiled (working) binary for the ST-link dongle so I can try and flash that.

Thanks,
Matias
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20190325/09d17354/attachment.html>

From matias at imap.cc  Mon Mar 25 23:47:57 2019
From: matias at imap.cc (Matias N.)
Date: Mon, 25 Mar 2019 18:47:57 -0400
Subject: Can't reflash ST-Link dongle
In-Reply-To: <ee2b5b56-b994-42c8-aebd-92a37df393f0@www.fastmail.com>
References: <ee2b5b56-b994-42c8-aebd-92a37df393f0@www.fastmail.com>
Message-ID: <596f0139-96a9-49d4-a0b9-a5bb5d78eddb@www.fastmail.com>

Actually, I found the image I originally flashed the first time I used gnuk (version 1.2.8) and it worked perfectly. It seems that I cannot build a valid .bin image. I'm on Ubuntu 18.04, btw. Anyone else had any problems creating a good binary for the st-link dongle?

On Mon, Mar 25, 2019, at 18:29, Matias N. wrote:
> Hi,
> I was using gnuk on my st-link dongle for some time. I tried to update using gnuk scripts and my board stopped responding. Since I figured I messed up doing this I went ahead and recompiled gnuk and flashed using another st-link dongle. Flashing works however onces re-plugged the device cannot reenumerate. I get:
> 
> [531046.370438] usb usb3-port4: unable to enumerate USB device
> [531051.092809] usb 3-3: USB disconnect, device number 14
> [531058.670516] usb 3-4: new full-speed USB device number 39 using xhci_hcd
> [531058.798583] usb 3-4: device descriptor read/64, error -71
> [531059.034586] usb 3-4: device descriptor read/64, error -71
> [531059.270525] usb 3-4: new full-speed USB device number 40 using xhci_hcd
> [531059.398550] usb 3-4: device descriptor read/64, error -71
> [531059.638560] usb 3-4: device descriptor read/64, error -71
> [531059.746567] usb usb3-port4: attempt power cycle
> [531060.398516] usb 3-4: new full-speed USB device number 41 using xhci_hcd
> [531060.398622] usb 3-4: Device not responding to setup address.
> 
> Since I figured maybe I failed programming, I downloaded a DFU binary configured for the led on PA9 (as is the case for this dongle) and this works perfectly (right after flashing, the LED starts to blink). So, I'm thinking this could be a problem then with the gnuk binary I'm obtaining. I tried with lastest release and also with the version I had, 1.2.8.
> 
> I'm doing (for 1.2.8):
> ./configure --vidpid=234b:0000 --target=ST_DONGLE
> make build/gnuk-vidpid.bin
> openocd -f interface/stlink-v2.cfg -f target/stm32f1x.cfg -c init -c "reset halt" -c "flash write_image erase build/gnuk-vidpid.bin 0x08000000" -c "verify_image build/gnuk-vidpid.bin" -c "reset run" -c "shutdown"
> 
> I'm not sure if this is due to the board not being in reset or something (since the dongle does not have the reset pin mapped). However, if that's the case, I don't understand why flashing the DFU binary works.
> 
> Maybe I could ask if someone can send me a precompiled (working) binary for the ST-link dongle so I can try and flash that.
> 
> Thanks,
> Matias
> 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20190325/fa164e95/attachment.html>

From matias at imap.cc  Tue Mar 26 01:58:07 2019
From: matias at imap.cc (Matias N.)
Date: Mon, 25 Mar 2019 20:58:07 -0400
Subject: Can't reflash ST-Link dongle
In-Reply-To: <596f0139-96a9-49d4-a0b9-a5bb5d78eddb@www.fastmail.com>
References: <ee2b5b56-b994-42c8-aebd-92a37df393f0@www.fastmail.com>
 <596f0139-96a9-49d4-a0b9-a5bb5d78eddb@www.fastmail.com>
Message-ID: <9caa205c-12c0-4f4e-8f5e-7240824a5044@www.fastmail.com>

Ok, I just confirmed that there's a problem with Ubuntu 18.04 build environment (gcc version or other component) since by compiling inside a docker with an older release (I used gcc:7 image) I could build both the old and the current version and works OK.

I wouldn't know how this can be debugged, but I think it is something to consider.

Best,
Matias

On Mon, Mar 25, 2019, at 19:47, Matias N. wrote:
> Actually, I found the image I originally flashed the first time I used gnuk (version 1.2.8) and it worked perfectly. It seems that I cannot build a valid .bin image. I'm on Ubuntu 18.04, btw. Anyone else had any problems creating a good binary for the st-link dongle?
> 
> On Mon, Mar 25, 2019, at 18:29, Matias N. wrote:
>> Hi,
>> I was using gnuk on my st-link dongle for some time. I tried to update using gnuk scripts and my board stopped responding. Since I figured I messed up doing this I went ahead and recompiled gnuk and flashed using another st-link dongle. Flashing works however onces re-plugged the device cannot reenumerate. I get:
>> 
>> [531046.370438] usb usb3-port4: unable to enumerate USB device
>> [531051.092809] usb 3-3: USB disconnect, device number 14
>> [531058.670516] usb 3-4: new full-speed USB device number 39 using xhci_hcd
>> [531058.798583] usb 3-4: device descriptor read/64, error -71
>> [531059.034586] usb 3-4: device descriptor read/64, error -71
>> [531059.270525] usb 3-4: new full-speed USB device number 40 using xhci_hcd
>> [531059.398550] usb 3-4: device descriptor read/64, error -71
>> [531059.638560] usb 3-4: device descriptor read/64, error -71
>> [531059.746567] usb usb3-port4: attempt power cycle
>> [531060.398516] usb 3-4: new full-speed USB device number 41 using xhci_hcd
>> [531060.398622] usb 3-4: Device not responding to setup address.
>> 
>> Since I figured maybe I failed programming, I downloaded a DFU binary configured for the led on PA9 (as is the case for this dongle) and this works perfectly (right after flashing, the LED starts to blink). So, I'm thinking this could be a problem then with the gnuk binary I'm obtaining. I tried with lastest release and also with the version I had, 1.2.8.
>> 
>> I'm doing (for 1.2.8):
>> ./configure --vidpid=234b:0000 --target=ST_DONGLE
>> make build/gnuk-vidpid.bin
>> openocd -f interface/stlink-v2.cfg -f target/stm32f1x.cfg -c init -c "reset halt" -c "flash write_image erase build/gnuk-vidpid.bin 0x08000000" -c "verify_image build/gnuk-vidpid.bin" -c "reset run" -c "shutdown"
>> 
>> I'm not sure if this is due to the board not being in reset or something (since the dongle does not have the reset pin mapped). However, if that's the case, I don't understand why flashing the DFU binary works.
>> 
>> Maybe I could ask if someone can send me a precompiled (working) binary for the ST-link dongle so I can try and flash that.
>> 
>> Thanks,
>> Matias
>> 
> 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20190325/1abc063d/attachment.html>

From ardavast at noiseoverip.com  Tue Mar 26 09:42:44 2019
From: ardavast at noiseoverip.com (Ardavast Dayleryan)
Date: Tue, 26 Mar 2019 10:42:44 +0200
Subject: Can't reflash ST-Link dongle
In-Reply-To: <9caa205c-12c0-4f4e-8f5e-7240824a5044@www.fastmail.com>
References: <ee2b5b56-b994-42c8-aebd-92a37df393f0@www.fastmail.com>
 <596f0139-96a9-49d4-a0b9-a5bb5d78eddb@www.fastmail.com>
 <9caa205c-12c0-4f4e-8f5e-7240824a5044@www.fastmail.com>
Message-ID: <CAG=VjEkyHe_J8ii9Pn3LJghc7e6iSGcjCAfhUKNSQ8Br6KzwSg@mail.gmail.com>

Hello, I had exactly the same problem a couple of weeks ago, and I was able
to
solve it after discussing it here on this mailing list.
This thread was helpful:
https://lists.gnupg.org/pipermail/gnuk-users/2019-January/000164.html
You can also see my thread here:
https://lists.gnupg.org/pipermail/gnuk-users/2019-March/000191.html
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20190326/957274bf/attachment.html>

From matias at imap.cc  Tue Mar 26 15:54:32 2019
From: matias at imap.cc (Matias N.)
Date: Tue, 26 Mar 2019 10:54:32 -0400
Subject: Can't reflash ST-Link dongle
In-Reply-To: <CAG=VjEkyHe_J8ii9Pn3LJghc7e6iSGcjCAfhUKNSQ8Br6KzwSg@mail.gmail.com>
References: <ee2b5b56-b994-42c8-aebd-92a37df393f0@www.fastmail.com>
 <596f0139-96a9-49d4-a0b9-a5bb5d78eddb@www.fastmail.com>
 <9caa205c-12c0-4f4e-8f5e-7240824a5044@www.fastmail.com>
 <CAG=VjEkyHe_J8ii9Pn3LJghc7e6iSGcjCAfhUKNSQ8Br6KzwSg@mail.gmail.com>
Message-ID: <379daedc-e133-47fa-a120-063704055a22@www.fastmail.com>

Thanks for confirming. Too bad the bug is reported and not yet fixed.
Maybe it is worth adding a notice on the gnuk README? Also a mention to the compilation via docker with specific
version can help avoid similar issues in the future.

Best,
Matias

On Tue, Mar 26, 2019, at 05:43, Ardavast Dayleryan wrote:
> Hello, I had exactly the same problem a couple of weeks ago, and I was able to
> solve it after discussing it here on this mailing list.
> This thread was helpful: https://lists.gnupg.org/pipermail/gnuk-users/2019-January/000164.html
> You can also see my thread here: https://lists.gnupg.org/pipermail/gnuk-users/2019-March/000191.html
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20190326/348f3626/attachment.html>

From gniibe at fsij.org  Mon Apr 15 07:31:35 2019
From: gniibe at fsij.org (NIIBE Yutaka)
Date: Mon, 15 Apr 2019 14:31:35 +0900
Subject: TTXS and Chopstx for STM32L432
Message-ID: <871s2396mg.fsf@iwagami.gniibe.org>

Hello,

I do some work to port Chopstx to STM32L432.  No FPU support, no drivers
other than USART, currently.  My intention of this port is not for Gnuk,
but for new project named TTXS.

It is free firmware for CCID reader.

    Tian Tian Xiang Shang - free firmware for CCID reader:
    https://www.gniibe.org/memo/development/ttxs/ttxs-hardware.html

It is not mature, but somehow works with OpenPGP card now, with
STM32F103.  I test it with OpenPGP card against Gnuk's test suite.  My
motivation is simple: While supporting OpenPGP card for GnuPG, it's good
to have less unknown factors.  Currently, my intention is to figure out
minimum feature set of CCID reader.  It is TPDU T=1 only card reader.
Perhaps T=0 support would make sense (for other cards).

Some smartcards run in "inverse convention".  In this communication, the
polarity and the order are opposite (1 is lower voltage and MSB first).
STM32L432 can support this feature, with no external hardware.  I'm
going to port USART driver (and possibly USB driver) to STM32L432 and
port TTXS to STM32L432.

Unfortunately for Gnuk, STM32L432 comes with many features.  The core is
Cortex-M4 with FPU.  And it comes with many peripherals with many
features.

In my opinion, I don't need those features for Gnuk.  After all, if we
need more features, it's better to use PC for having our private keys.

Perhaps, in future (after the first release of current TTXS), it would
be better for me to develop TTXS with FPGA.  I think that it is feasible
by something like TinyFPGA BX.
-- 


From gniibe at fsij.org  Wed Apr 17 04:05:59 2019
From: gniibe at fsij.org (NIIBE Yutaka)
Date: Wed, 17 Apr 2019 11:05:59 +0900
Subject: Alternative Gnuk token board design
In-Reply-To: <a5d3e2602bc17b86ca6a0744477ac7510207b327.camel@cranfield.ac.uk>
References: <a5d3e2602bc17b86ca6a0744477ac7510207b327.camel@cranfield.ac.uk>
Message-ID: <87h8ax9yig.fsf@iwagami.gniibe.org>

Hello,

"Rigas, Evangelos" <e.rigas at cranfield.ac.uk> wrote:
> You can find the design files here: https://git.rnd2.org/erigas/gnukey
> (pcb) and https://git.rnd2.org/erigas/gnukey-ds (case).

Thank you for sharing your project.  It looks great.

I'm sorry I didn't have time to reply soonish.

Case design looks good.

In my FST-01SZ, I put RESET pin to SWD.  This is because a programmer
should wake up the MCU (by RESET signal) when it's in sleep mode.

> You can find the changes to chopstx here: 
> https://git.rnd2.org/erigas/chopstx/src/branch/gnukey 
> in case you want to include it to the project. 
> In that case I will try to get a PID from pid.codes as mentioned in a
> previous thread (Binary distribution).

I'll include your change.

For Gnuk, I can put your PID to gnuk/GNUK_USB_DEVICE_ID.  (Scripts under
gnuk/tool depends on this file.)

Well, writing about VID:PID...

While it is common to use VID:PID to identify the device, I made a merge
request to Debian GnuPG (with my less skill of using Gitlab):

    https://salsa.debian.org/debian/gnupg2/merge_requests/5

This change makes it possible to identify Gnuk Token by the USB string
of "Gnuk Token".
-- 


From surettcharles at gmail.com  Wed Apr 17 22:20:42 2019
From: surettcharles at gmail.com (Charles Surett)
Date: Wed, 17 Apr 2019 16:20:42 -0400
Subject: Recommended Development Hardware
Message-ID: <CA+Gw4W5y9FgJ4uEsE7uFzmYAzNKM2bvB=WwG_OMH7GxG1ojv5Q@mail.gmail.com>

Hello,

What is the currently recommended development hardware? I want to be
able to make a Gnuk device and be able to debug it without the need to
solder. I also was wondering if it is possible to port Gnuk to a
device like a Teensy.


From gniibe at fsij.org  Fri Apr 19 02:26:06 2019
From: gniibe at fsij.org (NIIBE Yutaka)
Date: Fri, 19 Apr 2019 09:26:06 +0900
Subject: Recommended Development Hardware
In-Reply-To: <CA+Gw4W5y9FgJ4uEsE7uFzmYAzNKM2bvB=WwG_OMH7GxG1ojv5Q@mail.gmail.com>
References: <CA+Gw4W5y9FgJ4uEsE7uFzmYAzNKM2bvB=WwG_OMH7GxG1ojv5Q@mail.gmail.com>
Message-ID: <8736mehmch.fsf@iwagami.gniibe.org>

Charles Surett <surettcharles at gmail.com> wrote:
> What is the currently recommended development hardware? I want to be
> able to make a Gnuk device and be able to debug it without the need to
> solder.

When I started the development, it was Olimex STM32-H103 + ARM-USB-TINY.
I still use it occasionally.  Good point is the availability over ten
years.

Now, if you have easy access to China, I'd recommend a board with
GD32F103, like:

    https://item.taobao.com/item.htm?spm=a230r.1.14.47.6968699cocpOsR&id=545797823754

Well, I don't have experience with this board.  I think it's good to
have a solid connector to a programmer (just like Olimex STM32-H103).
It's good for development.


I think that the good reference for STM32F103 boards is:

    http://wiki.stm32duino.com/index.php?title=STM32F103_boards

Among those, Maple Mini and Blue Pill are supported by Gnuk.  Adding
support for other boards is easy.

Please note that you need a programmer to flash/debug a board.
ST-Link/V2 (and its clone) is popular, but the firmware is proprietary.

While I don't have experience with it, IBDAP-CMSIS-DAP JTAG/SWD debug
adapter is good one which comes with all information (including its
schematics, firmware, etc.):

    https://www.adafruit.com/product/2764

> I also was wondering if it is possible to port Gnuk to a device like a
> Teensy.

Technically speaking, it's possible.  However, I won't call it "Gnuk",
when it runs on something like Cortex-M4F.  It has so many features
which might kill the purpose of Gnuk to be smaller and less complexity.

Here is some techinical discussion.

For Cortex-M0+, I once tried (for FS-BB48), but I gave up, because it
doesn't have a good multiplier.  If you can wait longer (say, up to 1.2
second for EdDSA signing), it may be useful.

For Cortex-M4F, I am porting Chopstx (the thread library) to STM32L432.
I learned that its USB module is mostly same, and it works now.  I have
a USB driver for Freescale (now NXP) for MKL27Z.  Thus, I think that
porting Chopstx to MK* chip with Cortex-M4F is feasible (I guess, not
that hard).

Then, when you will support random number generation and flash ROM
routines, Gnuk can run on that chip.
-- 


From ml at mareichelt.com  Tue Apr 30 17:45:20 2019
From: ml at mareichelt.com (Markus Reichelt)
Date: Tue, 30 Apr 2019 17:45:20 +0200
Subject: Gnuk Extractor
Message-ID: <20190430154520.GC2295@pc21.mareichelt.com>

Hi,

today I found out about Gnuk Extractor:

https://github.com/rot42/gnuk-extractor

Quoting the site: "This tool can extract the PGP secret keys from the
dumped firmware of a Gnuk token.  It was tested on a Nitrokey Start
and on a Gnuk Token made from a $2 ST-LINK/V2 clone."


Sadly, I keep getting sidetracked and have to postpone my plans to
play a bit with my collection of st-link/v2 devices ...  hm, maybe in
June (this year?  busy times...)

-- 
left blank, right bald


From gary at mups.co.uk  Tue Apr 30 20:45:53 2019
From: gary at mups.co.uk (Gary)
Date: Tue, 30 Apr 2019 19:45:53 +0100
Subject: Gnuk Extractor
In-Reply-To: <20190430154520.GC2295@pc21.mareichelt.com>
References: <20190430154520.GC2295@pc21.mareichelt.com>
Message-ID: <b79c001e-ab63-6acf-bbb3-ab502f29a699@mups.co.uk>

On 30/04/2019 16:45, Markus Reichelt wrote:
> Hi,
> 
> today I found out about Gnuk Extractor:
> 
> https://github.com/rot42/gnuk-extractor
> 
> Quoting the site: "This tool can extract the PGP secret keys from the
> dumped firmware of a Gnuk token.  It was tested on a Nitrokey Start
> and on a Gnuk Token made from a $2 ST-LINK/V2 clone."
> 

This relies on your flash not being locked after uploading firmware/keys.

If you lock the device using "stm32flx lock 0" via an openocd telnet
session, this should no longer be possible. Alternatively see the "Lock
flash ROM" section of

https://www.gniibe.org/memo/development/gnuk/gnuk-installation-to-stm32-part-of-stm8s-discovery-kit.html

Regards,

Gary


From ml at mareichelt.com  Tue Apr 30 23:22:58 2019
From: ml at mareichelt.com (Markus Reichelt)
Date: Tue, 30 Apr 2019 23:22:58 +0200
Subject: Gnuk Extractor
In-Reply-To: <b79c001e-ab63-6acf-bbb3-ab502f29a699@mups.co.uk>
References: <20190430154520.GC2295@pc21.mareichelt.com>
 <b79c001e-ab63-6acf-bbb3-ab502f29a699@mups.co.uk>
Message-ID: <20190430212258.GD2295@pc21.mareichelt.com>

* Gary <gary at mups.co.uk> wrote:

> This relies on your flash not being locked after uploading
> firmware/keys.

Yeah... I know, thank you.

That's been both mentioned in the linked text and in here/on Gnuk's
website already, as you neatly shared also.

It was just some FYI mail on my part; You know, I again fell prey to
some kinky pic of neatly soldered ...  wires.  Yes, I like wires [.]

It all just flashed backwards from that point on.

-- 
left blank, right bald


From gniibe at fsij.org  Tue May 14 04:00:00 2019
From: gniibe at fsij.org (NIIBE Yutaka)
Date: Tue, 14 May 2019 11:00:00 +0900
Subject: Chopstx 1.15
Message-ID: <87imud7q3j.fsf@iwagami.gniibe.org>

Hello,

Chopstx 1.15 is released.

	tag release/1.15
	Tagger: NIIBE Yutaka <gniibe at fsij.org>
	Date:   Tue May 14 10:31:58 2019 +0900
	commit 4f46af7557c7bc0e4dfca756dd93e2ad8c0d9871

Change are:

    * Cortex-M4 support
    Cortex-M4 support has been added.  Not supporting use of FPU or DSP,
    yet.  Note that it's not intend to be used by Gnuk.

    * STM32L432 support
    USART and USB drivers are added.

    * New board support: ST Nucleo-32 L432
    ST Nucleo-32 L432 is a small board with ST-Link/V2-1.

    * Minor implementation change: chopstx_claim_irq
    If the interrupt is disabled (possibly by chx_intr) when
    chopstx_claim_irq is called, INTR->ready is set to 1.  This allows
    calling chopstx_claim_irq after hardware initialization which may
    cause an interrupt before the call of chopstx_claim_irq.

and then, changes for USB:

    * SYS version 4.0
    USB initialization/finalization API has been changed.  SYS routines
    only handle USB cable configuration when supported by a board.

    * USB driver change
    Enabling/disabling USB module is done by USB driver.  It's
    responsibility of board configuration to enable external transistor
    for pull-up D+-line by board/*.h.  For all boards, USB driver doesn't
    use usb_lld_sys_init or usb_lld_sys_shutdown (those routines only can
    be used for USB self powered system, which Chopstx does not support
    yet).

    * Board configuration change
    For USB driver change, board-maple-mini.h, board-olimex-stm32-h103.h,
    board-stbee.h, and board-stm32-primer2.h were changed.  Pull-up is
    enabled at the time of gpio_init.

After ten years of experience, by comparing a board of STM32L432, I
finally understand the exact reason (and confusion) why some boards of
STM32F103 have a transistor to pull-up D+ line of USB.  It is required
to conform the USB specification not driving D+ line at start when a
board runs in self-powered mode.  And it can be used (for both of
self-powered and bus-powered) to disconnect USB from device side.

The latter can be done by other method, making SE0 state (by driving
both of D+ line and D- line to GND).  So, it is OK for bus-powered
system to have fixed pull-up resistor on D+ line.

Since modern MCU like STM32L432 has internal pull-up resistor support,
there is no difference among boards.


			*	*	*

I ported Chopstx to STM32L432, because of this:

   Tian Tian Xiang Shang - Another Hardware:
   https://www.gniibe.org/memo/development/ttxs/ttxs-hardware-another.html

Version 0.0 of Tian Tian Xiang Shang (a smartcard reader implementation)
is avaiable at:

   https://git.gniibe.org/gitweb/?p=chopstx/ttxs.git;a=summary
-- 


From gniibe at fsij.org  Thu May 23 01:50:58 2019
From: gniibe at fsij.org (NIIBE Yutaka)
Date: Thu, 23 May 2019 08:50:58 +0900
Subject: Chopstx 1.16 and TTXS 0.1
In-Reply-To: <87imud7q3j.fsf@iwagami.gniibe.org>
References: <87imud7q3j.fsf@iwagami.gniibe.org>
Message-ID: <87muje59r1.fsf@iwagami.gniibe.org>

Hello,

Chopstx 1.16 is released (with forgotten update of README).

	tag release/1.16
	Tagger: NIIBE Yutaka <gniibe at fsij.org>
	Date:   Wed May 22 14:22:58 2019 +0900
	commit d4ba52b0d130b19776828a65dad04301c9452997

It has a fix for USART driver of STM32L432, and change is only:

    * New board support: Gnukey-DS
    It is contributed by Evangelos Rigas.

Thanks to Evangelos Rigas for the support.

Version 0.1 of Tian Tian Xiang Shang (a smartcard reader implementation)
is also avaiable at:

    https://git.gniibe.org/gitweb/?p=chopstx/ttxs.git;a=summary

It now supports CCID protocol on serial line.

			*	*	*

Those releases are done to prepare a copy of git.gniibe.org.  Started in
2015, I have a practice selling the copy (to people in Japan):

    https://www.gniibe.org/shop/git-gniibe-org-copy.html

I don't think there is any demand actually (in terms of business), but
the existence of this service would be useful when a person does
distribution of hardware devices.
-- 


From simon at josefsson.org  Tue May 28 10:16:42 2019
From: simon at josefsson.org (Simon Josefsson)
Date: Tue, 28 May 2019 10:16:42 +0200
Subject: Gnuk Extractor
In-Reply-To: <b79c001e-ab63-6acf-bbb3-ab502f29a699@mups.co.uk>
References: <20190430154520.GC2295@pc21.mareichelt.com>
 <b79c001e-ab63-6acf-bbb3-ab502f29a699@mups.co.uk>
Message-ID: <1559031402.27542.2.camel@josefsson.org>

On Tue, 2019-04-30 at 19:45 +0100, Gary wrote:
> On 30/04/2019 16:45, Markus Reichelt wrote:
> > Hi,
> > 
> > today I found out about Gnuk Extractor:
> > 
> > https://github.com/rot42/gnuk-extractor
> > 
> > Quoting the site: "This tool can extract the PGP secret keys from
> > the
> > dumped firmware of a Gnuk token.??It was tested on a Nitrokey Start
> > and on a Gnuk Token made from a $2 ST-LINK/V2 clone."
> > 
> 
> This relies on your flash not being locked after uploading
> firmware/keys.
> 
> If you lock the device using "stm32flx lock 0" via an openocd telnet
> session, this should no longer be possible. Alternatively see the
> "Lock
> flash ROM" section of
> 
> https://www.gniibe.org/memo/development/gnuk/gnuk-installation-to-
> stm32-part-of-stm8s-discovery-kit.html

Does this apply to the FST-01, FST-01G, or FST-01SZ?  Does it depend on
how Gnuk was installed on the device?  How would I protect them?

/Simon
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 228 bytes
Desc: This is a digitally signed message part
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20190528/0514c139/attachment.sig>

From gniibe at fsij.org  Wed May 29 02:59:33 2019
From: gniibe at fsij.org (NIIBE Yutaka)
Date: Wed, 29 May 2019 09:59:33 +0900
Subject: Gnuk Extractor
In-Reply-To: <1559031402.27542.2.camel@josefsson.org>
References: <20190430154520.GC2295@pc21.mareichelt.com>
 <b79c001e-ab63-6acf-bbb3-ab502f29a699@mups.co.uk>
 <1559031402.27542.2.camel@josefsson.org>
Message-ID: <871s0ihy8a.fsf@iwagami.gniibe.org>

Simon Josefsson wrote:
> Does this apply to the FST-01, FST-01G, or FST-01SZ?  Does it depend on
> how Gnuk was installed on the device?  How would I protect them?

For FST-01, FST-01G and FST-01SZ, when it is distributed with Gnuk by
me, this does not apply.  I distribute Gnuk Token with protection,
always.

Yes, it depends on how the firmware is installed on a device.  The MCU
has a configuration: the internal flash ROM can be protected against
JTAG/SWD access.

When the protection is not enabled, the internal flash ROM can be
accessed by JTAG/SWD debugger.

When it is an end user who does install Gnuk on FST-01/G/SZ through USB
firmware upgrade, by neug/tool/neug_upgrade.py (for the one of NeuG
installed device) or by gnuk/tool/upgrade_by_passwd.py (for the one of
Gnuk installed device), it does the protection in its procedure, just
after the flash ROM upgrade.

For enabling protection after flash ROM installation by JTAG/SWD
debugger, please have a look at the README, "How to protect flash ROM"
section:

    https://git.gniibe.org/gitweb/?p=gnuk/gnuk.git;a=blob;f=README

			*	*	*

For FST-01 as a NeuG standalone device, it was distributed with
protection.

For FST-01G as a NeuG standalone device, there were two cases:
distributed with no protection or distributed with protection.

For FST-01SZ as a NeuG standalone device, it is distributed with no
protection.

I distribute FST-01G/SZ as a NeuG standalone device, with no protection,
because of reasons:

    (1) There are no private data on the device.

    (2) I (or an end user) may want to examine the content of flash ROM
        (the first 4KiB of ROM cannot be changed by the flash ROM
        upgrade, once protection done, no way to examine).

    (3) The protection will be enabled when another firmware will be
        installed.

In the past, for FST-01's factory installation with Gnuk 1.0.1 (in
2012), I was careless about the fact of (2).  In fact, the factory
installation process of FST-01 was not that good and strict; I just
prepared a tool set: ST-Link/V2 and USB-memory which included
gnuk/tool/stlinkv2.py and Python USB (it was for Windows machine in a
factory), and sent it to the factory.  So, there were possibility where
something bad was installed in the first 4KiB on FST-01, and it was kept
unexamined.  For FST-01 users, if this matters, it is recommended to
install Gnuk by JTAG/SWD debugger to update the first 4KiB.

When I asked the manufacturing of FST-01G in 2017, I defined more strict
procedure:

    FST-01G Test Plan:
    https://www.gniibe.org/memo/development/fst-01/fst-01g-testplan.html

In the procedure, I ask no protection, because of (2).

When I asked the manufacturing of FST-01SZ for 2019 (in 2018), I defined
this procedure:

    FST-01SZ Test Plan:
    https://www.gniibe.org/memo/development/fst-01/fst-01sz-testplan.html

It's the same in the procedure, I ask no protection.  And I have an
explanation:

    https://www.gniibe.org/memo/development/fst-01/fst-01sz-testplan.html#locking-flash-access-by-swd


When I did firmware upgrade of FST-01G to newer NeuG, I enabled the
protection.  That's why there were FST-01G with protection (while it is
no protection at the factory).  Well, to respect an end user's computing
freedom, it would be better for a NeuG standalone device to have no
protection when shipped.
-- 


From nick at kousu.ca  Wed May 29 22:40:07 2019
From: nick at kousu.ca (Nick)
Date: Wed, 29 May 2019 20:40:07 +0000
Subject: [PATCH] Move bounds check inside ECC scalar multiply.
Message-ID: <e5bd22618c22809ad41971daa38feb81@kousu.ca>

The project's README says that contributions are welcome, but it's not that obvious to me how. With that said, I hope this is acceptable:

I've submitted a merge request to your mirror. It makes `compute_kG` and `compute_kP` safer and more consistent to use.

https://salsa.debian.org/gnuk-team/gnuk/gnuk/merge_requests/3

I welcome feedback to help improve this patch to a point where it would be acceptable for inclusion in your great fully free software project. As I said on the MR, I assign my copyright to the FSIJ, assuming it gets accepted.

It's also included below

---
 src/ecc.c | 32 +++++++++++++++++++-------------
 1 file changed, 19 insertions(+), 13 deletions(-)

diff --git a/src/ecc.c b/src/ecc.c
index 2d637e9..4437e3e 100644
--- a/src/ecc.c
+++ b/src/ecc.c
@@ -119,6 +119,12 @@ FUNC(compute_kG) (ac *X, const bn256 *K)
   jpc Q[1], tmp[1], *dst;
   int i;
   int vk;
+
+  if (bn256_is_zero(K)) /* < 1, it's too small. */
+    return -1;
+  if (bn256_sub(K_dash, K, N) == 0) /* >= N, it's too big.  */
+    return -1;
+
   uint32_t k_is_even = bn256_is_even (K);
 
   bn256_sub_uint (K_dash, K, k_is_even);
@@ -241,7 +247,6 @@ FUNC(compute_kP) (ac *X, const bn256 *K, const ac *P)
   uint8_t index[86]; /* Lower 2-bit for index absolute value, msb is
 			for sign (encoded as: 0 means 1, 1 means -1).  */
   bn256 K_dash[1];
-  uint32_t k_is_even = bn256_is_even (K);
   jpc Q[1], tmp[1], *dst;
   int i;
   int vk;
@@ -251,9 +256,13 @@ FUNC(compute_kP) (ac *X, const bn256 *K, const ac *P)
   if (point_is_on_the_curve (P) < 0)
     return -1;
 
-  if (bn256_sub (K_dash, K, N) == 0)	/* >= N, it's too big.  */
+  if (bn256_is_zero(K)) /* < 1, it's too small. */
+    return -1;
+  if (bn256_sub(K_dash, K, N) == 0) /* >= N, it's too big.  */
     return -1;
 
+  uint32_t k_is_even = bn256_is_even (K);
+
   bn256_sub_uint (K_dash, K, k_is_even);
   /* It keeps the condition: 1 <= K' <= N - 2, and K' is odd.  */
 
@@ -337,12 +346,9 @@ FUNC(ecdsa) (bn256 *r, bn256 *s, const bn256 *z, const bn256 *d)
       do
 	{
 	  bn256_random (k);
-	  if (bn256_add_uint (k, k, 1))
-	    continue;
-	  if (bn256_sub (tmp_k, k, N) == 0)	/* >= N, it's too big.  */
+	  if(FUNC(compute_kG) (KG, k) < 0)
 	    continue;
 	  /* 1 <= k <= N - 1 */
-	  FUNC(compute_kG) (KG, k);
 	  borrow = bn256_sub (r, KG->x, N);
 	  if (borrow)
 	    memcpy (r, KG->x, sizeof (bn256));
@@ -372,8 +378,8 @@ FUNC(ecdsa) (bn256 *r, bn256 *s, const bn256 *z, const bn256 *d)
 /**
  * @brief Check if a secret d0 is valid or not
  *
- * @param D0	scalar D0: secret
- * @param D1	scalar D1: secret candidate N-D0
+ * @param D0	scalar D0: secret candidate
+ * @param D1	scalar D1: secret candidate projected to N-D0 (output)
  *
  * Return 0 on error.
  * Return -1 when D1 should be used as the secret
@@ -384,12 +390,12 @@ FUNC(check_secret) (const bn256 *d0, bn256 *d1)
 {
   ac Q0[1], Q1[1];
 
-  if (bn256_is_zero (d0) || bn256_sub (d1, N, d0) != 0)
-    /* == 0 or >= N, it's not valid.  */
+  if(FUNC(compute_kG) (Q0, d0) < 0)
+    return 0;
+  bn256_sub (d1, N, d0); // carry is not checked here;
+                         // the bounds check in compute_kG should hace caught the carry case
+  if(FUNC(compute_kG) (Q1, d1) < 0)
     return 0;
-
-  FUNC(compute_kG) (Q0, d0);
-  FUNC(compute_kG) (Q1, d1);
 
   /*
    * Jivsov compliant key check
-- 
2.20.1 (Apple Git-117)


From nick at kousu.ca  Thu May 30 19:40:26 2019
From: nick at kousu.ca (Nick)
Date: Thu, 30 May 2019 17:40:26 +0000
Subject: ecc.c: representing the point at infinity in affine coordinates
Message-ID: <61c618f9600779652ed75459eb40d5c6@kousu.ca>

In elliptic curves, the group operation needs an extra off-the-page point as the group identity, known conventionally as "infinity" or "the point at infinity" [0]. This point is, formally, unrepresentable as a pair (x,y) because it has no coordinates.

But you need to have some way to deal with and check for this value. It is a legitimate -- and important -- part of EC arithmetic. Some standards, IEEE P1363, ANSI X9.62, and also secg [3] by choosing the single byte '\x00' to be infinity -- when serialized at least [5]. pycoin's ecc implementation similarly defines infinity at runtime as (None, None) [1] and then checks for it and handles it with special cases during addition [2].

I want to propose adopting the same idea into GnuK. Currently, `struct jpc` can handle points at infinity (and the arithmetic in jpc.c checks for ->z == 0 and behaves appropriately) but `struct ac` cannot. Instead, infinity is represent as an error code, e.g. `jpc_to_ac` says "Return -1 on error (infinite)" [4]. But this isn't really an error, it's just a representation in a side-channel. It would simplify much if this case was represented directly in the struct itself, since that could be passed around directly, and it wouldnt't get conflated with other kinds of errors.

ac = {x: 0, y: 0} is unused in GnuK. It *must* be unused, since for an elliptic curve y^2 = x^3 + ax + b, if x = y = 0, then b = 0, but no supported elliptic curve has b = 0. This value could be repurposed as the point at infinity, and then the arithmetic would not need to have any error returns. Another representation would be to add a `bool infinite` flag to `struct ac`. The key thing is that I want to be able to return `ac`s the same way I can return `jpc`s and assume everything will check out.

What do you all think about this? I wanted to run it by the experts here before I spent time editing a lot of parts of GnuK.

[0]: https://en.wikipedia.org/wiki/Elliptic_curve#The_group_law
[1]: https://github.com/richardkiss/pycoin/blob/facf208aafbe07d4d51d25b250a6f468c6c4198c/pycoin/ecdsa/Curve.py#L46
[2]: https://github.com/richardkiss/pycoin/blob/facf208aafbe07d4d51d25b250a6f468c6c4198c/pycoin/ecdsa/Curve.py#L74-L101
[3]: http://www.secg.org/sec1-v2.pdf#subsubsection.2.3.3
[4]: https://salsa.debian.org/gnuk-team/gnuk/gnuk/blob/177ef67edfa2306c2a369a037362385c354083e1/src/jpc.c#L188-L189
[5]: https://crypto.stackexchange.com/questions/6156/how-is-the-x-coordinate-of-a-point-at-infinity-encoded-in-a-secp256k1-signatur


From gniibe at fsij.org  Fri May 31 03:19:17 2019
From: gniibe at fsij.org (NIIBE Yutaka)
Date: Fri, 31 May 2019 10:19:17 +0900
Subject: ecc.c: representing the point at infinity in affine coordinates
In-Reply-To: <61c618f9600779652ed75459eb40d5c6@kousu.ca>
References: <61c618f9600779652ed75459eb40d5c6@kousu.ca>
Message-ID: <87sgsvfmju.fsf@iwagami.gniibe.org>

Hello,

"Nick" <nick at kousu.ca> wrote:
> In elliptic curves, the group operation needs an extra off-the-page
> point as the group identity, known conventionally as "infinity" or
> "the point at infinity" [0]. This point is, formally, unrepresentable
> as a pair (x,y) because it has no coordinates.
[...]

I wonder if it's worth a try, in the codebase of Gnuk.  I'm afraid not.
Because users of Gnuk don't use classic ECC key, except a (very) minor
use case of secp256k1.  Another reason of my reluctance is that the
special case of the point at infinity in classic ECC is considered a
weakpoint which invites side-channel attacks to implementations.  It
would be hard to review such changes if it's large.  On the other hand,
with no support of the point at infinity, size of code to audit for this
special case might be smaller.


Well, let me explain the ECC situation in Gnuk.  (This is a kind of
duplicate, (IIRC, I wrote about it once somewhere), but perhaps, not
here.)


I implemented the ECC routines for the curve of NIST P-256 in 2013 and
2014, because it's faster and key size is smaller than RSA (I thought it
were useful).  It is my own implementation selecting among possible
algorithms, so that I wouldn't be suffered from patent issues.

But, then, around 2014, it was concluded that NIST P-256 is questionable
to use, and it can not be recommended.

In 2014, I extended the routines to support the curve of secp256k1.

The intention was that Gnuk Token could be used for Bitcoin transactions
(by developing a tool for that).  And I proposed a way to publish a
public key in OpenPGP format, so that people can make sure a Bitcoin
address belongs to a person.

At that time, I assumed a user (well, most of users) were in control of
his private key when making Bitcoin transactions.  Well, my assumption
was simply wrong.  It's not, for many of "Bitcoin users".  And it seems
that mostly nobody needs a representation in OpenPGP format binding
Bitcoin public key to email address.

And then, after Mt. Gox incident which happened in Japan, it made me
difficult to keep working for anythong around Bitcoin support.  Thus, I
never wrote a tool issuing Bitcoin transaction with Gnuk Token.


I know that my implementation is sub-optimal for secp256k1, but I
intentionally did not introduce new algorithm for the curve, because of
possible patent concern at that time.


So, for implementation of the curve of secp256k1, you can find the
Bitcoin one more useful, because it's faster for the particular curve.
I think that the algorithm can be applied to Brainpool curves, too.
-- 


From nick at kousu.ca  Fri May 31 19:34:12 2019
From: nick at kousu.ca (Nick)
Date: Fri, 31 May 2019 17:34:12 +0000
Subject: ecc.c: representing the point at infinity in affine
 coordinates
In-Reply-To: <87sgsvfmju.fsf@iwagami.gniibe.org>
References: <87sgsvfmju.fsf@iwagami.gniibe.org>
 <61c618f9600779652ed75459eb40d5c6@kousu.ca>
Message-ID: <ac47b97096c8be4a161988cdf06f1d22@kousu.ca>

May 30, 2019 10:19 PM, "NIIBE Yutaka" <gniibe at fsij.org> wrote:

> Hello,
> 
> "Nick" <nick at kousu.ca> wrote:
> 
>> In elliptic curves, the group operation needs an extra off-the-page
>> point as the group identity, known conventionally as "infinity" or
>> "the point at infinity" [0]. This point is, formally, unrepresentable
>> as a pair (x,y) because it has no coordinates.
> 
> [...]
> 
> I wonder if it's worth a try, in the codebase of Gnuk. I'm afraid not.
> Because users of Gnuk don't use classic ECC key, except a (very) minor
> use case of secp256k1. Another reason of my reluctance is that the
> special case of the point at infinity in classic ECC is considered a
> weakpoint which invites side-channel attacks to implementations. It
> would be hard to review such changes if it's large. On the other hand,
> with no support of the point at infinity, size of code to audit for this
> special case might be smaller.

I don't envision the change being super invasive. I think I can just

static const struct ac INFINITY = {0, 0};

add a ac_is_null() function that checks for this value, and then everywhere the arithmetic currently interprets this point, use/check for this value.

For example

-  if (bn256_is_zero (A->z))
-    return -1;
+  if (bn256_is_zero (A->z)) {
+     *X = INFINITY;
+     return 0;
+  }
 
or

-    if (FUNC(jpc_to_ac) (P3, Q1) < 0) /* Never occurs, except coding errors.  */
-      return -1;
+    FUNC(jpc_to_ac) (P3, Q1);
+    if(FUNC(ac_is_null)(P3)) /* Never occurs, except coding errors.  */
+      return -1;

We could also set INFINITY = {-1, 1} or {3, 4} or any other value that's unused. It could be defined per-curve, even.


> Well, let me explain the ECC situation in Gnuk. (This is a kind of
> duplicate, (IIRC, I wrote about it once somewhere), but perhaps, not
> here.)
> 
> I implemented the ECC routines for the curve of NIST P-256 in 2013 and
> 2014, because it's faster and key size is smaller than RSA (I thought it
> were useful). It is my own implementation selecting among possible
> algorithms, so that I wouldn't be suffered from patent issues.
> 
> But, then, around 2014, it was concluded that NIST P-256 is questionable
> to use, and it can not be recommended.
> 
> In 2014, I extended the routines to support the curve of secp256k1.
> 
> The intention was that Gnuk Token could be used for Bitcoin transactions
> (by developing a tool for that). And I proposed a way to publish a
> public key in OpenPGP format, so that people can make sure a Bitcoin
> address belongs to a person.
> 
> At that time, I assumed a user (well, most of users) were in control of
> his private key when making Bitcoin transactions. Well, my assumption
> was simply wrong. It's not, for many of "Bitcoin users". And it seems
> that mostly nobody needs a representation in OpenPGP format binding
> Bitcoin public key to email address.
> 
> And then, after Mt. Gox incident which happened in Japan, it made me
> difficult to keep working for anythong around Bitcoin support. Thus, I
> never wrote a tool issuing Bitcoin transaction with Gnuk Token.

I see. That must have been discouraging.

Thank you for the history lesson. Having the context and seeing the lineage of things is really helpful.


From gniibe at fsij.org  Wed Sep  4 02:08:39 2019
From: gniibe at fsij.org (NIIBE Yutaka)
Date: Wed, 04 Sep 2019 09:08:39 +0900
Subject: USB control transfers vs ZLP
In-Reply-To: <alpine.BSO.2.21.1909031323160.24493@resin.csoft.net>
References: <alpine.BSO.2.21.1808142314030.54718@resin.csoft.net>
 <87zhxn82zw.fsf@iwagami.gniibe.org>
 <alpine.BSO.2.21.1808262304190.54718@resin.csoft.net>
 <87va7wqokv.fsf@fsij.org>
 <alpine.BSO.2.21.1909031323160.24493@resin.csoft.net>
Message-ID: <87o9003ou0.fsf@iwagami.gniibe.org>

Jeremy Drake <jeremy at drastrom.science> writes:
> Well, a year later, and I seem to have hit another similar case.  I have a
> HID report descriptor which just happens to be exactly 64 bytes long.  It
> seems like your fix did not properly handle the case when only one packet
> would be needed.

Sorry for my incomplete fix in last summer.  It was too hot.  Hotter
than this year.

I think that I pushed the correct fix finally (over the change of last
year), like:

-  if (data_p->len < USB_MAX_PACKET_SIZE)
+  if (data_p->len <= USB_MAX_PACKET_SIZE)
     {
       len = data_p->len;
       dev->state = LAST_IN_DATA;

> Alas, this does not seem to work with a Windows 10 host.  I have poked it
> with gdb over SWD, and while with Linux len_asked is the correct size (64
> in this case), with Windows len_asked is 64 MORE than the size of the
> report descriptor (128 in this case, but I tested a different descriptor
> which was 56 bytes long and len_asked was 120).  It would seem a ZLP
> should be required in that case, but Windows does not like it, and works
> properly if I disable the ZLP.  Times like these make you wish you could
> take a look at the driver's source and see what they're trying to
> accomplish ;)

For 64-byte descriptor, I believe a single ZLP is required.  Two ZLPs
was sent before the fix.  I guess that it is not good for a Windows 10
host.

For USB full-speed, the packet size is 64-byte.  When len_asked is more
than that for 64-byte descriptor, (I think) a host side expects ZLP
to find end of transaction.

Please test.
-- 


From gniibe at fsij.org  Wed Oct  2 03:58:01 2019
From: gniibe at fsij.org (NIIBE Yutaka)
Date: Wed, 02 Oct 2019 10:58:01 +0900
Subject: USB control transfers vs ZLP
In-Reply-To: <alpine.BSO.2.21.1909301444470.25093@resin.csoft.net>
References: <alpine.BSO.2.21.1808142314030.54718@resin.csoft.net>
 <87zhxn82zw.fsf@iwagami.gniibe.org>
 <alpine.BSO.2.21.1808262304190.54718@resin.csoft.net>
 <87va7wqokv.fsf@fsij.org>
 <alpine.BSO.2.21.1909031323160.24493@resin.csoft.net>
 <87o9003ou0.fsf@iwagami.gniibe.org>
 <alpine.BSO.2.21.1909032026230.24493@resin.csoft.net>
 <alpine.BSO.2.21.1909301444470.25093@resin.csoft.net>
Message-ID: <874l0rx61i.fsf@iwagami.gniibe.org>

Jeremy Drake <jeremy at drastrom.science> wrote:
> I localized the breakage to commit 5d344ac, as that version does not work
> when adding the <= fix, and 06eef36 does.

Which version of GCC are you using?

I'm using gcc-arm-none-eabi in Debian (15:7-2018-q2-6), and no troubles.
-- 


From gniibe at fsij.org  Thu Oct  3 09:29:47 2019
From: gniibe at fsij.org (NIIBE Yutaka)
Date: Thu, 03 Oct 2019 16:29:47 +0900
Subject: USB control transfers vs ZLP
In-Reply-To: <alpine.BSO.2.21.1910012217290.25093@resin.csoft.net>
References: <alpine.BSO.2.21.1808142314030.54718@resin.csoft.net>
 <87zhxn82zw.fsf@iwagami.gniibe.org>
 <alpine.BSO.2.21.1808262304190.54718@resin.csoft.net>
 <87va7wqokv.fsf@fsij.org>
 <alpine.BSO.2.21.1909031323160.24493@resin.csoft.net>
 <87o9003ou0.fsf@iwagami.gniibe.org>
 <alpine.BSO.2.21.1909032026230.24493@resin.csoft.net>
 <alpine.BSO.2.21.1909301444470.25093@resin.csoft.net>
 <874l0rx61i.fsf@iwagami.gniibe.org>
 <alpine.BSO.2.21.1910012147471.25093@resin.csoft.net>
 <alpine.BSO.2.21.1910012217290.25093@resin.csoft.net>
Message-ID: <87h84qqob8.fsf@iwagami.gniibe.org>

Jeremy Drake <jeremy at drastrom.science> writes:
> Another interesting difference with this one is that I am using a DFU
> bootloader.  Hasn't been an issue up to now, and don't see how the commit
> that seemed to break things would matter.  One thing I did notice is that
> if the board was "soft" reset by the DFU bootloader after it had used the
> USB to receive a new build, it would work with the newer chopstx, but
> would then fail on a cold reset from unplugging and replugging not in DFU
> mode.

For this issue (invocation from DFU bootloader), the commit

    0de43691ab8e9456ec2b476cd85ab18a749ffb89

matters, probably, I guess.

Does your board has a gate or a transistor to control D+ line?

For the commit (and related commits), I tried to clean up things around
USB initialization.

Before the commit, asserting the gate is controlled by usb_lld_sys_init
and usb_lld_sys_shutdown routines.

Now, usb_lld_sys_init and usb_lld_sys_shutdown are not called anymore by
USB driver, and it assumes that your board configuration of
VAL_GPIO_LED_ODR has correct value.
-- 


From gniibe at fsij.org  Mon Oct  7 09:09:36 2019
From: gniibe at fsij.org (Niibe Yutaka)
Date: Mon, 07 Oct 2019 16:09:36 +0900
Subject: USB control transfers vs ZLP
In-Reply-To: <alpine.BSO.2.21.1910041502350.25093@resin.csoft.net>
References: <alpine.BSO.2.21.1808142314030.54718@resin.csoft.net>
 <87zhxn82zw.fsf@iwagami.gniibe.org>
 <alpine.BSO.2.21.1808262304190.54718@resin.csoft.net>
 <87va7wqokv.fsf@fsij.org>
 <alpine.BSO.2.21.1909031323160.24493@resin.csoft.net>
 <87o9003ou0.fsf@iwagami.gniibe.org>
 <alpine.BSO.2.21.1909032026230.24493@resin.csoft.net>
 <alpine.BSO.2.21.1909301444470.25093@resin.csoft.net>
 <alpine.BSO.2.21.1910041430260.25093@resin.csoft.net>
 <alpine.BSO.2.21.1910041502350.25093@resin.csoft.net>
Message-ID: <87r23pm3pr.fsf@jumper.gniibe.org>

Jeremy Drake wrote:
> Confirmed this fix works with both versions of GCC I've tested with.
>
> diff --git a/mcu/usb-st-common.c b/mcu/usb-st-common.c
> index b97df38..58fe4fc 100644
> --- a/mcu/usb-st-common.c
> +++ b/mcu/usb-st-common.c
> @@ -235,10 +235,9 @@ usb_lld_init (struct usb_dev *dev, uint8_t feature)
>    USB->CNTR = CNTR_FRES;
>    USB->CNTR = 0;
>
> -  USB->BTABLE = 0;
> -
>    /* Clear Interrupt Status Register, and enable interrupt for USB */
>    USB->ISTR = 0;
> +  USB->BTABLE = 0;
>    USB->CNTR = (CNTR_CTRM | CNTR_OVRM | CNTR_ERRM
>                | CNTR_WKUPM | CNTR_SUSPM | CNTR_RESETM);
>  }

Thanks a lot.  I applied your patch and pushed it.
-- 


From ardavast at noiseoverip.com  Fri Oct 25 22:44:11 2019
From: ardavast at noiseoverip.com (Ardavast Dayleryan)
Date: Fri, 25 Oct 2019 23:44:11 +0300
Subject: Acknowledgement button on Olimex STM32-H103
Message-ID: <CAG=VjEkYYdAFpBMy_2NZN1Ou0X0NLYbQchyDSfXqmjB-+gUUbw@mail.gmail.com>

Hello,

I'm trying to get the acknowledgement button feature  to work on an Olimex
STM32-H103 board: https://www.olimex.com/Products/ARM/ST/STM32-H103/
The schematic can be found on this link:
https://www.olimex.com/Products/ARM/ST/STM32-H405/resources/STM32-H405_sch.pdf

The schematic shows that the button is connected to PA0 with a 10k
pull-up.  After browsing through the code and the STM32 reference manual
I tried to create the patch listed below.  However it doesn't work - I
can sign files without any problem, but it doesn't wait for
confirmation.  I've never programmed anything on an STM32 before, so I
guess I'm missing something obvious.  Can anyone help me to get on the
right track with this?

diff --git a/board/board-olimex-stm32-h103.h
b/board/board-olimex-stm32-h103.h
index 348860d..05f9b8f 100644
--- a/board/board-olimex-stm32-h103.h
+++ b/board/board-olimex-stm32-h103.h
@@ -12,7 +12,7 @@
 #define GPIO_LED_CLEAR_TO_EMIT          12
 #define GPIO_USB_BASE   GPIOC_BASE
 #define GPIO_USB_CLEAR_TO_ENABLE        11
-#undef  GPIO_OTHER_BASE
+#define GPIO_OTHER_BASE GPIOA_BASE

 /*
  * Port C setup.
@@ -29,5 +29,9 @@
 #define VAL_GPIO_LED_CRL            0x44888888      /*  PC7...PC0 */
 #define VAL_GPIO_LED_CRH            0x88837888      /* PC15...PC8 */

+#define VAL_GPIO_OTHER_ODR          0xFFFFFFFF
+#define VAL_GPIO_OTHER_CRL          0x44444448      /*  PA7...PA0 */
+#define VAL_GPIO_OTHER_CRH          0x44444444      /* PA15...PA8 */
+
 #define RCC_ENR_IOP_EN      RCC_APB2ENR_IOPCEN
 #define RCC_RSTR_IOP_RST    RCC_APB2RSTR_IOPCRST
diff --git a/contrib/ackbtn-stm32f103.c b/contrib/ackbtn-stm32f103.c
index d06a5e2..0f3a448 100644
--- a/contrib/ackbtn-stm32f103.c
+++ b/contrib/ackbtn-stm32f103.c
@@ -65,6 +65,14 @@ ackbtn_init (chopstx_intr_t *intr)
       pin_config |= PINCFG_EDGE_RISING;
       break;

+    case BOARD_ID_OLIMEX_STM32_H103:
+      afio_exticr_index = 0;
+      afio_exticr_extiX_pY = AFIO_EXTICR1_EXTI0_PA;
+      irq_num = EXTI0_IRQ;
+      pin_config = 0x0001;
+      pin_config |= PINCFG_EDGE_RISING;
+      break;
+
     case BOARD_ID_FST_01SZ:
     default:
       /* PA3 is connected to a hall sensor DRV5032FA */
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20191025/48a250b9/attachment.html>

From gniibe at fsij.org  Mon Oct 28 10:20:08 2019
From: gniibe at fsij.org (Niibe Yutaka)
Date: Mon, 28 Oct 2019 18:20:08 +0900
Subject: Acknowledgement button on Olimex STM32-H103
In-Reply-To: <CAG=VjEkYYdAFpBMy_2NZN1Ou0X0NLYbQchyDSfXqmjB-+gUUbw@mail.gmail.com>
References: <CAG=VjEkYYdAFpBMy_2NZN1Ou0X0NLYbQchyDSfXqmjB-+gUUbw@mail.gmail.com>
Message-ID: <87d0ehjkfr.fsf@jumper.gniibe.org>

Ardavast Dayleryan writes:
> I've never programmed anything on an STM32 before, so I guess I'm
> missing something obvious.  Can anyone help me to get on the right
> track with this?

I think that RCC setting is also needed to update.

> diff --git a/board/board-olimex-stm32-h103.h
> b/board/board-olimex-stm32-h103.h
> index 348860d..05f9b8f 100644
> --- a/board/board-olimex-stm32-h103.h
> +++ b/board/board-olimex-stm32-h103.h
> @@ -12,7 +12,7 @@
>  #define GPIO_LED_CLEAR_TO_EMIT          12
>  #define GPIO_USB_BASE   GPIOC_BASE
>  #define GPIO_USB_CLEAR_TO_ENABLE        11
> -#undef  GPIO_OTHER_BASE
> +#define GPIO_OTHER_BASE GPIOA_BASE
>
>  /*
>   * Port C setup.
> @@ -29,5 +29,9 @@
>  #define VAL_GPIO_LED_CRL            0x44888888      /*  PC7...PC0 */
>  #define VAL_GPIO_LED_CRH            0x88837888      /* PC15...PC8 */
>
> +#define VAL_GPIO_OTHER_ODR          0xFFFFFFFF
> +#define VAL_GPIO_OTHER_CRL          0x44444448      /*  PA7...PA0 */
> +#define VAL_GPIO_OTHER_CRH          0x44444444      /* PA15...PA8 */
> +
>  #define RCC_ENR_IOP_EN      RCC_APB2ENR_IOPCEN
>  #define RCC_RSTR_IOP_RST    RCC_APB2RSTR_IOPCRST

Here.  It should be:

==========================
#define RCC_ENR_IOP_EN     (RCC_APB2ENR_IOPAEN | RCC_APB2ENR_IOPCEN)
#define RCC_RSTR_IOP_RST   (RCC_APB2RSTR_IOPARST | RCC_APB2RSTR_IOPCRST)
==========================

Please try.
-- 


From gniibe at fsij.org  Mon Oct 28 11:32:29 2019
From: gniibe at fsij.org (Niibe Yutaka)
Date: Mon, 28 Oct 2019 19:32:29 +0900
Subject: GD32VF103
Message-ID: <87blu1jh36.fsf@jumper.gniibe.org>

Hello,

I got a board with GD32VF103 (named Longan Nano), which has a 32-bit
RISC-V core and GD's peripherals.  Please note that while GD32F103 is
STM32F103 clone-like with ARM Cortex-M3 core, GD32VF103 comes with RV32
IMAC core.

For technical resources, I found the repo for the chip:

    https://github.com/riscv-mcu/

Looking the manual of GD32VF103, the USB peripheral is not the one of
GD32F103 but it has functionality of USB OTG (both of host and
function).

When it is configured by BOOT0/BOOT1 pins, it can be seen as USB DFU
board.  I accessed it by dfu-util.
-- 


From gniibe at fsij.org  Tue Nov 12 07:09:18 2019
From: gniibe at fsij.org (NIIBE Yutaka)
Date: Tue, 12 Nov 2019 15:09:18 +0900
Subject: GD32VF103
In-Reply-To: <87blu1jh36.fsf@jumper.gniibe.org>
References: <87blu1jh36.fsf@jumper.gniibe.org>
Message-ID: <87mud1bp81.fsf@iwagami.gniibe.org>

Hello,

RISC-V MCU port of Chopstx starts working somehow.  See "riscv" branch
of Chopstx.

The target MCU is GD32VF103, which uses "Bumblebee" core (with
RISC-V 32bit IMAC instruction set and ECLIC module (Enhanced
Core-Local Interrupt Controller)).

Only it works for Longan nano with example-led.

Niibe Yutaka <gniibe at fsij.org> wrote:
> I got a board with GD32VF103 (named Longan Nano), which has a 32-bit
> RISC-V core and GD's peripherals.  Please note that while GD32F103 is
> STM32F103 clone-like with ARM Cortex-M3 core, GD32VF103 comes with RV32
> IMAC core.
[...]
> When it is configured by BOOT0/BOOT1 pins, it can be seen as USB DFU
> board.  I accessed it by dfu-util.

I realized that dfu-util needs GD32VF103 specific change.  Now, I use
this one:

    https://github.com/riscv-mcu/gd32-dfu-utils

I wasted two days with normal dfu-util, which resulted wrong flash
content here and there.

I wanted to use OpenOCD for the development, but it seems it's not yet
mature for the target.  I am looking at:

    https://github.com/riscv-mcu/riscv-openocd

Someday, hopefully in near future, we will be able to use OpenOCD.

For the core, I read the documents available at:

    https://github.com/nucleisys/Bumblebee_Core_Doc

I think that the documentation is young yet.  For example, I was not
able to find the address of its TIMER module and ECLIC module.

The MCU starts from the address 0x00000000, which is the alias of
0x08000000 flash memory.  When we use the standard ABI of position
independent code, assuming start address of 0x08000000, access to RAM at
0x20000000 by PC relative addressing mode fails, because the PC is
actually, around 0x00000000.  At the start up, we need to jump to the
0x08000000 world.

For those information, I dug it out from the code at:

    https://github.com/riscv-mcu/GD32VF103_Firmware_Library



For MCU, interrupt controller is important.  I tried not to use
ECLIC specific features, but only use CLIC feature-set.

For CLIC, I read the document, which is available at:

    https://github.com/riscv/riscv-fast-interrupt/blob/master/clic.adoc

It seems that interrupt controller(s) is not yet standardized in the
RISC-V world.


It runs at 96MHz, just like GD32F103, when we want to use its USB
module.


Bumblebee core supports M and U mode (Machine mode and User mode).  In
Chopstx, I don't put any assumption for mode of applications, so,
Chopstx application can run at U-mode.  But, it seems for me that U-mode
is not that useful for MCU with no MPU.
-- 


From gniibe at fsij.org  Wed Nov 20 04:23:48 2019
From: gniibe at fsij.org (NIIBE Yutaka)
Date: Wed, 20 Nov 2019 12:23:48 +0900
Subject: Chopstx 1.17
Message-ID: <871ru32ptn.fsf@iwagami.gniibe.org>

Hello,

Chopstx 1.17 is released.

	tag release/1.17
	Tagger: NIIBE Yutaka <gniibe at fsij.org>
	Date:   Wed Nov 20 11:38:03 2019 +0900
	commit 0e5994506aa46d39d232389b0652fafc48feec36

It has fixes for USB drivers.  Thanks to Jeremy Drake to find the bug.

Other changes are basically from RISC-V port.  Rename of functions, and
introduce chx_running function, not assuming global variable running.
The implementation chopstx.c now requires ticks_to_usec function (it
should have been so).

I created a branch, STABLE-BRANCH-1, to maintain stable versions from
now on.


In the riscv branch, I introduced major internal change (of chx_idle).
I realized that Cortex-M3/M4 requires major update to keep up the
change.  I will call it version 2.0, when finished.
-- 


From gniibe at fsij.org  Mon Dec 30 04:22:02 2019
From: gniibe at fsij.org (NIIBE Yutaka)
Date: Mon, 30 Dec 2019 12:22:02 +0900
Subject: Chopstx 1.18
Message-ID: <87imlymrad.fsf@iwagami.gniibe.org>

Hello,

Chopstx 1.18 is released.

	tag release/1.18
	Tagger: NIIBE Yutaka <gniibe at fsij.org>
	Date:   Mon Dec 30 10:51:15 2019 +0900
	commit cc49f4ef23f119c7279bd980eb54a76100ef7446

It has fixes for chopstx_poll with condition variables and GNU/Linux emulation.

This release is from STABLE-BRANCH-1 branch.

In the master branch (for 2.0), I pushed changes for RISC-V port (from
riscv branch).  The riscv branch is dead now.  I'm currently using
picolibc for RISC-V port.

In "example-lcd" directory of master, we have an example using USB, LCD
(through SPI) and serial for the target board.  The LCD screen
resolution is 160x80.  It requires 25600-byte of memory to store screen
data from host, while GD32VF103 only has 32KiB.  The USB module on
GD32VF103 is different one.  It supports modes of Hub and On-the-Go,
too.  It appears as same(similar) as STM32F105/107 (not STM32F103).

The target board is Sipeed Longan nano.  It is available at Seeed
Studio.  Distributors include Digikey, Mouser, and Akiduki.

While I implemented a USB driver for GD32VF103 (and possibly for
STM32F105/107), I wondered availability of free hardware design of USB
module.  This month, I found a blog article:

    https://antmicro.com/blog/2019/12/testing-usb-cores-with-python-and-cocotb/

Happy Hacking (and/in) Happy Holidays,
-- 


From bertrand at jacquin.bzh  Sat Jan 11 19:04:11 2020
From: bertrand at jacquin.bzh (Bertrand Jacquin)
Date: Sat, 11 Jan 2020 18:04:11 +0000
Subject: [PATCH] tool: switch to python3
Message-ID: <20200111180411.289770-1-bertrand@jacquin.bzh>

python2 is no longer maintained upstream
---
 tool/add_openpgp_authkey_from_gpgssh.py |   8 +-
 tool/calc_precompute_table_ecc.py       |  14 +--
 tool/dfuse.py                           |  32 +++----
 tool/dump_mem.py                        |   8 +-
 tool/get_raw_public_key.py              |   2 +-
 tool/pageant_proxy_to_gpg.py            |   2 +-
 tool/pinpadtest.py                      | 114 ++++++++++++------------
 7 files changed, 91 insertions(+), 91 deletions(-)

diff --git a/tool/add_openpgp_authkey_from_gpgssh.py b/tool/add_openpgp_authkey_from_gpgssh.py
index 1eb80de9c8a8..2f9f0e13ad03 100644
--- a/tool/add_openpgp_authkey_from_gpgssh.py
+++ b/tool/add_openpgp_authkey_from_gpgssh.py
@@ -109,15 +109,15 @@ def build_rsakey_from_ssh_key_under_gpg_agent(g, timestamp=None):
     # The information is in SEXP format, extract N and E
     s = sexp(pubkey_info_str)
     if s[0] != 'public-key':
-        print s
+        print(s)
         exit(1)
     rsa = s[1]
     if rsa[0] != 'rsa':
-        print rsa
+        print(rsa)
         exit(1)
     n_x = rsa[1]
     if n_x[0] != 'n':
-        print n_x
+        print(n_x)
         exit(1)
     n_byte_str = n_x[1]
     while n_byte_str[0] == '\x00':
@@ -125,7 +125,7 @@ def build_rsakey_from_ssh_key_under_gpg_agent(g, timestamp=None):
     n = n_byte_str
     e_x = rsa[2]
     if e_x[0] != 'e':
-        print e_x
+        print(e_x)
         exit(1)
     e = e_x[1]
     if not timestamp:
diff --git a/tool/calc_precompute_table_ecc.py b/tool/calc_precompute_table_ecc.py
index 2b59789329ad..5536db1ebd2b 100644
--- a/tool/calc_precompute_table_ecc.py
+++ b/tool/calc_precompute_table_ecc.py
@@ -8,21 +8,21 @@ def print_nG(n):
    nGy_str = "%064x" % nG.y()
    print256(nGx_str)
    print256(nGy_str)
-   print
+   print()
 
 def print256(s):
    print("0x%s, 0x%s, 0x%s, 0x%s," % (s[56:64], s[48:56], s[40:48], s[32:40]))
    print("0x%s, 0x%s, 0x%s, 0x%s" %  (s[24:32], s[16:24], s[8:16], s[0:8]))
-   print
+   print()
 
 
 for i in range(1,16):
-  n = (i & 1) + (i & 2) * 0x8000000000000000L + (i & 4) * 0x40000000000000000000000000000000L + (i & 8) * 0x200000000000000000000000000000000000000000000000L
-  print "%064x" % n
+  n = (i & 1) + (i & 2) * 0x8000000000000000 + (i & 4) * 0x40000000000000000000000000000000 + (i & 8) * 0x200000000000000000000000000000000000000000000000
+  print("%064x" % n)
   print_nG(n)
 
 for i in range(1,16):
-  n = (i & 1) + (i & 2) * 0x8000000000000000L + (i & 4) * 0x40000000000000000000000000000000L + (i & 8) * 0x200000000000000000000000000000000000000000000000L
-  n = n * 0x100000000L
-  print "%064x" % n
+  n = (i & 1) + (i & 2) * 0x8000000000000000 + (i & 4) * 0x40000000000000000000000000000000 + (i & 8) * 0x200000000000000000000000000000000000000000000000
+  n = n * 0x100000000
+  print("%064x" % n)
   print_nG(n)
diff --git a/tool/dfuse.py b/tool/dfuse.py
index cd0f17284817..d108810e85e3 100755
--- a/tool/dfuse.py
+++ b/tool/dfuse.py
@@ -104,9 +104,9 @@ class DFU_STM32(object):
         interface: usb.Interface object representing the interface and altenate setting.
         """
         if interface.interfaceClass != DFU_CLASS:
-            raise ValueError, "Wrong interface class"
+            raise ValueError("Wrong interface class")
         if interface.interfaceSubClass != DFU_SUBCLASS:
-            raise ValueError, "Wrong interface sub class"
+            raise ValueError("Wrong interface sub class")
         self.__protocol = interface.interfaceProtocol
         self.__devhandle = device.open()
         self.__devhandle.setConfiguration(configuration)
@@ -170,7 +170,7 @@ class DFU_STM32(object):
             while s[4] == STATE_DFU_DOWNLOAD_BUSY:
                 time.sleep(0.1)
                 s = self.ll_get_status()
-            raise ValueError, "Read memory failed (%d)" % s[0]
+            raise ValueError("Read memory failed (%d)" % s[0])
 
     def dfuse_set_address_pointer(self, address):
         bytes = get_four_bytes (address)
@@ -181,7 +181,7 @@ class DFU_STM32(object):
             time.sleep(0.1)
             s = self.ll_get_status()
         if s[4] != STATE_DFU_DOWNLOAD_IDLE:
-            raise ValueError, "Set Address Pointer failed"
+            raise ValueError("Set Address Pointer failed")
 
     def dfuse_erase(self, address):
         bytes = get_four_bytes (address)
@@ -191,7 +191,7 @@ class DFU_STM32(object):
             time.sleep(0.1)
             s = self.ll_get_status()
         if s[4] != STATE_DFU_DOWNLOAD_IDLE:
-            raise ValueError, "Erase failed"
+            raise ValueError("Erase failed")
 
     def dfuse_write_memory(self, block):
         blocknum = self.__blocknum
@@ -202,7 +202,7 @@ class DFU_STM32(object):
             time.sleep(0.1)
             s = self.ll_get_status()
         if s[4] != STATE_DFU_DOWNLOAD_IDLE:
-            raise ValueError, "Write memory failed"
+            raise ValueError("Write memory failed")
 
     def download(self, ih):
         # First, erase pages
@@ -280,7 +280,7 @@ class DFU_STM32(object):
             elif s[4] == STATE_DFU_MANIFEST_WAIT_RESET:
                 self.__devhandle.reset()
             elif s[4] != STATE_DFU_IDLE:
-                raise ValueError, "write failed (%d)." % s[4]
+                raise ValueError("write failed (%d)." % s[4])
         else:
             self.ll_clear_status()
             self.ll_clear_status()
@@ -315,7 +315,7 @@ class DFU_STM32(object):
                 j = 0
                 for c in data[0:(addr + 1024 - start_addr)]:
                     if (ord(c)&0xff) != block[j + start_addr - addr]:
-                        raise ValueError, "verify failed at %08x" % (addr + i*1024+j)
+                        raise ValueError("verify failed at %08x" % (addr + i*1024+j))
                     j += 1
                 data = data[(addr + 1024 - start_addr):]
                 addr += 1024
@@ -330,7 +330,7 @@ class DFU_STM32(object):
                 j = 0
                 for c in data[i*1024:(i+1)*1024]:
                     if (ord(c)&0xff) != block[j]:
-                        raise ValueError, "verify failed at %08x" % (addr + i*1024+j)
+                        raise ValueError("verify failed at %08x" % (addr + i*1024+j))
                     j += 1
                 if i & 0x03 == 0x03:
                     sys.stdout.write("#")
@@ -367,25 +367,25 @@ def get_device():
                                 (alt.interfaceProtocol == DFU_STM32PROTOCOL_0 or \
                                      alt.interfaceProtocol == DFU_STM32PROTOCOL_2):
                             return dev, config, alt
-    raise ValueError, "Device not found"
+    raise ValueError("Device not found")
 
 def main(filename):
     dev, config, intf = get_device()
-    print "Device:", dev.filename
-    print "Configuration", config.value
-    print "Interface", intf.interfaceNumber
+    print("Device:", dev.filename)
+    print("Configuration", config.value)
+    print("Interface", intf.interfaceNumber)
     dfu = DFU_STM32(dev, config, intf)
-    print dfu.ll_get_string(intf.iInterface)
+    print(dfu.ll_get_string(intf.iInterface))
     s = dfu.ll_get_status()
     if s[4] == STATE_DFU_ERROR:
         dfu.ll_clear_status()
     s = dfu.ll_get_status()
-    print s
+    print(s)
     if s[4] == STATE_DFU_IDLE:
         exit
     transfer_size = 1024
     if s[0] != DFU_STATUS_OK:
-        print s
+        print(s)
         exit
     ih = intel_hex(filename)
     dfu.download(ih)
diff --git a/tool/dump_mem.py b/tool/dump_mem.py
index 806bafe5b1b5..d793271c7dc5 100755
--- a/tool/dump_mem.py
+++ b/tool/dump_mem.py
@@ -27,22 +27,22 @@ from dfuse import *
 
 dev, config, intf = get_device()
 dfu = DFU_STM32(dev, config, intf)
-print dfu.ll_get_string(intf.iInterface)
+print(dfu.ll_get_string(intf.iInterface))
 s = dfu.ll_get_status()
 dfu.ll_clear_status()
 s = dfu.ll_get_status()
-print s
+print(s)
 dfu.dfuse_set_address_pointer(int(sys.argv[1], 16))
 s = dfu.ll_get_status()
 dfu.ll_clear_status()
 s = dfu.ll_get_status()
 dfu.ll_clear_status()
 s = dfu.ll_get_status()
-print s
+print(s)
 block = dfu.dfuse_read_memory()
 count = 0
 for d in block:
-    print "%02x" % d,
+    print("%02x" % d)
     if count & 0x0f == 0x0f:
         print
     count += 1
diff --git a/tool/get_raw_public_key.py b/tool/get_raw_public_key.py
index fb1272f09163..f09bba89c754 100755
--- a/tool/get_raw_public_key.py
+++ b/tool/get_raw_public_key.py
@@ -20,7 +20,7 @@ def get_gpg_public_key(keygrip):
     pos_last = key.index(")(1:e3:")
     key = key[pos:pos_last]
     if len(key) != 256:
-        raise ValueError, binascii.hexlify(key)
+        raise ValueError(binascii.hexlify(key))
     return key
 
 if __name__ == '__main__':
diff --git a/tool/pageant_proxy_to_gpg.py b/tool/pageant_proxy_to_gpg.py
index a755efcd282d..ec7ddc3f6d49 100644
--- a/tool/pageant_proxy_to_gpg.py
+++ b/tool/pageant_proxy_to_gpg.py
@@ -28,7 +28,7 @@ from sexp import sexp
 # Assume it's only OPENPGP.3 key and it's 2048-bit
 
 def debug(string):
-    print "DEBUG: %s" % string
+    print("DEBUG: %s" % string)
     sys.stdout.flush()
 
 def get_keygrip_list(keyinfo_result):
diff --git a/tool/pinpadtest.py b/tool/pinpadtest.py
index 99b132636083..bebe7845313d 100755
--- a/tool/pinpadtest.py
+++ b/tool/pinpadtest.py
@@ -82,7 +82,7 @@ class Card(object):
             elif code == FEATURE_MODIFY_PIN_DIRECT:
                 self.modify_ioctl = ioctl
         if self.verify_ioctl == -1:
-            raise ValueError, "Not supported"
+            raise ValueError("Not supported")
 
     def cmd_select_openpgp(self):
         apdu = [0x00, 0xa4, 0x04, 0x00, 6, 0xd2, 0x76, 0x00, 0x01, 0x24, 0x01 ]
@@ -90,7 +90,7 @@ class Card(object):
         if sw1 == 0x61:         # More data
             response, sw1, sw2 = self.connection.transmit([0x00, 0xc0, 0, 0, sw2])
         elif not (sw1 == 0x90 and sw2 == 0x00):
-            raise ValueError, ("cmd_select_openpgp %02x %02x" % (sw1, sw2))
+            raise ValueError("cmd_select_openpgp %02x %02x" % (sw1, sw2))
 
     def possibly_add_dummy_byte(self):
         if self.another_byte:
@@ -135,11 +135,11 @@ class Card(object):
         sw1 = data[0]
         sw2 = data[1]
         if not (sw1 == 0x90 and sw2 == 0x00):
-            raise ValueError, ("cmd_verify_pinpad %02x %02x" % (sw1, sw2))
+            raise ValueError("cmd_verify_pinpad %02x %02x" % (sw1, sw2))
 
     def send_modify_pinpad(self, apdu, single_step, command):
         if self.modify_ioctl == -1:
-            raise ValueError, "Not supported"
+            raise ValueError("Not supported")
         pin_modify = [ 0x00, # bTimerOut
                        0x00, # bTimerOut2
                        0x82, # bmFormatString: Byte, pos=0, left, ASCII.
@@ -171,7 +171,7 @@ class Card(object):
         sw1 = data[0]
         sw2 = data[1]
         if not (sw1 == 0x90 and sw2 == 0x00):
-            raise ValueError, ("%s %02x %02x" % (command, sw1, sw2))
+            raise ValueError("%s %02x %02x" % (command, sw1, sw2))
 
     def cmd_reset_retry_counter(self, who, data):
         if who == BY_ADMIN:
@@ -180,7 +180,7 @@ class Card(object):
             apdu = [0x00, 0x2c, 0x00, 0x81, len(data) ] + data # BY_USER with resetcode
         response, sw1, sw2 = self.connection.transmit(apdu)
         if not (sw1 == 0x90 and sw2 == 0x00):
-            raise ValueError, ("cmd_reset_retry_counter %02x %02x" % (sw1, sw2))
+            raise ValueError("cmd_reset_retry_counter %02x %02x" % (sw1, sw2))
 
     # Note: CCID specification doesn't permit this (only 0x20 and 0x24)
     def cmd_reset_retry_counter_pinpad(self, who):
@@ -195,7 +195,7 @@ class Card(object):
         apdu = [0x00, 0xda, 0x00, 0xd3, len(data) ] + data # BY_ADMIN
         response, sw1, sw2 = self.connection.transmit(apdu)
         if not (sw1 == 0x90 and sw2 == 0x00):
-            raise ValueError, ("cmd_put_resetcode %02x %02x" % (sw1, sw2))
+            raise ValueError("cmd_put_resetcode %02x %02x" % (sw1, sw2))
 
     # Note: CCID specification doesn't permit this (only 0x20 and 0x24)
     def cmd_put_resetcode_pinpad(self):
@@ -225,8 +225,8 @@ def main(who, method, add_a_byte, pinmin, pinmax, change_by_two_steps, fixed):
     card.connection.connect()
 
     ident = card.connection.getReader()
-    print "Reader/Token:", ident
-    print "ATR:", toHexString( card.connection.getATR() )
+    print("Reader/Token:", ident)
+    print("ATR:", toHexString( card.connection.getATR() ))
 
     if ident == COVADIS_VEGA_ALPHA:
         card.cmd_vega_alpha_disable_empty_verify()
@@ -236,29 +236,29 @@ def main(who, method, add_a_byte, pinmin, pinmax, change_by_two_steps, fixed):
     card.cmd_select_openpgp()
     if method == "verify":
         if who == BY_USER:
-            print "Please input User's PIN"
+            print("Please input User's PIN")
         else:
-            print "Please input Admin's PIN"
+            print("Please input Admin's PIN")
         card.cmd_verify_pinpad(who)
     elif method == "change":
         if change_by_two_steps:
             if who == BY_USER:
-                print "Please input User's PIN"
+                print("Please input User's PIN")
             else:
-                print "Please input Admin's PIN"
+                print("Please input Admin's PIN")
             card.cmd_verify_pinpad(who)
             if who == BY_USER:
-                print "Please input New User's PIN twice"
+                print("Please input New User's PIN twice")
             else:
-                print "Please input New Admin's PIN twice"
+                print("Please input New Admin's PIN twice")
             card.cmd_change_reference_data_pinpad(who, True)
         else:
             if who == BY_USER:
-                print "Please input User's PIN"
-                print "and New User's PIN twice"
+                print("Please input User's PIN")
+                print("and New User's PIN twice")
             else:
-                print "Please input Admin's PIN"
-                print "and New Admin's PIN twice"
+                print("Please input Admin's PIN")
+                print("and New Admin's PIN twice")
             card.cmd_change_reference_data_pinpad(who, False)
     elif method == "unblock":
         if change_by_two_steps:
@@ -268,66 +268,66 @@ def main(who, method, add_a_byte, pinmin, pinmax, change_by_two_steps, fixed):
                 newpin=s2l(getpass("Please input New User's PIN from keyboard: "))
                 card.cmd_reset_retry_counter(who,resetcode+newpin)
             else:
-                print "Please input Admin's PIN"
+                print("Please input Admin's PIN")
                 card.cmd_verify_pinpad(BY_ADMIN)
                 newpin=s2l(getpass("Please input New User's PIN from keyboard: "))
                 card.cmd_reset_retry_counter(who,newpin)
         else:
             if who == BY_USER:
-                print "Please input reset code"
-                print "and New User's PIN twice"
+                print("Please input reset code")
+                print("and New User's PIN twice")
             else:
-                print "Please input Admin's PIN"
+                print("Please input Admin's PIN")
                 card.cmd_verify_pinpad(BY_ADMIN)
-                print "Please input New User's PIN twice"
+                print("Please input New User's PIN twice")
             card.cmd_reset_retry_counter_pinpad(who)
     elif method == "put":
         if change_by_two_steps:
             # It means using keyboard for new PIN
-            print "Please input Admin's PIN"
+            print("Please input Admin's PIN")
             card.cmd_verify_pinpad(BY_ADMIN)
             resetcode=s2l(getpass("Please input New Reset Code from keyboard: "))
             card.cmd_put_resetcode(resetcode)
         else:
-            print "Please input Admin's PIN"
+            print("Please input Admin's PIN")
             card.cmd_verify_pinpad(BY_ADMIN)
-            print "Please input New Reset Code twice"
+            print("Please input New Reset Code twice")
             card.cmd_put_resetcode_pinpad()
     else:
-        raise ValueError, method
+        raise ValueError(method)
     card.connection.disconnect()
 
-    print "OK."
+    print("OK.")
     return 0
 
 def print_usage():
-    print "pinpad-test: testing pinentry of PC/SC card reader"
-    print "    help:"
-    print "\t--help:\t\tthis message"
-    print "    method:\t\t\t\t\t\t\t[verify]"
-    print "\t--verify:\tverify PIN"
-    print "\t--change:\tchange PIN (old PIN, new PIN twice)"
-    print "\t--change2:\tchange PIN by two steps (old PIN, new PIN twice)"
-    print "\t--unblock:\tunblock PIN (admin PIN/resetcode, new PIN twice)"
-    print "\t--unblock2:\tunblock PIN (admin PIN:pinpad, new PIN:kbd)"
-    print "\t--put:\t\tsetup resetcode (admin PIN, new PIN twice)"
-    print "\t--put2::\t\tsetup resetcode (admin PIN:pinpad, new PIN:kbd)"
-    print "    options:"
-    print "\t--fixed N:\tUse fixed length input"
-    print "\t--admin:\tby administrator\t\t\t[False]"
-    print "\t--add:\t\tadd a dummy byte at the end of APDU\t[False]"
-    print "\t--pinmin:\tspecify minimum length of PIN\t\t[6]"
-    print "\t--pinmax:\tspecify maximum length of PIN\t\t[15]"
-    print "EXAMPLES:"
-    print "   $ pinpad-test                   # verify user's PIN "
-    print "   $ pinpad-test --admin           # verify admin's PIN "
-    print "   $ pinpad-test --change          # change user's PIN "
-    print "   $ pinpad-test --change --admin  # change admin's PIN "
-    print "   $ pinpad-test --change2         # change user's PIN by two steps"
-    print "   $ pinpad-test --change2 --admin # change admin's PIN by two steps"
-    print "   $ pinpad-test --unblock         # change user's PIN by reset code"
-    print "   $ pinpad-test --unblock --admin # change user's PIN by admin's PIN"
-    print "   $ pinpad-test --put             # setup resetcode "
+    print("pinpad-test: testing pinentry of PC/SC card reader")
+    print("    help:")
+    print("\t--help:\t\tthis message")
+    print("    method:\t\t\t\t\t\t\t[verify]")
+    print("\t--verify:\tverify PIN")
+    print("\t--change:\tchange PIN (old PIN, new PIN twice)")
+    print("\t--change2:\tchange PIN by two steps (old PIN, new PIN twice)")
+    print("\t--unblock:\tunblock PIN (admin PIN/resetcode, new PIN twice)")
+    print("\t--unblock2:\tunblock PIN (admin PIN:pinpad, new PIN:kbd)")
+    print("\t--put:\t\tsetup resetcode (admin PIN, new PIN twice)")
+    print("\t--put2::\t\tsetup resetcode (admin PIN:pinpad, new PIN:kbd)")
+    print("    options:")
+    print("\t--fixed N:\tUse fixed length input")
+    print("\t--admin:\tby administrator\t\t\t[False]")
+    print("\t--add:\t\tadd a dummy byte at the end of APDU\t[False]")
+    print("\t--pinmin:\tspecify minimum length of PIN\t\t[6]")
+    print("\t--pinmax:\tspecify maximum length of PIN\t\t[15]")
+    print("EXAMPLES:")
+    print("   $ pinpad-test                   # verify user's PIN ")
+    print("   $ pinpad-test --admin           # verify admin's PIN ")
+    print("   $ pinpad-test --change          # change user's PIN ")
+    print("   $ pinpad-test --change --admin  # change admin's PIN ")
+    print("   $ pinpad-test --change2         # change user's PIN by two steps")
+    print("   $ pinpad-test --change2 --admin # change admin's PIN by two steps")
+    print("   $ pinpad-test --unblock         # change user's PIN by reset code")
+    print("   $ pinpad-test --unblock --admin # change user's PIN by admin's PIN")
+    print("   $ pinpad-test --put             # setup resetcode ")
 
 if __name__ == '__main__':
     who = BY_USER
@@ -374,7 +374,7 @@ if __name__ == '__main__':
             print_usage()
             exit(0)
         else:
-            raise ValueError, option
+            raise ValueError(option)
     main(who, method, add_a_byte, pinmin, pinmax, change_by_two_steps, fixed)
 
 # Failure


From gniibe at fsij.org  Tue Jan 14 06:13:38 2020
From: gniibe at fsij.org (NIIBE Yutaka)
Date: Tue, 14 Jan 2020 14:13:38 +0900
Subject: [PATCH] tool: switch to python3
In-Reply-To: <20200111180411.289770-1-bertrand@jacquin.bzh>
References: <20200111180411.289770-1-bertrand@jacquin.bzh>
Message-ID: <871rs24o3h.fsf@iwagami.gniibe.org>

Bertrand Jacquin <bertrand at jacquin.bzh> wrote:
> python2 is no longer maintained upstream

Thanks.  Applied and pushed.

Perhaps, I will consider new release of Gnuk in this January, so that I
will be able to flash FST-01SZ with new version, when being asked in
Europe.
-- 


From szczepan at nitrokey.com  Wed Jan 22 17:05:05 2020
From: szczepan at nitrokey.com (Szczepan Zalega | Nitrokey)
Date: Wed, 22 Jan 2020 17:05:05 +0100
Subject: User reports GNUK 1.2.14 losing his keys
Message-ID: <dd38e36e-a615-b1df-da16-3d99a2fa8938@nitrokey.com>

Hello,

One of Nitrokey Start/GNUK 1.2.14 users reports his device is losing his
keys overnight. However maximum PIN lengths are zeroed as well while
running `gnupg --card-status`, which looks suspicious and might rather
direct to backend IPC communication issues. I tried to reproduce it, but
with no luck. As far as I know this is a single case.

Has anyone encountered such a situation before? Any tips, how to debug
this? I have already asked about scdaemon.log.

Details: https://support.nitrokey.com/t/nitrokey-start-forgets-keys/2113

-- 
Best regards,
Szczepan


From gniibe at fsij.org  Thu Jan 23 07:56:53 2020
From: gniibe at fsij.org (NIIBE Yutaka)
Date: Thu, 23 Jan 2020 15:56:53 +0900
Subject: About .note.gnu.build-id section
Message-ID: <87zheeoe2y.fsf@iwagami.gniibe.org>

Hello,

When GCC is built with --enable-linker-build-id, gcc generates the
.note.gnu.build-id section.

I think that having .note.gnu.build-id section for an image of embedded
system doesn't make much sense.  I believe that it is common practice
not-enabling this option for GCC for embedded.

If you have such a compiler for some reasons, for now, please put a line
in your gnuk/src/gnuk.ld.in:

	/DISCARD/ : { *(.note.gnu.build-id) }

(and/or gnuk/src/stdaln-sys.ld.in)


I'm not sure if having the line in gnuk/src/gnuk.ld.in of the source is
good or not.  I think that including the section to an image is not
good, because it's just a waste of space.  So, even having something for
.note.gnu.build-id, it should be /DISCARD/.

If we want to identify an image by such an ID, we should do it right.
Currently, the image for Gnuk consists of two parts: the first 4KB and
the rest.  By firmware update, only the latter is used.  In this
situation, perhaps, we need to generate an ID for the latter (not for
entire image).


FWIW, I leaned about the build ID by reading:

    https://fedoraproject.org/wiki/RolandMcGrath/BuildID

With this support, every binary has .note.gnu.build-id section and we
can connect a binary to its debug information.

In my Debian GNU/Linux system, I have /usr/lib/debug/.build-id/
directory to have debug information.
-- 


From gniibe at fsij.org  Thu Jan 23 09:19:38 2020
From: gniibe at fsij.org (Niibe Yutaka)
Date: Thu, 23 Jan 2020 17:19:38 +0900
Subject: User reports GNUK 1.2.14 losing his keys
In-Reply-To: <dd38e36e-a615-b1df-da16-3d99a2fa8938@nitrokey.com>
References: <dd38e36e-a615-b1df-da16-3d99a2fa8938@nitrokey.com>
Message-ID: <87a76einz9.fsf@jumper.gniibe.org>

Szczepan Zalega | Nitrokey wrote:
> Details: https://support.nitrokey.com/t/nitrokey-start-forgets-keys/2113

Apparently (0 0 0 and 0 0 0 and 0 and triple [none]), gpg was unable
to get information from scdaemon.  It looks like USB failure.

Unfortunately, important information is missing.  Full output of gpg
--card-status should be available, which includes information about
method of accessing the token (PC/SC or internal CCID driver).
-- 


From szczepan at nitrokey.com  Thu Jan 23 10:03:50 2020
From: szczepan at nitrokey.com (Szczepan Zalega | Nitrokey)
Date: Thu, 23 Jan 2020 10:03:50 +0100
Subject: User reports GNUK 1.2.14 losing his keys
In-Reply-To: <87a76einz9.fsf@jumper.gniibe.org>
References: <dd38e36e-a615-b1df-da16-3d99a2fa8938@nitrokey.com>
 <87a76einz9.fsf@jumper.gniibe.org>
Message-ID: <b1285abb-9bbe-39af-4765-8fb25699feeb@nitrokey.com>

On 1/23/20 9:19 AM, Niibe Yutaka wrote:
> Apparently (0 0 0 and 0 0 0 and 0 and triple [none]), gpg was unable
> to get information from scdaemon.  It looks like USB failure.
> 
> Unfortunately, important information is missing.  Full output of gpg
> --card-status should be available, which includes information about
> method of accessing the token (PC/SC or internal CCID driver).
> 

Thank you, will check this direction further.

-- 
Best regards,
Szczepan


From gniibe at fsij.org  Fri Jan 24 07:18:15 2020
From: gniibe at fsij.org (NIIBE Yutaka)
Date: Fri, 24 Jan 2020 15:18:15 +0900
Subject: User reports GNUK 1.2.14 losing his keys
In-Reply-To: <b1285abb-9bbe-39af-4765-8fb25699feeb@nitrokey.com>
References: <dd38e36e-a615-b1df-da16-3d99a2fa8938@nitrokey.com>
 <87a76einz9.fsf@jumper.gniibe.org>
 <b1285abb-9bbe-39af-4765-8fb25699feeb@nitrokey.com>
Message-ID: <87k15hjs2g.fsf@jumper.gniibe.org>

Hello, again,

Looking at the support page of yours, I'm afraid you suggested wrong
direction (if you want to identify the real cause of the problem).

Let me explain a few things.

For use of GnuPG with Gnuk Token (or OpenPGPcard), I believe that the
best way is using scdaemon with the internal CCID driver.  When
something goes wrong in USB communication, it can detect problem
soonish.

To detect device event reliably, Gnuk specifically uses the USB endpoint
2 for its interrupt endpoint, although it is a token with fixed card.
(Such an endpoint is used to notify host for card events of
insertion/removal.)  It works well with the internal CCID driver; when
USB connection going wrong, scdaemon is notified.

Scdaemon supports PC/SC, because there are situations where it is
needed; Like on system with Windows/macOS, or environment where use of
other card is required.  PC/SC itself is a subsystem, a bit complicated.
It has/does its own internal error handling.  So, scdaemon cannot get
fine-grained information in some situations.  I'd recomend use of the
internal CCID driver, especially when we need to identify the device
problem.

And, suggesting shared use of a USB device by multiple applications in a
violent way (no coordination among multiple applications) may just
compilicate things.  If it is common practice among your users to try
such a thing, I have no wonder observing problem of 0 0 0 and 0 0 0 and
0 and triple [none].  For use by other applications, we keep suggesting
a solid method of:

	gpgconf --kill scdaemon

instead.

Well, for me, it looks like the device itself works fine and it seems
that it's other part(s) of user's system which caused the problem.
--


From gniibe at fsij.org  Fri Jan 24 09:17:54 2020
From: gniibe at fsij.org (NIIBE Yutaka)
Date: Fri, 24 Jan 2020 17:17:54 +0900
Subject: Gnuk 1.2.15
Message-ID: <E1iuuAB-0000vL-OW@akagi.fsij.org>

Hello,

Gnuk 1.2.15 is released.

	tag release/1.2.15
	Tagger: NIIBE Yutaka <gniibe at fsij.org>
	Date:   Fri Jan 24 15:39:31 2020 +0900
	commit 49f25449185ba75c60e4a04a285bbb814c50e53e

Firmware wise, only update of Chopstx by 1.18.  Tests are updated
to support testing with OpenPGP card.  Tools are patched to run with
Python3.

In 2020, I'm going to remove old features (like RSA and classic ECC)
from master, and I'd like to support modern ECC only.
-- 


From tomli at tomli.me  Sat Feb  1 07:53:07 2020
From: tomli at tomli.me (Tom Li)
Date: Sat, 1 Feb 2020 14:53:07 +0800
Subject: First Public Demonstration of STM32 Flash Readout Attack by Voltage
 Glitching
Message-ID: <20200201065307.GA17624@localhost.localdomain>

Hello,

Back in 2018, Niibe Yutaka noticed several companies from China claim to
offer flash read-out services, I pointed out that it's not a new threat [0] -
they probably have came into existence as early as 2012 for creating cheap
clones by rogue competitors. Unfortunately, no public information can
confirm the authenticity of these attacks, and no technical details were
known, only educated guesses. In the original reply, I said,

> It's commonly believed STM32F1 is easy to crack, both through physical
> IC decapping, physical IC decapping, or by mounting a fault injection
> attack to disable the flash readout protection, or exploiting the
> bootloader, who knows...

Today, I read in the news that the first public demonstration of such an
attack has been published by a group of security researchers. The targets
of the attack were STM32F205 and STM32F427 in order to attack the Trezor
Bitcoin wallet, but presumably it also applies to other STM32 series as well.

Unfortunately, it was exactly what I was worrying about - the attack method
involves both a fault injection attack, and an exploiting of the bootloader
using the fault. You can read the original article at [1], but here's a summary.

1. The original STM32 has RDP Level 2, i.e. JTAG/SWD debug interfaces are all
disabled, flash readout is prohibited. By using a voltage glitching attack on
boot, it's possible to corrupt the RDP Level and downgrade it to Level 1, re-
enabling all debug interfaces and the original bootloader. 

2. Although the same technique cannot be used to downgrade RDP Level to 0,
but it's possible to use another voltage glitching attack at the same time
when the flash readout command is issued, thus corrupting and bypassing the
security check of the readout command.

3. The attack only requires a FPGA and costs less than 100 USD. 

> The STM32s used in wallets like the Trezor One are set to RDP Level 2 at
> manufacturing time. This deativates all debugging features and disables
> the integrated BootROM bootloader. With voltage glitching it is possible
> to corrupt the RDP value being read from the Option Bytes, as shown in the
> Wallet.Fail research. This effectively allows an attacker to downgrade the
> security configuration of a target device from RDP Level 2 to RDP Level 1.
> A downgrade from RDP Level 1 to RDP Level 0 was determined to be infeasible
> in practice, due to the hamming distance between RDP Level 0 and RDP Level 2.
> By performing a voltage-glitch during BootROM execution it is possible to
> re-enable the JTAG and SWD debugging interfaces. It was determined that the
> integrated BootROM bootloader can be re-enabled in a similar fashion.

> However, since it was determined that for certain commands, i.e. Read Memory,
> the BootROM bootloader command handler checks if the RDP Level of the device
> is RDP Level 0 for each command issued to it. A voltage glitch timed to
> coincide with the RDP Level check of the command handler while processing
> commands that are disabled for RDP Levels other than RDP Level 0 can result in
> a bypass of the RDP Level check and the command succeeding as a result. This
> means that it is possible to glitch commands that should fail based on the
> device?s RDP configuration (i.e. bypassing the command handler that should
> have returned a NACK). As a result, it is possible to execute commands that
> are not available at RDP Level 1 or RDP Level 2. If applied to the Read Command,
> it is possible to arbitrarily read flash memory from the microcontroller. Since
> the cryptographic seeds of many STM32-based wallets are stored in the STM32
> flash, the seed storage of these devices can be compromised.

> A Digilent Arty A7 FPGA development board was used for glitch and pulse
> generation, as well as instrumenting the STM32 and accurately timing the glitch.
> An FTDI FT232H-based breakout board, the Adafruit FT232H, was used for UART
> serial communication with the BootROM bootloader command handler. A Maxim
> MAX4619 multiplexer was used to multiplex between a nominal operating voltage
> for the STM32 CPU core voltage and the glitch voltage, i.e. GND or 0v. A
> BreakingBitcoin board was used to simplify interacting, which is a pin-
> compatible Trezor breakout board. The same attack could be performed
> in-situ on a hardware wallet. However, removing the microcontroller and
> placing it in a socket was deemed to be easier than soldering all the
> connections (brimarily Boot0 and Boot1) for the in-situ attack. 

As we see, it's an attack that is easy to implement by anyone. And although
the original targets are STM32F2 and STM32F4, but it's highly likely that it
also applies to other devices. 

For now, I strongly recommend all Gnuk users to use a high-entropy PIN, with
newer GnuPG with KDF-DO feature enabled - it's not the end of the world, Gnuk
will still protect one's private key from attackers without physicial access
of the token.

And in the long run,

1. It's necessary to evaluate all security chips (and microcontroller designed
for security applications) on the market that don't require an NDA. A security
element (chip) is not guaranteed to be secure, it can be vulnerable to different
attacks as well, but empirically, the financial cost is higher, which is the
reason to adopt it.

2. And as I mentioned previously, it's also unnecessary to fully trust the
security element when if it's used. The goal is only to keep an unpowered Gnuk
more expensive to attack, so a double-encryption scheme can be used to provide
fallback to KDF-DO + Gnuk AES even if the security element is vulnerable. The
only downside is an additional latency/overhead, but I don't think it's
significant.

3. A community-wide effort is needed to develop a FPGA-based secure element, in
hope that it'll offer a more free and open implementation of a security element
than what's commercially available on the market without an NDA. 

Happy Hacking,

Tom Li
Beijing GNU/Linux User Group.

[0] https://lists.gnupg.org/pipermail/gnupg-users/2018-June/060616.html
[1] https://blog.kraken.com/post/3662/kraken-identifies-critical-flaw-in-trezor-hardware-wallets/


From gniibe at fsij.org  Sat Feb  1 09:42:23 2020
From: gniibe at fsij.org (NIIBE Yutaka)
Date: Sat, 01 Feb 2020 17:42:23 +0900
Subject: First Public Demonstration of STM32 Flash Readout Attack by
 Voltage Glitching
In-Reply-To: <20200201065307.GA17624@localhost.localdomain>
References: <20200201065307.GA17624@localhost.localdomain>
Message-ID: <87r1zepukw.fsf@jumper.gniibe.org>

Tom Li wrote:
> Today, I read in the news that the first public demonstration of such an
> attack has been published by a group of security researchers. The targets
> of the attack were STM32F205 and STM32F427 in order to attack the Trezor
> Bitcoin wallet, but presumably it also applies to other STM32 series as well.
[...]
> [1] https://blog.kraken.com/post/3662/kraken-identifies-critical-flaw-in-trezor-hardware-wallets/

Thanks for sharing important information.

I guess that such a technique could be also applied to GD32F103 or even
GD32VF103.

Well, it is matter of how it's difficult (how much cost) to extract data
from the chip, and/or, how long it takes time.

Tom, I wish your situation is not that worse by 2019-nCoV.  After the
outbreak will be settle down, it's good if we can meet again. :-)
-- 


From vagrant at debian.org  Fri Feb 21 09:03:54 2020
From: vagrant at debian.org (Vagrant Cascadian)
Date: Fri, 21 Feb 2020 00:03:54 -0800
Subject: Dropping RSA support (Re: Gnuk 1.2.15)
In-Reply-To: <E1iuuAB-0000vL-OW@akagi.fsij.org>
References: <E1iuuAB-0000vL-OW@akagi.fsij.org>
Message-ID: <87d0a8e591.fsf@yucca>

On 2020-01-24, NIIBE Yutaka wrote:
> In 2020, I'm going to remove old features (like RSA and classic ECC)
> from master, and I'd like to support modern ECC only.

If my master key is RSA, but all the subkeys are currently ECC of some
form, will this still be possible?

What about old encryption keys? Use an extra gnuk just to decrypt those
messages?


live well,
  vagrant
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 227 bytes
Desc: not available
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20200221/e95161d5/attachment.sig>

From bertrand at jacquin.bzh  Sat Apr 25 16:15:03 2020
From: bertrand at jacquin.bzh (Bertrand Jacquin)
Date: Sat, 25 Apr 2020 15:15:03 +0100
Subject: [PATCH] build: do not produce a dynamically linked position
 independent executable
In-Reply-To: <20200425141503.2410627-1-bertrand@jacquin.bzh>
References: <20200425141503.2410627-1-bertrand@jacquin.bzh>
Message-ID: <20200425141503.2410627-4-bertrand@jacquin.bzh>

---
 rules.mk | 3 +++
 1 file changed, 3 insertions(+)

diff --git a/rules.mk b/rules.mk
index 23d55f677f58..5ff80d86509b 100644
--- a/rules.mk
+++ b/rules.mk
@@ -63,6 +63,9 @@ MCFLAGS   += -specs=nosys.specs
 # Do not use the standard system startup files when linking
 MCFLAGS   += -nostartfiles
 
+# Don't produce a dynamically linked position independent executable
+MCFLAGS   += -no-pie
+
 MCFLAGS   += -mcpu=$(MCU)
 LDFLAGS   += $(MCFLAGS) -T$(LDSCRIPT) \
             -Wl,-Map=$(BUILDDIR)/$(PROJECT).map,--cref,--no-warn-mismatch,--gc-sections


From bertrand at jacquin.bzh  Sat Apr 25 16:15:02 2020
From: bertrand at jacquin.bzh (Bertrand Jacquin)
Date: Sat, 25 Apr 2020 15:15:02 +0100
Subject: [PATCH] build: move -nostartfiles earlier
In-Reply-To: <20200425141503.2410627-1-bertrand@jacquin.bzh>
References: <20200425141503.2410627-1-bertrand@jacquin.bzh>
Message-ID: <20200425141503.2410627-3-bertrand@jacquin.bzh>

---
 rules.mk | 5 ++++-
 1 file changed, 4 insertions(+), 1 deletion(-)

diff --git a/rules.mk b/rules.mk
index c0f99a6c92e2..23d55f677f58 100644
--- a/rules.mk
+++ b/rules.mk
@@ -60,8 +60,11 @@ ifeq ($(EMULATION),)
 # Discard compiler default specs
 MCFLAGS   += -specs=nosys.specs
 
+# Do not use the standard system startup files when linking
+MCFLAGS   += -nostartfiles
+
 MCFLAGS   += -mcpu=$(MCU)
-LDFLAGS   += $(MCFLAGS) -nostartfiles -T$(LDSCRIPT) \
+LDFLAGS   += $(MCFLAGS) -T$(LDSCRIPT) \
             -Wl,-Map=$(BUILDDIR)/$(PROJECT).map,--cref,--no-warn-mismatch,--gc-sections
 else
 DEFS      += -D_GNU_SOURCE


From bertrand at jacquin.bzh  Sat Apr 25 16:15:01 2020
From: bertrand at jacquin.bzh (Bertrand Jacquin)
Date: Sat, 25 Apr 2020 15:15:01 +0100
Subject: [PATCH] build: discard compiler default specs
In-Reply-To: <20200425141503.2410627-1-bertrand@jacquin.bzh>
References: <20200425141503.2410627-1-bertrand@jacquin.bzh>
Message-ID: <20200425141503.2410627-2-bertrand@jacquin.bzh>

This allow to overwrite any potential default specs defined in local gcc
build like stack-protector which is now enforced by more and more Linux
distributions while it should not apply in chopstx use case
---
 rules.mk | 3 +++
 1 file changed, 3 insertions(+)

diff --git a/rules.mk b/rules.mk
index 3915268418d4..c0f99a6c92e2 100644
--- a/rules.mk
+++ b/rules.mk
@@ -57,6 +57,9 @@ LDFLAGS =
 
 ###
 ifeq ($(EMULATION),)
+# Discard compiler default specs
+MCFLAGS   += -specs=nosys.specs
+
 MCFLAGS   += -mcpu=$(MCU)
 LDFLAGS   += $(MCFLAGS) -nostartfiles -T$(LDSCRIPT) \
             -Wl,-Map=$(BUILDDIR)/$(PROJECT).map,--cref,--no-warn-mismatch,--gc-sections


From bertrand at jacquin.bzh  Sat Apr 25 16:15:00 2020
From: bertrand at jacquin.bzh (Bertrand Jacquin)
Date: Sat, 25 Apr 2020 15:15:00 +0100
Subject: [PATCH] build: initilize empty MCFLAGS and LDFLAGS
Message-ID: <20200425141503.2410627-1-bertrand@jacquin.bzh>

Such variables are modified later, it make it clearer to read when
variable are only appened
---
 rules.mk | 11 +++++++----
 1 file changed, 7 insertions(+), 4 deletions(-)

diff --git a/rules.mk b/rules.mk
index 110079efdaaa..3915268418d4 100644
--- a/rules.mk
+++ b/rules.mk
@@ -50,14 +50,17 @@ IINCDIR   = $(patsubst %,-I%,$(INCDIR))
 LLIBDIR   = $(patsubst %,-L%,$(LIBDIR))
 
 VPATH     = $(sort $(dir $(CSRC)))
+
+# Initilize empty LDFLAGS and MCFLAGS
+MCFLAGS =
+LDFLAGS =
+
 ###
 ifeq ($(EMULATION),)
-MCFLAGS   = -mcpu=$(MCU)
-LDFLAGS   = $(MCFLAGS) -nostartfiles -T$(LDSCRIPT) \
+MCFLAGS   += -mcpu=$(MCU)
+LDFLAGS   += $(MCFLAGS) -nostartfiles -T$(LDSCRIPT) \
             -Wl,-Map=$(BUILDDIR)/$(PROJECT).map,--cref,--no-warn-mismatch,--gc-sections
 else
-MCFLAGS   =
-LDFLAGS   =
 DEFS      += -D_GNU_SOURCE
 endif
 


From gniibe at fsij.org  Tue Jun 30 03:04:27 2020
From: gniibe at fsij.org (NIIBE Yutaka)
Date: Tue, 30 Jun 2020 10:04:27 +0900
Subject: Chopstx 2.0
Message-ID: <87sged4b50.fsf@iwagami.gniibe.org>

Hello,

Chopstx 2.0 is released.

	tag release/2.0
	Tagger: NIIBE Yutaka <gniibe at fsij.org>
	Date:   Fri Jun 26 10:05:17 2020 +0900
	commit 34e7673871d9825549a0788a7ed59af276be9357

This release is from master branch.

Major change is inclusion of RISC-V port.  I'm currently using
picolibc for RISC-V port.  I'm not sure, for now, if I will switch
to newlib.

As I wrote last year, the target board is Sipeed Longan nano.  It is
available at Seeed Studio as well as Digikey, Mouser, and Akiduki.
-- 


From frederic.suel at free.fr  Sun Jul 26 15:35:05 2020
From: frederic.suel at free.fr (=?UTF-8?B?RnLDqWTDqXJpYyBTVUVM?=)
Date: Sun, 26 Jul 2020 15:35:05 +0200
Subject: How to use multiple Gnuk Token on the same PC
Message-ID: <bc10e6a5-9bc3-ebea-67aa-44a15e0d7e45@free.fr>

Hello !

I'm trying to use two Gnuk Token on the same PC. But, it seems that
Gpg/Enigmail show only the last plug.

I have two Gnuk token with two different identities ( A & B) because I
don't want to have them on the same keys for personal reason/use.

I plugged them both on Linux (A first then B) and I try to send a cipher
mail from A to B : it worked

I try to encipher mail received by B and it worked.

I made the other side : from B to A. When i try to encipher mail for A,
Gpg/Enigmail asked me for token A also it was plugged. I unplugged token
B ans it worked !

It seems that it's impossible to use multiple Gnuk Token on the same PC
at the same time.

Is there a solution ? Is it planned ? It would be great because there is
a lot of security use-cases for that :

-- one token by mail identity : personal, professional,pseudo ..;

-- one token for mail and one for encrypt HDD or session ;

-- one token for mail, one for SSH ;

-- etc..

Best regards









From jan at nitrokey.com  Sun Jul 26 20:32:47 2020
From: jan at nitrokey.com (Jan Suhr | Nitrokey)
Date: Sun, 26 Jul 2020 20:32:47 +0200
Subject: How to use multiple Gnuk Token on the same PC
In-Reply-To: <bc10e6a5-9bc3-ebea-67aa-44a15e0d7e45@free.fr>
References: <bc10e6a5-9bc3-ebea-67aa-44a15e0d7e45@free.fr>
Message-ID: <672ee1df-4052-b718-2dff-1c5c83e0906f@nitrokey.com>

We just released a modified Gnuk firmware which supports three IDs:

https://www.nitrokey.com/news/2020/new-firmware-multiple-identities-and-pgp-keys-one-nitrokey-start

The source code is at:
https://github.com/Nitrokey/nitrokey-start-firmware


Am 26.07.20 um 15:35 schrieb Fr?d?ric SUEL:
> Hello !
> 
> I'm trying to use two Gnuk Token on the same PC. But, it seems that
> Gpg/Enigmail show only the last plug.
> 
> I have two Gnuk token with two different identities ( A & B) because I
> don't want to have them on the same keys for personal reason/use.
> 
> I plugged them both on Linux (A first then B) and I try to send a cipher
> mail from A to B : it worked
> 
> I try to encipher mail received by B and it worked.
> 
> I made the other side : from B to A. When i try to encipher mail for A,
> Gpg/Enigmail asked me for token A also it was plugged. I unplugged token
> B ans it worked !
> 
> It seems that it's impossible to use multiple Gnuk Token on the same PC
> at the same time.
> 
> Is there a solution ? Is it planned ? It would be great because there is
> a lot of security use-cases for that :
> 
> -- one token by mail identity : personal, professional,pseudo ..;
> 
> -- one token for mail and one for encrypt HDD or session ;
> 
> -- one token for mail, one for SSH ;
> 
> -- etc..
> 
> Best regards
> 
> 
> 
> 
> 
> 
> 
> 
> _______________________________________________
> Gnuk-users mailing list
> Gnuk-users at gnupg.org
> https://lists.gnupg.org/mailman/listinfo/gnuk-users
> 

-- 
Jan Suhr
CEO / Gesch?ftsf?hrer

Nitrokey GmbH
https://www.nitrokey.com

Email: jan at nitrokey.com
Phone: +49 163 7010 408

Rheinstr. 10 C, 14513 Teltow, Germany
CEO / Gesch?ftsf?hrer: Jan Suhr
Register: AG Potsdam, HRB 32882 P
VAT ID / USt-IdNr.: DE300136599


From frederic.suel at free.fr  Sun Jul 26 23:58:45 2020
From: frederic.suel at free.fr (=?UTF-8?B?RnLDqWTDqXJpYyBTVUVM?=)
Date: Sun, 26 Jul 2020 23:58:45 +0200
Subject: How to use multiple Gnuk Token on the same PC
In-Reply-To: <672ee1df-4052-b718-2dff-1c5c83e0906f@nitrokey.com>
References: <bc10e6a5-9bc3-ebea-67aa-44a15e0d7e45@free.fr>
 <672ee1df-4052-b718-2dff-1c5c83e0906f@nitrokey.com>
Message-ID: <eca670d8-b532-36c5-1319-611f8c6793e1@free.fr>

It's a great new!

Is it compatible with FST-01, and other STM32F103 Gnuk compatible cards ?

And, if i need more than three identities/usages on the same device, and
then two or more NitrokeyStart plugged, can it work and how ?

Best regards

Le 26/07/2020 ? 20:32, Jan Suhr | Nitrokey via Gnuk-users a ?crit?:
> We just released a modified Gnuk firmware which supports three IDs:
>
> https://www.nitrokey.com/news/2020/new-firmware-multiple-identities-and-pgp-keys-one-nitrokey-start
>
> The source code is at:
> https://github.com/Nitrokey/nitrokey-start-firmware
>
>
> Am 26.07.20 um 15:35 schrieb Fr?d?ric SUEL:
>> Hello !
>>
>> I'm trying to use two Gnuk Token on the same PC. But, it seems that
>> Gpg/Enigmail show only the last plug.
>>
>> I have two Gnuk token with two different identities ( A & B) because I
>> don't want to have them on the same keys for personal reason/use.
>>
>> I plugged them both on Linux (A first then B) and I try to send a cipher
>> mail from A to B : it worked
>>
>> I try to encipher mail received by B and it worked.
>>
>> I made the other side : from B to A. When i try to encipher mail for A,
>> Gpg/Enigmail asked me for token A also it was plugged. I unplugged token
>> B ans it worked !
>>
>> It seems that it's impossible to use multiple Gnuk Token on the same PC
>> at the same time.
>>
>> Is there a solution ? Is it planned ? It would be great because there is
>> a lot of security use-cases for that :
>>
>> -- one token by mail identity : personal, professional,pseudo ..;
>>
>> -- one token for mail and one for encrypt HDD or session ;
>>
>> -- one token for mail, one for SSH ;
>>
>> -- etc..
>>
>> Best regards
>>
>>
>>
>>
>>
>>
>>
>>
>> _______________________________________________
>> Gnuk-users mailing list
>> Gnuk-users at gnupg.org
>> https://lists.gnupg.org/mailman/listinfo/gnuk-users
>>



From szczepan at nitrokey.com  Mon Jul 27 17:41:51 2020
From: szczepan at nitrokey.com (Szczepan Zalega | Nitrokey)
Date: Mon, 27 Jul 2020 17:41:51 +0200
Subject: How to use multiple Gnuk Token on the same PC
In-Reply-To: <eca670d8-b532-36c5-1319-611f8c6793e1@free.fr>
References: <bc10e6a5-9bc3-ebea-67aa-44a15e0d7e45@free.fr>
 <672ee1df-4052-b718-2dff-1c5c83e0906f@nitrokey.com>
 <eca670d8-b532-36c5-1319-611f8c6793e1@free.fr>
Message-ID: <13fef8d5-59fb-e754-adfb-8293cdbfecc5@nitrokey.com>

On 7/26/20 11:58 PM, Fr?d?ric SUEL wrote:
> Is it compatible with FST-01, and other STM32F103 Gnuk compatible cards ?
> 
Hi!

We do not have any particular hardware requirements besides availability
of 128kB of flash. The space is very tight though, and it might not fit
for some particular platform depending on the compiler. Surely works for
STM32F103.

> And, if i need more than three identities/usages on the same device, and
> then two or more NitrokeyStart plugged, can it work and how ?
> 
Just recently we have released a Python CLI tool [1] for changing the
virtual smart cards [2] through CCID/HID. It can address the specific
device by SN as far as I remember.


[1] https://github.com/Nitrokey/pynitrokey/
[2] https://github.com/Nitrokey/pynitrokey/#switching-id

Best regards,
Szczepan


-- 
Szczepan Zalega
Senior Software Developer

Nitrokey GmbH
https://www.nitrokey.com

Email: szczepan at nitrokey.com
Nickname: szszszsz

Rheinstr. 10 C, 14513 Teltow, Germany
CEO / Gesch?ftsf?hrer: Jan Suhr
Register: AG Potsdam, HRB 32882 P
VAT ID / USt-IdNr.: DE300136599




From wk at gnupg.org  Tue Jul 28 19:41:09 2020
From: wk at gnupg.org (Werner Koch)
Date: Tue, 28 Jul 2020 19:41:09 +0200
Subject: How to use multiple Gnuk Token on the same PC
In-Reply-To: <bc10e6a5-9bc3-ebea-67aa-44a15e0d7e45@free.fr>
 (=?utf-8?B?IkZyw6lkw6lyaWM=?= SUEL"'s
 message of "Sun, 26 Jul 2020 15:35:05 +0200")
References: <bc10e6a5-9bc3-ebea-67aa-44a15e0d7e45@free.fr>
Message-ID: <874kpry1u2.fsf@wheatstone.g10code.de>

On Sun, 26 Jul 2020 15:35, Fr?d?ric SUEL said:

> It seems that it's impossible to use multiple Gnuk Token on the same PC
> at the same time.

No, but you need to use the current development version of GnuPG.  I am
using 2 and more tokens for about two years now without problems.

We plan to get that 2.3 version out later the year.  See
https://dev.gnupg.org/T4702


Salam-Shalom,

   Werner


-- 
Die Gedanken sind frei.  Ausnahmen regelt ein Bundesgesetz.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 227 bytes
Desc: not available
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20200728/313f0edb/attachment.sig>

From gniibe at fsij.org  Wed Jul 29 03:35:15 2020
From: gniibe at fsij.org (NIIBE Yutaka)
Date: Wed, 29 Jul 2020 10:35:15 +0900
Subject: How to use multiple Gnuk Token on the same PC
In-Reply-To: <bc10e6a5-9bc3-ebea-67aa-44a15e0d7e45@free.fr>
References: <bc10e6a5-9bc3-ebea-67aa-44a15e0d7e45@free.fr>
Message-ID: <87zh7jyugc.fsf@iwagami.gniibe.org>

Fr?d?ric SUEL <frederic.suel at free.fr> wrote:
> I'm trying to use two Gnuk Token on the same PC. But, it seems that
> Gpg/Enigmail show only the last plug.

GnuPG 2.2 only supports a single token with PC/SC.  But, with the
internal CCID driver, multiple tokens are supported.

If 'gpg --card-status' shows your reader like:

    Reader ...........: 234B:0000:FSIJ-1.2.15-43225368:0

(i.e., USB VID:PID:SERIAL-string:0), then, it uses the internal CCID
driver.  If not, it is through PC/SC.  If there is no specific reason to
enable PC/SC service (for example, other usages for other cards), you
can disable it so that the internal CCID driver will be selected.

GnuPG 2.3 will support multiple tokens with PC/SC.  The ticket to track
this feature is:

    https://dev.gnupg.org/T3300

Including this improvement, there will be more in GnuPG 2.3.  It is
listed at:

    https://dev.gnupg.org/T4764
-- 


From frederic.suel at free.fr  Sat Aug  8 18:27:38 2020
From: frederic.suel at free.fr (=?UTF-8?B?RnLDqWTDqXJpYyBTVUVM?=)
Date: Sat, 8 Aug 2020 18:27:38 +0200
Subject: How to use multiple Gnuk Token on the same PC
In-Reply-To: <87zh7jyugc.fsf@iwagami.gniibe.org>
References: <bc10e6a5-9bc3-ebea-67aa-44a15e0d7e45@free.fr>
 <87zh7jyugc.fsf@iwagami.gniibe.org>
Message-ID: <08850cb5-c3ea-d48f-d1cf-b99bb85895e1@free.fr>

An HTML attachment was scrubbed...
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20200808/508539ef/attachment.html>

From gniibe at fsij.org  Mon Aug 10 09:57:17 2020
From: gniibe at fsij.org (Niibe Yutaka)
Date: Mon, 10 Aug 2020 16:57:17 +0900
Subject: How to use multiple Gnuk Token on the same PC
In-Reply-To: <08850cb5-c3ea-d48f-d1cf-b99bb85895e1@free.fr>
References: <bc10e6a5-9bc3-ebea-67aa-44a15e0d7e45@free.fr>
 <87zh7jyugc.fsf@iwagami.gniibe.org>
 <08850cb5-c3ea-d48f-d1cf-b99bb85895e1@free.fr>
Message-ID: <87lfinvspu.fsf@jumper.gniibe.org>

Hello,

Fr?d?ric SUEL wrote:
> Thank you for this explanation. I try with Thunderbird/Enigmail and
> two token, it works fine.

Good.

> Is there a way to access each token plugged with
> gpg --card-status or gpg --card-edit ?

We can specify --card-status "all" option.  I mean:

	$ gpg --card-status all

so that it shows all cards available.

We can specify the application ID to select a card/token.

	$ gpg --card-status D276000124010200FFFE871930590000

or
	$ gpg --card-edit D276000124010200FFFE871930590000

I hope it helps.
-- 


From wk at gnupg.org  Mon Aug 10 11:18:54 2020
From: wk at gnupg.org (Werner Koch)
Date: Mon, 10 Aug 2020 11:18:54 +0200
Subject: How to use multiple Gnuk Token on the same PC
In-Reply-To: <87lfinvspu.fsf@jumper.gniibe.org> (Niibe Yutaka's message of
 "Mon, 10 Aug 2020 16:57:17 +0900")
References: <bc10e6a5-9bc3-ebea-67aa-44a15e0d7e45@free.fr>
 <87zh7jyugc.fsf@iwagami.gniibe.org>
 <08850cb5-c3ea-d48f-d1cf-b99bb85895e1@free.fr>
 <87lfinvspu.fsf@jumper.gniibe.org>
Message-ID: <875z9qkge9.fsf@wheatstone.g10code.de>

On Mon, 10 Aug 2020 16:57, Niibe Yutaka said:

> We can specify --card-status "all" option.  I mean:

I'd prefer not to do that becuase gpg 2.3 comes with the gpg-card tool
which is much more flexible.  For example

  $ gpg-card list --cards --apps
  0* D2760001240103040006120808620000 openpgp piv
  1  D276000124010200FFFE50FF6E060000 openpgp

and you can switch the the default token.


Shalom-Salam,

   Werner


-- 
Die Gedanken sind frei.  Ausnahmen regelt ein Bundesgesetz.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 227 bytes
Desc: not available
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20200810/0ac63cae/attachment.sig>

From gniibe at fsij.org  Fri Sep 11 02:04:19 2020
From: gniibe at fsij.org (NIIBE Yutaka)
Date: Fri, 11 Sep 2020 09:04:19 +0900
Subject: Gnuk 1.2.16
Message-ID: <87d02tkwl8.fsf@iwagami.gniibe.org>

Hello,

Gnuk 1.2.16 is released.

	tag release/1.2.16
	Tagger: NIIBE Yutaka <gniibe at fsij.org>
	Date:   Thu Sep 10 11:57:33 2020 +0900
	commit e5158572ee004bc3ee5abe3f97361b8e34ac713f

Support for new Data Object (Algorighm Information) of OpenPGP card v3.4
(tag = 0x00FA) is added.

A limitation for message length for Ed25519 is removed, although it is
limited by the buffer size.

Classic ECC implementation had been not constant-time (as intended).
Fixed using dummy memory area.


While I tried to remove RSA, I found that the firmware upgrade feature
uses RSA.  Perhaps, it should be based on modern ECC.
-- 


From gniibe at fsij.org  Fri Oct  2 03:21:10 2020
From: gniibe at fsij.org (NIIBE Yutaka)
Date: Fri, 02 Oct 2020 10:21:10 +0900
Subject: (ST|GD)32V?F103 flash readout
Message-ID: <87eemh4e49.fsf@iwagami.gniibe.org>

Hello,

In February, Tom Li kindly shared about Flash Readout Attack.  Since
then, attack technology have been improved (to the direction: worse for
our use case).

This week, during testing GD32VF103, I also found a vulnerability of its
firmware (if my analysis and understanding are correct).  Currently, I
am asking help of my Chinese friends to contact the vendor.  And, then,
I found more about recent vulnerabilities around (ST|GD)32V?F103.

Basically, now in 2020, when you allow physical access to your token,
it's somehow easy for attackers (with enough skill) to readout its flash
content, for both of cost and time.

I'd recommend some sort of tamper resistance or tamper-evident for case
of Gnuk Token.  For my own, I use a metal case with FST-01SZ Kit, and
something like this:

    https://www.fsij.org/gnuk/craftwork-fst-01.html



Here are two of reports.  If you don't have time, just read the second,
which also explains about the first.


(1) A report on STM32F1 (CVE-2020-8004):

Exception(al) Failure - Breaking the STM32F1 Read-Out Protection:
https://blog.zapb.de/stm32f1-exceptional-failure/

(2) Another report (CVE-2020-13463, CVE-2020-13464, CVE-2020-13465,
CVE-2020-13466, CVE-2020-13467, CVE-2020-13470, CVE-2020-13471,
CVE-2020-13472) which also refers (1) of CVE-2020-8004.

One Exploit to Rule them All? On the Security of Drop-in Replacement and
Counterfeit Microcontrollers:
https://github.com/JohannesObermaier/f103-analysis/


Also, another work in 2017 by Johannes Obermaier and Stefan Tatschner is
worth to read.

(0) An attack to STM32F0 (CVE-2017-18347):

Shedding too much Light on a Microcontroller's Firmware Protection:
https://www.aisec.fraunhofer.de/en/FirmwareProtection.html
https://www.usenix.org/system/files/conference/woot17/woot17-paper-obermaier.pdf
-- 


From pollo at debian.org  Fri Oct 23 00:54:37 2020
From: pollo at debian.org (=?UTF-8?Q?Louis-Philippe_V=c3=a9ronneau?=)
Date: Thu, 22 Oct 2020 18:54:37 -0400
Subject: Where can I buy a token that can run gnuk
In-Reply-To: <ab313dbf-eec6-2599-1eb7-107efefa4da1@debian.org>
References: <ab313dbf-eec6-2599-1eb7-107efefa4da1@debian.org>
Message-ID: <a1d4c6e1-f21c-190c-8924-4e29c5a33847@debian.org>

Hi!

I've finally decided it's time for me to make the jump and start using a
GPG hardware token.

Sadly, I haven't been able to find a way to get my hands on a token that
can run gnuk. I used to have one that I bought from niibe-san at
DebConf15 (time flies!), but I don't have it anymore.

I also emailed Seeed Studio to see if they were planning on restocking
on the FST-01 and they told me it had been discontinued and they weren't
planning on selling any anymore :(

Any tips? Someone told me it would be possible to have a small batch of
FST-01 made by some company that does that kind of stuff, but I don't
have any experience whatsoever with that.

Cheers,

-- 
  ???????
  ???????  Louis-Philippe V?ronneau
  ??????   pollo at debian.org / veronneau.org
  ???



-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 833 bytes
Desc: OpenPGP digital signature
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20201022/22f3371a/attachment.sig>

From pollo at debian.org  Fri Oct 23 02:41:12 2020
From: pollo at debian.org (=?UTF-8?Q?Louis-Philippe_V=c3=a9ronneau?=)
Date: Thu, 22 Oct 2020 20:41:12 -0400
Subject: Where can I buy a token that can run gnuk
In-Reply-To: <CACi+kjoXM9LWnanThzUT3GBErMqdqRHiOSFnsvcdC9Hej8q69w@mail.gmail.com>
References: <ab313dbf-eec6-2599-1eb7-107efefa4da1@debian.org>
 <a1d4c6e1-f21c-190c-8924-4e29c5a33847@debian.org>
 <CACi+kjoXM9LWnanThzUT3GBErMqdqRHiOSFnsvcdC9Hej8q69w@mail.gmail.com>
Message-ID: <7d6dfdc7-47fe-5a69-a882-e2b0d277fd8f@debian.org>

On 2020-10-22 20 h 17, Mike Tsao wrote:
> https://shop.nitrokey.com/shop/product/nk-sta-nitrokey-start-6

I was under the impression the nitrokey start didn't run upstream gnuk,
but a modified version. Am I wrong?

> or just buy a $2 ST-Link clone like this
> <https://www.aliexpress.com/item/32719963657.html> and flash it to gnuk
> like this <https://nx3d.org/gnuk-st-link-v2/>.

Thanks for the link, that's helpful!

-- 
  ???????
  ???????  Louis-Philippe V?ronneau
  ??????   pollo at debian.org / veronneau.org
  ???



-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 833 bytes
Desc: OpenPGP digital signature
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20201022/f6279151/attachment.sig>

From vagrant at debian.org  Fri Oct 23 02:52:56 2020
From: vagrant at debian.org (Vagrant Cascadian)
Date: Thu, 22 Oct 2020 17:52:56 -0700
Subject: Where can I buy a token that can run gnuk
In-Reply-To: <7d6dfdc7-47fe-5a69-a882-e2b0d277fd8f@debian.org>
References: <ab313dbf-eec6-2599-1eb7-107efefa4da1@debian.org>
 <a1d4c6e1-f21c-190c-8924-4e29c5a33847@debian.org>
 <CACi+kjoXM9LWnanThzUT3GBErMqdqRHiOSFnsvcdC9Hej8q69w@mail.gmail.com>
 <7d6dfdc7-47fe-5a69-a882-e2b0d277fd8f@debian.org>
Message-ID: <87eelpahlj.fsf@ponder>

On 2020-10-22, Louis-Philippe V?ronneau wrote:
> On 2020-10-22 20 h 17, Mike Tsao wrote:
>> or just buy a $2 ST-Link clone like this
>> <https://www.aliexpress.com/item/32719963657.html> and flash it to gnuk
>> like this <https://nx3d.org/gnuk-st-link-v2/>.
>
> Thanks for the link, that's helpful!

At one point I attempted this, but apparently ordered clones with
insufficient flash capacity... many do not advertise exactly how much
flash is included, and I've heard of some people ordering from the same
vendor getting a variable amount of flash with each device, even in a
single order with multiple devices. So you might need to try a few
orders... before you luck out.

Some freinds were going to attempt to upgrade the flash on some of my
devices by ordering a flash with sufficient capacity and desoldering the
old one, but never got around to it.

So, in short, good luck! :)


live well,
  vagrant
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 227 bytes
Desc: not available
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20201022/05200bd4/attachment.sig>

From mike at sowbug.com  Fri Oct 23 05:55:44 2020
From: mike at sowbug.com (Mike Tsao)
Date: Thu, 22 Oct 2020 20:55:44 -0700
Subject: Where can I buy a token that can run gnuk
In-Reply-To: <87eelpahlj.fsf@ponder>
References: <ab313dbf-eec6-2599-1eb7-107efefa4da1@debian.org>
 <a1d4c6e1-f21c-190c-8924-4e29c5a33847@debian.org>
 <CACi+kjoXM9LWnanThzUT3GBErMqdqRHiOSFnsvcdC9Hej8q69w@mail.gmail.com>
 <7d6dfdc7-47fe-5a69-a882-e2b0d277fd8f@debian.org> <87eelpahlj.fsf@ponder>
Message-ID: <CACi+kjp0MbDk1G7_Dn-80+hXcdkzdQcQZ9UyiB5Ftx3BRqjgxQ@mail.gmail.com>

That's absolutely true. I've had better luck; I've never gotten a 64K chip
(even though they all report 64K).

There is a fork of the stlink tool <https://github.com/cabo/stlink> that is
modified to assume that the chip is 128K regardless of what it reports. If
you use standard stlink or openocd, you might believe the error messages
and conclude the chip is insufficient. It's also possible to be fooled that
something's wrong if the readout protection is enabled, which it often is
on stlink boards. My notes to myself about how to use the modified stlink
tool are here
<https://gist.github.com/sowbug/7595b3a98ace434bfb5de3f62126ac74>.
The C8T6HACK=1 part is the important part.

On Thu, Oct 22, 2020 at 7:51 PM Vagrant Cascadian <vagrant at debian.org>
wrote:

> On 2020-10-22, Louis-Philippe V?ronneau wrote:
> > On 2020-10-22 20 h 17, Mike Tsao wrote:
> >> or just buy a $2 ST-Link clone like this
> >> <https://www.aliexpress.com/item/32719963657.html> and flash it to gnuk
> >> like this <https://nx3d.org/gnuk-st-link-v2/>.
> >
> > Thanks for the link, that's helpful!
>
> At one point I attempted this, but apparently ordered clones with
> insufficient flash capacity... many do not advertise exactly how much
> flash is included, and I've heard of some people ordering from the same
> vendor getting a variable amount of flash with each device, even in a
> single order with multiple devices. So you might need to try a few
> orders... before you luck out.
>
> Some freinds were going to attempt to upgrade the flash on some of my
> devices by ordering a flash with sufficient capacity and desoldering the
> old one, but never got around to it.
>
> So, in short, good luck! :)
>
>
> live well,
>   vagrant
> _______________________________________________
> Gnuk-users mailing list
> Gnuk-users at gnupg.org
> https://lists.gnupg.org/mailman/listinfo/gnuk-users
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20201022/50259d94/attachment.html>

From szczepan at nitrokey.com  Fri Oct 23 10:10:51 2020
From: szczepan at nitrokey.com (Szczepan Zalega | Nitrokey)
Date: Fri, 23 Oct 2020 10:10:51 +0200
Subject: Where can I buy a token that can run gnuk
In-Reply-To: <7d6dfdc7-47fe-5a69-a882-e2b0d277fd8f@debian.org>
References: <ab313dbf-eec6-2599-1eb7-107efefa4da1@debian.org>
 <a1d4c6e1-f21c-190c-8924-4e29c5a33847@debian.org>
 <CACi+kjoXM9LWnanThzUT3GBErMqdqRHiOSFnsvcdC9Hej8q69w@mail.gmail.com>
 <7d6dfdc7-47fe-5a69-a882-e2b0d277fd8f@debian.org>
Message-ID: <e2914824-5a96-be62-7245-4940ebb603ce@nitrokey.com>

On 10/23/20 2:41 AM, Louis-Philippe V?ronneau wrote:
> I was under the impression the nitrokey start didn't run upstream gnuk,
> but a modified version. Am I wrong?

Hi!

That's right. Our modifications are here [1]. The most prominent one is
probably the user data region extension, which triples the available key
pairs storage.
However you can build and flash upstream if you wish (the board
configuration is already there).

Best regards,
Szczepan


[1] https://github.com/Nitrokey/nitrokey-start-firmware

-- 
Szczepan Zalega
Senior Software Developer

Nitrokey GmbH
https://www.nitrokey.com

Email: szczepan at nitrokey.com
Nickname: szszszsz

Rheinstr. 10 C, 14513 Teltow, Germany
CEO / Gesch?ftsf?hrer: Jan Suhr
Register: AG Potsdam, HRB 32882 P
VAT ID / USt-IdNr.: DE300136599


From azarubkin at gmail.com  Mon Dec 21 10:44:03 2020
From: azarubkin at gmail.com (Alexandr Zarubkin)
Date: Mon, 21 Dec 2020 12:44:03 +0300
Subject: PlatformIO build system support
Message-ID: <CAPuotoY0kQa9J2cJsxHPUpsKAKhDR5sEVio6G8G2t5539txeKQ@mail.gmail.com>

Hi everyone,

During my tinkering with Gnuk token, I've added an initial support for the
PlatformIO build system. It still requires to run configure script for now,
but at least it takes care of compiler and absence of make on the regular
Windows system.

My repositories are located at https://github.com/me21/gnuk and
https://salsa.debian.org/me21/gnuk, please feel free to look at *platformio*
and *platformio-1-2* branches, I would be happy if someone else finds my
changes useful :-)

Kind regards,
Alexander Zarubkin.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20201221/55417872/attachment.html>

From mark_debian at yahoo.com  Wed Dec 30 22:13:40 2020
From: mark_debian at yahoo.com (Mark Debian)
Date: Wed, 30 Dec 2020 21:13:40 +0000 (UTC)
Subject: How to enable ack button functionality on FST-01sz
References: <1042827516.3547959.1609362820915.ref@mail.yahoo.com>
Message-ID: <1042827516.3547959.1609362820915@mail.yahoo.com>

Hi Everyone,
Can someone tell me how to enable the ack button functionality using FST-01sz?
When I configure latest gnuk, before compiling, the output of the configure command says:"Acknowledge button is supported"
According to:
Flying Stone Tiny 01SZ Test Plan


| 
| 
|  | 
Flying Stone Tiny 01SZ Test Plan


 |

 |

 |


?
The FST-01sz has "a hall sensor to use a magnet as acknowledge/confirmation user interface".
However, I can't see any way to enable this ack button functionality, or rather to force its use, when encrypting/signing/authenticating.? I have looked through the admin menu options using gpg --card-edit.? I also couldn't find how to do this in the gnuk-users list archives or anywhere.
So, how do you enable and force the use of the ack button functionality?
Regards,Mark.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20201230/146353d5/attachment.html>

From gniibe at fsij.org  Tue Jan  5 04:03:16 2021
From: gniibe at fsij.org (NIIBE Yutaka)
Date: Tue, 05 Jan 2021 12:03:16 +0900
Subject: How to enable ack button functionality on FST-01sz
In-Reply-To: <1042827516.3547959.1609362820915@mail.yahoo.com>
References: <1042827516.3547959.1609362820915.ref@mail.yahoo.com>
 <1042827516.3547959.1609362820915@mail.yahoo.com>
Message-ID: <87h7nwdr0r.fsf@iwagami.gniibe.org>

Mark Debian wrote:
> Can someone tell me how to enable the ack button functionality using
> FST-01sz?  When I configure latest gnuk, before compiling, the output
> of the configure command says:"Acknowledge button is supported"

Currently, it is only supported in GnuPG in master (to be 2.3).
With "--card-edit" option, we have "uif" sub-command (User Interaction
Flag) to enable/disable the functionality.  When enabled, a user
has to acknowledge the operation (sign/decrypt/auth) by the device.

Personally, I don't use it.  For SSH key, I use the feature of gpg-agent
which asks confirmation (by pop-up window on desktop).
-- 


From mark_debian at yahoo.com  Wed Jan  6 16:19:51 2021
From: mark_debian at yahoo.com (Mark Debian)
Date: Wed, 6 Jan 2021 15:19:51 +0000 (UTC)
Subject: How to enable ack button functionality on FST-01sz
In-Reply-To: <87h7nwdr0r.fsf@iwagami.gniibe.org>
References: <1042827516.3547959.1609362820915.ref@mail.yahoo.com>
 <1042827516.3547959.1609362820915@mail.yahoo.com>
 <87h7nwdr0r.fsf@iwagami.gniibe.org>
Message-ID: <967691809.4756495.1609946391891@mail.yahoo.com>

 > > Can someone tell me how to enable the ack button functionality using
> > FST-01sz?? When I configure latest gnuk, before compiling, the output
> > of the configure command says:"Acknowledge button is supported"

> Currently, it is only supported in GnuPG in master (to be 2.3).
> With "--card-edit" option, we have "uif" sub-command (User Interaction
> Flag) to enable/disable the functionality.? When enabled, a user
> has to acknowledge the operation (sign/decrypt/auth) by the device.
Ahhh.? I see.? Even debian sid still only has version?2.2.20

> Personally, I don't use it.? For SSH key, I use the feature of gpg-agent
> which asks confirmation (by pop-up window on desktop).
I hadn't been worried about this use until recently.
Correct me if I am wrong:
After you insert and use your Gnuk token smartcard the gpg-agent will cache your password.? If someone has backdoor shell access then they can simply use your key until you remove it from the USB port.? You would not even notice that your key is being used.
I think you can configure the gpg-agent to ask the password every time but that is a bit of a pain if you have a decent password length.? In any case, someone with backdoor shell access could just reconfigure the agent to cache the password again without you knowing or even keylog your password.
If you force the ack button functionality on the Gnuk then this can't be disabled by an attacker without your master passphrase.? You could ensure that you only enabled the ack button functionality, and only entered the master passphrase, using an air-gapped trusted machine.? If you followed this use case then you would never need to enter the master passphrase for normal use and therefore it would never be entered on your normal work machine.? The ack button functionality will then require you to use a magnet to acknowledge the key use every time.? An attacker with remote access _and your passphrase_ would still not be able to "press" the ack button nor disable its requirement.
Otherwise how do you counter the threat of someone gaining backdoor shell access to your account?? That is the threat that the smartcard ultimately provides the extra protection against.
Regards,Mark.

    On Tuesday, 5 January 2021, 01:03:25 pm AEST, NIIBE Yutaka <gniibe at fsij.org> wrote:  
 
 Mark Debian wrote:
> Can someone tell me how to enable the ack button functionality using
> FST-01sz?? When I configure latest gnuk, before compiling, the output
> of the configure command says:"Acknowledge button is supported"

Currently, it is only supported in GnuPG in master (to be 2.3).
With "--card-edit" option, we have "uif" sub-command (User Interaction
Flag) to enable/disable the functionality.? When enabled, a user
has to acknowledge the operation (sign/decrypt/auth) by the device.

Personally, I don't use it.? For SSH key, I use the feature of gpg-agent
which asks confirmation (by pop-up window on desktop).
-- 
  
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20210106/b6a6d030/attachment.html>

From mark_debian at yahoo.com  Wed Jan  6 16:13:04 2021
From: mark_debian at yahoo.com (Mark Debian)
Date: Wed, 6 Jan 2021 15:13:04 +0000 (UTC)
Subject: How to enable ack button functionality on FST-01sz
In-Reply-To: <87h7nwdr0r.fsf@iwagami.gniibe.org>
References: <1042827516.3547959.1609362820915.ref@mail.yahoo.com>
 <1042827516.3547959.1609362820915@mail.yahoo.com>
 <87h7nwdr0r.fsf@iwagami.gniibe.org>
Message-ID: <326342051.4757024.1609945984903@mail.yahoo.com>

 On Tuesday, 5 January 2021, 01:03:25 pm AEST, NIIBE Yutaka <gniibe at fsij.org> wrote:
 
 
 > Mark Debian wrote:
> > Can someone tell me how to enable the ack button functionality using
> > FST-01sz?? When I configure latest gnuk, before compiling, the output
> > of the configure command says:"Acknowledge button is supported"

> Currently, it is only supported in GnuPG in master (to be 2.3).
> With "--card-edit" option, we have "uif" sub-command (User Interaction
> Flag) to enable/disable the functionality.? When enabled, a user
> has to acknowledge the operation (sign/decrypt/auth) by the device.
Ahhh.? I see.? Even debian sid still only has version?2.2.20

> Personally, I don't use it.? For SSH key, I use the feature of gpg-agent
> which asks confirmation (by pop-up window on desktop).
I hadn't been worried about this use until recently.
Correct me if I am wrong:
After you insert and use your Gnuk token smartcard the gpg-agent will cache your password.? If someone has backdoor shell access then they can simply use your key until you remove it from the USB port.? You would not even notice that your key is being used.
I think you can configure the gpg-agent to ask the password every time but that is a bit of a pain if you have a decent password length.? In any case, someone with backdoor shell access could just reconfigure the agent to cache the password again without you knowing or even keylog your password.
If you force the ack button functionality on the Gnuk then this can't be disabled by an attacker without your master passphrase.? You could ensure that you only enabled the ack button functionality, and only entered the master passphrase, using an air-gapped trusted machine.? If you followed this use case then you would never need to enter the master passphrase for normal use and therefore it would never be entered on your normal work machine.? The ack button functionality will then require you to use a magnet to acknowledge the key use every time.? An attacker with remote access _and your passphrase_ would still not be able to "press" the ack button nor disable its requirement.
Otherwise how do you counter the threat of someone gaining backdoor shell access to your account?? That is the threat that the smartcard ultimately provides the extra protection against.
Regards,Mark.
-- 
  
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20210106/30f5faad/attachment.html>

From wk at gnupg.org  Wed Jan  6 19:44:18 2021
From: wk at gnupg.org (Werner Koch)
Date: Wed, 06 Jan 2021 19:44:18 +0100
Subject: How to enable ack button functionality on FST-01sz
In-Reply-To: <967691809.4756495.1609946391891@mail.yahoo.com> (Mark Debian via
 Gnuk-users's message of "Wed, 6 Jan 2021 15:19:51 +0000 (UTC)")
References: <1042827516.3547959.1609362820915.ref@mail.yahoo.com>
 <1042827516.3547959.1609362820915@mail.yahoo.com>
 <87h7nwdr0r.fsf@iwagami.gniibe.org>
 <967691809.4756495.1609946391891@mail.yahoo.com>
Message-ID: <87czyhlxbx.fsf@wheatstone.g10code.de>

On Wed,  6 Jan 2021 15:19, Mark Debian said:

> After you insert and use your Gnuk token smartcard the gpg-agent will
> cache your password.? If someone has backdoor shell access then they

No.  The agent does not cacge the PIN or passphrase - this is done by
the smartcard.

> Otherwise how do you counter the threat of someone gaining backdoor
> shell access to your account?? That is the threat that the smartcard
> ultimately provides the extra protection against.

You can't.  The smartcard protects your key but it can't really protect
the use of the key as long as the smartcard is plugged in.

BTW, Forcing a user to enter the Admin-PIN is pretty easy.  Just let the
malware use up the the PIN along with some social engineering and most
users will enter the Admin PIN to unblock the PIN...


Salam-Shalom,

   Werner

-- 
Die Gedanken sind frei.  Ausnahmen regelt ein Bundesgesetz.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 227 bytes
Desc: not available
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20210106/24a53aad/attachment.sig>

From mark_debian at yahoo.com  Wed Jan  6 22:31:18 2021
From: mark_debian at yahoo.com (Mark Debian)
Date: Wed, 6 Jan 2021 21:31:18 +0000 (UTC)
Subject: How to enable ack button functionality on FST-01sz
In-Reply-To: <87czyhlxbx.fsf@wheatstone.g10code.de>
References: <1042827516.3547959.1609362820915.ref@mail.yahoo.com>
 <1042827516.3547959.1609362820915@mail.yahoo.com>
 <87h7nwdr0r.fsf@iwagami.gniibe.org>
 <967691809.4756495.1609946391891@mail.yahoo.com>
 <87czyhlxbx.fsf@wheatstone.g10code.de>
Message-ID: <1721726340.4853761.1609968678839@mail.yahoo.com>

 Werner Koch said:
> > After you insert and use your Gnuk token smartcard the gpg-agent will> > cache your password.? If someone has backdoor shell access then they

> No.? The agent does not cacge the PIN or passphrase - this is done by> the smartcard.

OK.? I see.

> > Otherwise how do you counter the threat of someone gaining backdoor> > shell access to your account?? That is the threat that the smartcard> > ultimately provides the extra protection against.

> You can't.? The smartcard protects your key but it can't really protect> the use of the key as long as the smartcard is plugged in.

I don't like that.

> BTW, Forcing a user to enter the Admin-PIN is pretty easy.? Just let the> malware use up the the PIN along with some social engineering and most> users will enter the Admin PIN to unblock the PIN...

However education can protect against that threat.? Only ever use the Admin-PIN in the trusted air-gapped machine.? Furthermore, if you get your PIN wrong when you know you typed it correctly then that can be a warning that there is some malware on your PC.? If you have users of the smartcard that are not very knowledgeable then you can set things up for them so that only you have the Admin-PIN and they need to come to you to unblock the PIN if there is a problem.

Otherwise, how do you guard against the malware / backdoor threat on your PC?? Wouldn't the malware just wait for you to plug in the smartcard and enter your passphrase and then proceed to use your key before you can pull out the smartcard?? For example, if you use your gpg key for authenticating ssh access then the malware could immediately set up that shell access too.
Thanks for explaining / detailing the treat model better.

Do you think that one of the crypto hardware wallets is a better device to protect against this threat?? For example, the Trezor-T has a PIN pad built into the device so you always enter the PIN on the hardware device.

However, when I looked at the Trezor-T it can only generate the gpg key on the device itself and seems directly dependent on the original seed phrase.? This means that the gpg key can be recovered on a new device if the original seed phrase is entered.? But, this also means that you can't have a master key with subkeys type of setup where only the subkeys are on the hardware device.? There seems to be no way to transfer a gpg subkey to the Trezor-T device.

Maybe it would be possible to enable gnupg use through scanning of QR codes somehow???? Some of the crypto hardware wallets are doing the signing of crypto transactions using QR codes and the device itself remains always air-gapped - it is never actually plugged into a PC.? See for example Ngrave.??
NGRAVE | Unrivaled crypto security and seamless experience


| 
| 
| 
|  |  |

 |

 |
| 
|  | 
NGRAVE | Unrivaled crypto security and seamless experience

The first end-to-end solution for managing your crypto. The Coldest hardware Wallet. The Coldest key back-up. No...
 |

 |

 |


BTW: I do not have one of these devices and have no association with the company.

Regards,Mark.

    On Thursday, 7 January 2021, 04:45:11 am AEST, Werner Koch <wk at gnupg.org> wrote:  
 
 On Wed,? 6 Jan 2021 15:19, Mark Debian said:

> After you insert and use your Gnuk token smartcard the gpg-agent will
> cache your password.? If someone has backdoor shell access then they

No.? The agent does not cacge the PIN or passphrase - this is done by
the smartcard.

> Otherwise how do you counter the threat of someone gaining backdoor
> shell access to your account?? That is the threat that the smartcard
> ultimately provides the extra protection against.

You can't.? The smartcard protects your key but it can't really protect
the use of the key as long as the smartcard is plugged in.

BTW, Forcing a user to enter the Admin-PIN is pretty easy.? Just let the
malware use up the the PIN along with some social engineering and most
users will enter the Admin PIN to unblock the PIN...


Salam-Shalom,

? Werner

-- 
Die Gedanken sind frei.? Ausnahmen regelt ein Bundesgesetz.  
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20210106/a894985c/attachment.html>

From wk at gnupg.org  Thu Jan  7 10:49:36 2021
From: wk at gnupg.org (Werner Koch)
Date: Thu, 07 Jan 2021 10:49:36 +0100
Subject: How to enable ack button functionality on FST-01sz
In-Reply-To: <1721726340.4853761.1609968678839@mail.yahoo.com> (Mark Debian
 via Gnuk-users's message of "Wed, 6 Jan 2021 21:31:18 +0000 (UTC)")
References: <1042827516.3547959.1609362820915.ref@mail.yahoo.com>
 <1042827516.3547959.1609362820915@mail.yahoo.com>
 <87h7nwdr0r.fsf@iwagami.gniibe.org>
 <967691809.4756495.1609946391891@mail.yahoo.com>
 <87czyhlxbx.fsf@wheatstone.g10code.de>
 <1721726340.4853761.1609968678839@mail.yahoo.com>
Message-ID: <878s95krf3.fsf@wheatstone.g10code.de>

On Wed,  6 Jan 2021 21:31, Mark Debian said:

>> BTW, Forcing a user to enter the Admin-PIN is pretty easy.? Just let
>> the> malware use up the the PIN along with some social engineering
>> and most> users will enter the Admin PIN to unblock the PIN...
>
> However education can protect against that threat.? Only ever use the

Yes with proper SecOPs training you could do that but that also involves
a lot of other procedures, hardware and people.  The reality is
different.

Even with a touch-to-sign button you still don't known what you actually
sign or whether the displayed PDF is the PDF actually sent out.  A
compromised box is a game-over condition.  Tilt.  Restart from scratch.
You _may_ not need to re-boot your public key infrastructure due to the
token, though.


Shalom-Salam,

   Werner


-- 
Die Gedanken sind frei.  Ausnahmen regelt ein Bundesgesetz.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 227 bytes
Desc: not available
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20210107/dce78bbf/attachment.sig>

From mark_debian at yahoo.com  Thu Jan  7 11:47:58 2021
From: mark_debian at yahoo.com (Mark Debian)
Date: Thu, 7 Jan 2021 10:47:58 +0000 (UTC)
Subject: How to enable ack button functionality on FST-01sz
In-Reply-To: <878s95krf3.fsf@wheatstone.g10code.de>
References: <1042827516.3547959.1609362820915.ref@mail.yahoo.com>
 <1042827516.3547959.1609362820915@mail.yahoo.com>
 <87h7nwdr0r.fsf@iwagami.gniibe.org>
 <967691809.4756495.1609946391891@mail.yahoo.com>
 <87czyhlxbx.fsf@wheatstone.g10code.de>
 <1721726340.4853761.1609968678839@mail.yahoo.com>
 <878s95krf3.fsf@wheatstone.g10code.de>
Message-ID: <1613852448.4952881.1610016478294@mail.yahoo.com>

 
> Even with a touch-to-sign button you still don't known what you actually> sign or whether the displayed PDF is the PDF actually sent out.? A

Hmm.? I guess not.

> compromised box is a game-over condition.? Tilt.? Restart from scratch.
> You _may_ not need to re-boot your public key infrastructure due to the
> token, though.
Yes.
It sounds like you really need a smartcard with a built in touch screen for entering the PIN and also displaying confirmation about just what you are signing.
Is there any device like the NGrave device for use with GnuPG which is air gapped and achieves the cryptographic signatures through scanning QR codes or the like?
Regards,Mark.

    On Thursday, 7 January 2021, 07:50:12 pm AEST, Werner Koch <wk at gnupg.org> wrote:  
 
 On Wed,? 6 Jan 2021 21:31, Mark Debian said:

>> BTW, Forcing a user to enter the Admin-PIN is pretty easy.? Just let
>> the> malware use up the the PIN along with some social engineering
>> and most> users will enter the Admin PIN to unblock the PIN...
>
> However education can protect against that threat.? Only ever use the

Yes with proper SecOPs training you could do that but that also involves
a lot of other procedures, hardware and people.? The reality is
different.

Even with a touch-to-sign button you still don't known what you actually
sign or whether the displayed PDF is the PDF actually sent out.? A
compromised box is a game-over condition.? Tilt.? Restart from scratch.
You _may_ not need to re-boot your public key infrastructure due to the
token, though.


Shalom-Salam,

? Werner


-- 
Die Gedanken sind frei.? Ausnahmen regelt ein Bundesgesetz.  
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20210107/2d280b8e/attachment.html>

From szczepan at nitrokey.com  Tue Jan 26 14:32:33 2021
From: szczepan at nitrokey.com (Szczepan Zalega | Nitrokey)
Date: Tue, 26 Jan 2021 14:32:33 +0100
Subject: Enable KDF-DO on a populated GNUK
In-Reply-To: <d832af15-7a49-e888-1842-707d8376299c@nitrokey.com>
References: <d832af15-7a49-e888-1842-707d8376299c@nitrokey.com>
Message-ID: <0bd2ced3-8283-a008-05d3-db00d8e7f749@nitrokey.com>

Hello,

>From my tests it turned out that currently with the recent GNUK 1.2.15
and GnuPG 2.2.25 it is not possible to set up a KDF-DO on a populated /
personalized device (with keys). As a user I would like to have such
option, so I would not be forced through factory reset.

On requesting KDF setting in such case GNUK replies with:
```
2021-01-26 12:35:05 scdaemon[22] DBG:  response: sw=6F00  datalen=0
2021-01-26 12:35:05 scdaemon[22] failed to set 'KDF': Card error
```

Is having this GnuPG [1] patch sufficient to make that work, or are
there any changes needed in the GNUK itself?

Best regards,
Szczepan


[1] https://dev.gnupg.org/T3891

-- 
Szczepan Zalega
Senior Software Developer

Nitrokey GmbH
https://www.nitrokey.com

Email: szczepan at nitrokey.com
Nickname: szszszsz

Rheinstr. 10 C, 14513 Teltow, Germany
CEO / Gesch?ftsf?hrer: Jan Suhr
Register: AG Potsdam, HRB 32882 P
VAT ID / USt-IdNr.: DE300136599


From gniibe at fsij.org  Thu Jan 28 03:56:39 2021
From: gniibe at fsij.org (NIIBE Yutaka)
Date: Thu, 28 Jan 2021 11:56:39 +0900
Subject: Enable KDF-DO on a populated GNUK
In-Reply-To: <0bd2ced3-8283-a008-05d3-db00d8e7f749@nitrokey.com>
References: <d832af15-7a49-e888-1842-707d8376299c@nitrokey.com>
 <0bd2ced3-8283-a008-05d3-db00d8e7f749@nitrokey.com>
Message-ID: <87k0rx93bs.fsf@iwagami.gniibe.org>

Hello,

KDF-DO should be used, that is common practice for using Gnuk.

Szczepan Zalega  wrote:
> From my tests it turned out that currently with the recent GNUK 1.2.15
> and GnuPG 2.2.25 it is not possible to set up a KDF-DO on a populated /
> personalized device (with keys). As a user I would like to have such
> option, so I would not be forced through factory reset.

No, it's not possible for Gnuk.  Originally, when it was proposed, it
was designed/implemented that KDF-DO setup should be done with no key
materials.  And Gnuk keeps this constraint.

Well, I'm afraid that convenience here introduces complexity of
implementation and confusion about how KDF-DO should be used.

Given the situation that it is not currently supported, if it will be
supported by someone else in future, a user has to do flash new firmware
losing keys on card, anyway, so, I don't think adding this new option
makes any sense.

Rather, for me, it makes sense to go opposite direction, instead; ... to
refuse keytocard/key-generation when KDF-DO is not available.

> Is having this GnuPG [1] patch sufficient to make that work, or are
> there any changes needed in the GNUK itself?

No, the patch is supporting other implementations of OpenPGPcard.
-- 


From azarubkin at gmail.com  Thu Jan 28 10:02:27 2021
From: azarubkin at gmail.com (Alexandr Zarubkin)
Date: Thu, 28 Jan 2021 12:02:27 +0300
Subject: Logging to Windows with Gnuk
Message-ID: <CAPuotoY_7SJDGb=SB6a7ak6LuzmXvGNs=7p+9KA_QcG5rHNfSQ@mail.gmail.com>

Hi everyone,

I've managed to log into Windows using a certificate stored on Gnuk. I had
to add MSE command support and raise the reported OpenPGP version to 3.3.
It's just a proof of concept, but it works. The changes are located at
https://github.com/me21/gnuk and https://salsa.debian.org/me21/gnuk,
platformio branch.
The tests were performed on the virtual machine running Windows 7.

Kind regards,
Alexander Zarubkin.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20210128/17f9cb8e/attachment.html>

From szczepan at nitrokey.com  Thu Jan 28 10:56:08 2021
From: szczepan at nitrokey.com (Szczepan Zalega | Nitrokey)
Date: Thu, 28 Jan 2021 10:56:08 +0100
Subject: Enable KDF-DO on a populated GNUK
In-Reply-To: <87k0rx93bs.fsf@iwagami.gniibe.org>
References: <d832af15-7a49-e888-1842-707d8376299c@nitrokey.com>
 <0bd2ced3-8283-a008-05d3-db00d8e7f749@nitrokey.com>
 <87k0rx93bs.fsf@iwagami.gniibe.org>
Message-ID: <3cb18523-09f7-82e0-08f9-c60ba16cb953@nitrokey.com>

On 1/28/21 3:56 AM, NIIBE Yutaka wrote:
> KDF-DO should be used, that is common practice for using Gnuk.
> 
> Szczepan Zalega  wrote:
>> From my tests it turned out that currently with the recent GNUK 1.2.15
>> and GnuPG 2.2.25 it is not possible to set up a KDF-DO on a populated /
>> personalized device (with keys). As a user I would like to have such
>> option, so I would not be forced through factory reset.
> 
> No, it's not possible for Gnuk.  Originally, when it was proposed, it
> was designed/implemented that KDF-DO setup should be done with no key
> materials.  And Gnuk keeps this constraint.
> 
> (...)
> Rather, for me, it makes sense to go opposite direction, instead; ... to
> refuse keytocard/key-generation when KDF-DO is not available.
> 

I see. That sounds like a good idea. We have left normal PIN use
available due to a compatibility reasons (with longer length required),
but perhaps indeed it should be faded out in the future in favor of KDF-DO.
Thank you for the clarification!

Best regards,
Szczepan


-- 
Szczepan Zalega
Senior Software Developer

Nitrokey GmbH
https://www.nitrokey.com

Email: szczepan at nitrokey.com
Nickname: szszszsz

Rheinstr. 10 C, 14513 Teltow, Germany
CEO / Gesch?ftsf?hrer: Jan Suhr
Register: AG Potsdam, HRB 32882 P
VAT ID / USt-IdNr.: DE300136599


From simon at josefsson.org  Thu Jan 28 10:10:47 2021
From: simon at josefsson.org (Simon Josefsson)
Date: Thu, 28 Jan 2021 10:10:47 +0100
Subject: Enable KDF-DO on a populated GNUK
In-Reply-To: <87k0rx93bs.fsf@iwagami.gniibe.org> (NIIBE Yutaka's message of
 "Thu, 28 Jan 2021 11:56:39 +0900")
References: <d832af15-7a49-e888-1842-707d8376299c@nitrokey.com>
 <0bd2ced3-8283-a008-05d3-db00d8e7f749@nitrokey.com>
 <87k0rx93bs.fsf@iwagami.gniibe.org>
Message-ID: <87r1m5l948.fsf@latte.josefsson.org>

NIIBE Yutaka <gniibe at fsij.org> writes:

> Rather, for me, it makes sense to go opposite direction, instead; ... to
> refuse keytocard/key-generation when KDF-DO is not available.

Yes please!  I have forgotten this sometimes, and it is annoying.
Having it fail early seems more reliable.

/Simon
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 227 bytes
Desc: not available
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20210128/126527bc/attachment.sig>

From mishaad051 at gmail.com  Wed Feb  3 11:12:14 2021
From: mishaad051 at gmail.com (Mike)
Date: Wed, 3 Feb 2021 13:12:14 +0300
Subject: GNUK 1.2.15 on XNUCLEO-F103RB does not respond to gpg --card-status
Message-ID: <YBp2/rltUUxrK/BZ@hostuser>

The XNUCLEO-F103RB does not respond to gpg --card-status after flashing
GNUK 1.2.15 with commit hash 2142d0aa3533a9bb0686da27f803543301b1c88b. 
I flashed it via connecting ST-LINKv2 based on STM32F103C816. The target
controller is STM32F103RBT6. 

OpenOCD writing log is at https://termbin.com/6kdp

Versions of used software:

pacman -Q openocd arm-none-eabi-gcc arm-none-eabi-newlib

openocd 1:0.10.0-4
arm-none-eabi-gcc 10.2.0-1
arm-none-eabi-newlib 4.1.0-1

After writing, I pressed onboard reset button twice before attempting to
use it with gpg.


From szczepan at nitrokey.com  Wed Feb  3 12:44:06 2021
From: szczepan at nitrokey.com (Szczepan Zalega | Nitrokey)
Date: Wed, 3 Feb 2021 12:44:06 +0100
Subject: GNUK 1.2.15 on XNUCLEO-F103RB does not respond to gpg
 --card-status
In-Reply-To: <YBp2/rltUUxrK/BZ@hostuser>
References: <YBp2/rltUUxrK/BZ@hostuser>
Message-ID: <70fa4b69-4622-60d9-34ab-049e89bbf8d9@nitrokey.com>

On 2/3/21 11:12 AM, Mike wrote:
> The XNUCLEO-F103RB does not respond to gpg --card-status after flashing
> GNUK 1.2.15 with commit hash 2142d0aa3533a9bb0686da27f803543301b1c88b. 
> I flashed it via connecting ST-LINKv2 based on STM32F103C816. The target
> controller is STM32F103RBT6. 
> (...)

Hi!

Make sure you have selected the right kind of the board during GNUK
configuration building. Which one have you used?

-- 
Best regards,
Szczepan


From mishaad051 at gmail.com  Wed Feb  3 13:08:30 2021
From: mishaad051 at gmail.com (Mike)
Date: Wed, 3 Feb 2021 15:08:30 +0300
Subject: GNUK 1.2.15 on XNUCLEO-F103RB does not respond to gpg
 --card-status
In-Reply-To: <70fa4b69-4622-60d9-34ab-049e89bbf8d9@nitrokey.com>
References: <YBp2/rltUUxrK/BZ@hostuser>
 <70fa4b69-4622-60d9-34ab-049e89bbf8d9@nitrokey.com>
Message-ID: <YBqSPqE+YECx03Wl@hostuser>

I ran ./configure --vidpid=234b:0000 --enable-factory-reset --target=ST_NUCLEO_F103 

What should I look at to make the board work?


From szczepan at nitrokey.com  Wed Feb  3 13:28:40 2021
From: szczepan at nitrokey.com (Szczepan Zalega | Nitrokey)
Date: Wed, 3 Feb 2021 13:28:40 +0100
Subject: GNUK 1.2.15 on XNUCLEO-F103RB does not respond to gpg
 --card-status
In-Reply-To: <YBqSPqE+YECx03Wl@hostuser>
References: <YBp2/rltUUxrK/BZ@hostuser>
 <70fa4b69-4622-60d9-34ab-049e89bbf8d9@nitrokey.com>
 <YBqSPqE+YECx03Wl@hostuser>
Message-ID: <9eda2764-2134-224a-0602-5fceb1c2fbeb@nitrokey.com>

On 2/3/21 1:08 PM, Mike wrote:
> I ran ./configure --vidpid=234b:0000 --enable-factory-reset --target=ST_NUCLEO_F103 
> 
> What should I look at to make the board work?

1. How is your USB connected to the board? What pins do you use?
2. Are there any dmesg messages from the USB connection (USB enumeration)?

(I am sorry, if I am making obvious questions)

-- 
Best regards,
Szczepan


From mishaad051 at gmail.com  Wed Feb  3 13:44:30 2021
From: mishaad051 at gmail.com (Mike)
Date: Wed, 3 Feb 2021 15:44:30 +0300
Subject: GNUK 1.2.15 on XNUCLEO-F103RB does not respond to gpg
 --card-status
In-Reply-To: <9eda2764-2134-224a-0602-5fceb1c2fbeb@nitrokey.com>
References: <YBp2/rltUUxrK/BZ@hostuser>
 <70fa4b69-4622-60d9-34ab-049e89bbf8d9@nitrokey.com>
 <YBqSPqE+YECx03Wl@hostuser>
 <9eda2764-2134-224a-0602-5fceb1c2fbeb@nitrokey.com>
Message-ID: <YBqarogUTVxoS9Je@hostuser>

1. The ST-LINK is connected to a target via a 8-pin port near USB. 
2. No, dmesg shows me nothing even after a couple of reset button
presses and reconnecting the USB. 


From marian.buschsieweke at ovgu.de  Wed Feb  3 13:34:26 2021
From: marian.buschsieweke at ovgu.de (Marian Buschsieweke)
Date: Wed, 3 Feb 2021 13:34:26 +0100
Subject: GNUK 1.2.15 on XNUCLEO-F103RB does not respond to gpg
 --card-status
In-Reply-To: <YBqSPqE+YECx03Wl@hostuser>
References: <YBp2/rltUUxrK/BZ@hostuser>
 <70fa4b69-4622-60d9-34ab-049e89bbf8d9@nitrokey.com>
 <YBqSPqE+YECx03Wl@hostuser>
Message-ID: <20210203133426.006c2fc5@faultier2go.lan>

Hi,

note that the Nucleo-F103RB only has a single USB socket, which is connected to
the debbuger. You won't be able to connect to the Nucleo with that socket.

(I couldn't find any hint to that in the documentation. IMO, this would be
something worth pointing out.) IMO you're better of with e.g. an STM32F103
BluePill and a cheap ST-Link V2 programmer (each ~2? at the usual sources), as
the single USB socket on the BluePill is indeed connected to the MCU.

Kind regards,
Marian

On Wed, 3 Feb 2021 15:08:30 +0300
Mike <mishaad051 at gmail.com> wrote:

> I ran ./configure --vidpid=234b:0000 --enable-factory-reset --target=ST_NUCLEO_F103 
> 
> What should I look at to make the board work?
> 
> _______________________________________________
> Gnuk-users mailing list
> Gnuk-users at gnupg.org
> https://lists.gnupg.org/mailman/listinfo/gnuk-users

-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 228 bytes
Desc: OpenPGP digital signature
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20210203/77306e06/attachment.sig>

From mishaad051 at gmail.com  Wed Feb  3 15:26:50 2021
From: mishaad051 at gmail.com (Mike)
Date: Wed, 3 Feb 2021 17:26:50 +0300
Subject: GNUK 1.2.15 on XNUCLEO-F103RB does not respond to gpg
 --card-status
In-Reply-To: <20210203133426.006c2fc5@faultier2go.lan>
References: <YBp2/rltUUxrK/BZ@hostuser>
 <70fa4b69-4622-60d9-34ab-049e89bbf8d9@nitrokey.com>
 <YBqSPqE+YECx03Wl@hostuser>
 <20210203133426.006c2fc5@faultier2go.lan>
Message-ID: <YBqyqtZ+LGfgJky1@hostuser>

It is XNUCLEO, debugger is attached separately. https://www.waveshare.com/wiki/XNUCLEO-F103RB

Mind poining on how to attach USB to the Nucleo directly, please?


From marian.buschsieweke at ovgu.de  Wed Feb  3 15:31:03 2021
From: marian.buschsieweke at ovgu.de (Marian Buschsieweke)
Date: Wed, 3 Feb 2021 15:31:03 +0100
Subject: GNUK 1.2.15 on XNUCLEO-F103RB does not respond to gpg
 --card-status
In-Reply-To: <YBqyqtZ+LGfgJky1@hostuser>
References: <YBp2/rltUUxrK/BZ@hostuser>
 <70fa4b69-4622-60d9-34ab-049e89bbf8d9@nitrokey.com>
 <YBqSPqE+YECx03Wl@hostuser>
 <20210203133426.006c2fc5@faultier2go.lan>
 <YBqyqtZ+LGfgJky1@hostuser>
Message-ID: <20210203153103.64cb69af@faultier2go.lan>

Hi,

the XNUCLEO-F103RB seems to have to USB interfaces, one for an internal
USB<-->UART adapter, one is connected to the MCU. You want to use the second.
Also mind this note on the website:

USB connector
=============

Except the XNUCLEO-F030R8, all the other XNUCLEO devices have reserved a USB connector which can be enabled by setting JP1 to ON.

Kind regards,
Marian

On Wed, 3 Feb 2021 17:26:50 +0300
Mike <mishaad051 at gmail.com> wrote:

> It is XNUCLEO, debugger is attached separately. https://www.waveshare.com/wiki/XNUCLEO-F103RB
> 
> Mind poining on how to attach USB to the Nucleo directly, please?
> 
> _______________________________________________
> Gnuk-users mailing list
> Gnuk-users at gnupg.org
> https://lists.gnupg.org/mailman/listinfo/gnuk-users

-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 228 bytes
Desc: OpenPGP digital signature
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20210203/1711bbbc/attachment.sig>

From mishaad051 at gmail.com  Wed Feb  3 16:33:29 2021
From: mishaad051 at gmail.com (Mike)
Date: Wed, 3 Feb 2021 18:33:29 +0300
Subject: GNUK 1.2.15 on XNUCLEO-F103RB does not respond to gpg
 --card-status
In-Reply-To: <20210203153103.64cb69af@faultier2go.lan>
References: <YBp2/rltUUxrK/BZ@hostuser>
 <70fa4b69-4622-60d9-34ab-049e89bbf8d9@nitrokey.com>
 <YBqSPqE+YECx03Wl@hostuser>
 <20210203133426.006c2fc5@faultier2go.lan>
 <YBqyqtZ+LGfgJky1@hostuser>
 <20210203153103.64cb69af@faultier2go.lan>
Message-ID: <YBrCSXJfTm+o8Eb4@hostuser>

J1 is on the contacts. I attempted to replace the jumper. After
replacing the jumper, I reset the board. Still, dmesg is oddly silent.
As is GPG. I used the memory inspector from STCUBE (the GNUK was not
personalized yet) and bits of gnuk.elf in range 0x0 - 0x3F0 and the bits
of controller in same range are the same.


From gniibe at fsij.org  Thu Feb  4 08:06:13 2021
From: gniibe at fsij.org (NIIBE Yutaka)
Date: Thu, 04 Feb 2021 16:06:13 +0900
Subject: GNUK 1.2.15 on XNUCLEO-F103RB does not respond to gpg
 --card-status
In-Reply-To: <20210203133426.006c2fc5@faultier2go.lan>
References: <YBp2/rltUUxrK/BZ@hostuser>
 <70fa4b69-4622-60d9-34ab-049e89bbf8d9@nitrokey.com>
 <YBqSPqE+YECx03Wl@hostuser> <20210203133426.006c2fc5@faultier2go.lan>
Message-ID: <877dnonwgq.fsf@iwagami.gniibe.org>

Marian Buschsieweke <marian.buschsieweke at ovgu.de> wrote:
> (IMO, this would be something worth pointing out.)

Here it is:

    https://www.fsij.org/gnuk/neug-on-stm32-nucleo-f103.html

When I wrote this, STM32 Nucleo F103 was the best one for availability.

Although it is written for NeuG, same hardware can be used to run Gnuk.
-- 


From mishaad051 at gmail.com  Fri Feb  5 12:21:50 2021
From: mishaad051 at gmail.com (Mike)
Date: Fri, 5 Feb 2021 14:21:50 +0300
Subject: GNUK 1.2.15 on XNUCLEO-F103RB does not respond to gpg
 --card-status
In-Reply-To: <877dnonwgq.fsf@iwagami.gniibe.org>
References: <YBp2/rltUUxrK/BZ@hostuser>
 <70fa4b69-4622-60d9-34ab-049e89bbf8d9@nitrokey.com>
 <YBqSPqE+YECx03Wl@hostuser>
 <20210203133426.006c2fc5@faultier2go.lan>
 <877dnonwgq.fsf@iwagami.gniibe.org>
Message-ID: <YB0qTjibokGJIl9U@hostuser>

Afer applying the instructions to XNUCLEO, I got it to work. Thank you.
(Side note: count pins from bottom of the circuit).


From gniibe at fsij.org  Fri Feb 26 01:58:13 2021
From: gniibe at fsij.org (NIIBE Yutaka)
Date: Fri, 26 Feb 2021 09:58:13 +0900
Subject: Chopstx 1.19 / Chopstx 2.2
Message-ID: <874khzbq6y.fsf@iwagami.gniibe.org>

Hello,

Chopstx 1.19 is released.

	tag release/1.19
	Tagger: NIIBE Yutaka <gniibe at fsij.org>
	Date:   Thu Feb 18 11:04:09 2021 +0900
	commit 71cc5a8f32e0b037def54530fb85c0cda0c5c4e7

This release is from STABLE-BRANCH-1 branch.

Major change is only for GNU/Linux emulation.  Backported from master,
now, it supports AckBtn driver, and its (fake)ADC driver uses
getrandom(2).


Chopstx 2.2 is released (2.1 was not announced).

	tag release/2.2
	Tagger: NIIBE Yutaka <gniibe at fsij.org>
	Date:   Fri Feb 26 09:17:27 2021 +0900
	commit 5a3a3e98d4cde3e5f613e4740805cd5a101ae22b

This release is from master branch.

2.0 was buggy (and 2.1 too), it only worked well with Sipeed Longan nano
(GD32VF103).

Major changes for Cortex-M0/M3/M4 are adoption of GCC option of
-masm-syntax-unified, and no use of PendSV any more.  After 10 years of
experience, I learned about difference between old and new syntax of ARM
asm.  (It is quite confusing.)

In GNU/Linux emulation, it supports AckBtn driver (using terminal), and
its (fake)ADC driver uses getrandom(2).
-- 


From gniibe at fsij.org  Fri Feb 26 02:56:32 2021
From: gniibe at fsij.org (NIIBE Yutaka)
Date: Fri, 26 Feb 2021 10:56:32 +0900
Subject: Gnuk 1.2.17
Message-ID: <871rd3bnhr.fsf@iwagami.gniibe.org>

Hello, again,

Gnuk 1.2.17 is released.

	tag release/1.2.17
	Tagger: NIIBE Yutaka <gniibe at fsij.org>
	Date:   Thu Feb 25 15:49:02 2021 +0900
	commit 4af98308e06c42dcc4e0be7a4faedc77e98de297

This release is from STABLE-BRANCH-1-2 branch.

Please note that, master switched to Chopstx 2.x.

Basically, it's a release for GNU/Linux emulation.  Chopstx is updated
to 1.19 to use new drivers for GNU/Linux emulation.

We had discussion that... it is good to require setup of KDF Data Object
in advance before keygen or key import.

For GNU/Linux emulation only, I am testing rejecting keygen and key
import in a situation with no KDF Data Object setup.

Applying following patch, you can test the rejection for GNU/Linux
emulation.  Note that this rejection would give users a bad experience,
in existing tools and documentation.

diff --git a/src/configure b/src/configure
index 8e7000c..4318d56 100755
--- a/src/configure
+++ b/src/configure
@@ -219,7 +219,7 @@ if test "$target" = "GNU_LINUX"; then
   emulation="yes"
   cross=""
   mcu="none"
-  kdf_do_require=yes
+  kdf_do_required=yes
   def_emulation="-DGNU_LINUX_EMULATION"
   def_memory_size="-DMEMORY_SIZE=1024"
   enable_hexoutput=""

I think that for GNU/Linux emulation, this makes sense.  Because
GNU/Linux emulation simply uses a file to store private keys.


Here is a session log using three terminals:

In the terminal #1, I built Gnuk executable (the command "gnuk"), by
configure and make.  And then, run "./build/gnuk" (you can use
--vidpid=234b:0000 argument, but it's not needed).

The "gnuk" executable kindly shows how to type by root.  So, I typed as
it saied in the terminal #2.  Then, I checked by "usbip port" command
if it is correctly attached.  (You can also see by "dmesg" command.)
For some reason (I don't know), lsusb output was too long.

In the terminal #3, I invoked the test suite of Gnuk, which uses PyTest.
I confirmed all tests went well.  (Note that the test suite assumes that
no rejection of keygen and key import.)

Lastly, back in the terminal #1, I killed the process of "gnuk" by
typing Ctrl-C.


When you run "gnuk" executable, you will see a file will be created at
~/.gnuk-flash-image.


-------------------------- Terminal #1
gniibe at iwagami:~/work/gnuk/gnuk12/src$ ./configure --enable-factory-reset --target=GNU_LINUX
Header file is: board-gnu-linux.h
Debug option disabled
Configured for bare system (no-DFU)
PIN pad option disabled
CERT.3 Data Object is NOT supported
Card insert/removal by HID device is NOT supported
Life cycle management is supported
Acknowledge button is supported
gniibe at iwagami:~/work/gnuk/gnuk12/src$ make
mkdir -p build
gcc -c  -O3 -Os -g -ffunction-sections -fdata-sections -fno-common -Wall -Wextra -Wstrict-prototypes -Wa,-alms=build/main.lst -DGNU_LINUX_EMULATION -DMEMORY_SIZE=1024 -DMHZ=72 -DBN256_C_IMPLEMENTATION -DUSE_SYS -D_GNU_SOURCE -MD -MP -MF .dep/main.o.d -I. -I../polarssl/include -I../chopstx main.c -o build/main.o
gcc -c  -O3 -Os -g -ffunction-sections -fdata-sections -fno-common -Wall -Wextra -Wstrict-prototypes -Wa,-alms=build/call-rsa.lst -DGNU_LINUX_EMULATION -DMEMORY_SIZE=1024 -DMHZ=72 -DBN256_C_IMPLEMENTATION -DUSE_SYS -D_GNU_SOURCE -MD -MP -MF .dep/call-rsa.o.d -I. -I../polarssl/include -I../chopstx call-rsa.c -o build/call-rsa.o
gcc -c  -O3 -Os -g -ffunction-sections -fdata-sections -fno-common -Wall -Wextra -Wstrict-prototypes -Wa,-alms=build/usb_desc.lst -DGNU_LINUX_EMULATION -DMEMORY_SIZE=1024 -DMHZ=72 -DBN256_C_IMPLEMENTATION -DUSE_SYS -D_GNU_SOURCE -MD -MP -MF .dep/usb_desc.o.d -I. -I../polarssl/include -I../chopstx usb_desc.c -o build/usb_desc.o
gcc -c  -O3 -Os -g -ffunction-sections -fdata-sections -fno-common -Wall -Wextra -Wstrict-prototypes -Wa,-alms=build/usb_ctrl.lst -DGNU_LINUX_EMULATION -DMEMORY_SIZE=1024 -DMHZ=72 -DBN256_C_IMPLEMENTATION -DUSE_SYS -D_GNU_SOURCE -MD -MP -MF .dep/usb_ctrl.o.d -I. -I../polarssl/include -I../chopstx usb_ctrl.c -o build/usb_ctrl.o
gcc -c  -O3 -Os -g -ffunction-sections -fdata-sections -fno-common -Wall -Wextra -Wstrict-prototypes -Wa,-alms=build/usb-ccid.lst -DGNU_LINUX_EMULATION -DMEMORY_SIZE=1024 -DMHZ=72 -DBN256_C_IMPLEMENTATION -DUSE_SYS -D_GNU_SOURCE -MD -MP -MF .dep/usb-ccid.o.d -I. -I../polarssl/include -I../chopstx usb-ccid.c -o build/usb-ccid.o
gcc -c  -O3 -Os -g -ffunction-sections -fdata-sections -fno-common -Wall -Wextra -Wstrict-prototypes -Wa,-alms=build/openpgp.lst -DGNU_LINUX_EMULATION -DMEMORY_SIZE=1024 -DMHZ=72 -DBN256_C_IMPLEMENTATION -DUSE_SYS -D_GNU_SOURCE -MD -MP -MF .dep/openpgp.o.d -I. -I../polarssl/include -I../chopstx openpgp.c -o build/openpgp.o
gcc -c  -O3 -Os -g -ffunction-sections -fdata-sections -fno-common -Wall -Wextra -Wstrict-prototypes -Wa,-alms=build/ac.lst -DGNU_LINUX_EMULATION -DMEMORY_SIZE=1024 -DMHZ=72 -DBN256_C_IMPLEMENTATION -DUSE_SYS -D_GNU_SOURCE -MD -MP -MF .dep/ac.o.d -I. -I../polarssl/include -I../chopstx ac.c -o build/ac.o
gcc -c  -O3 -Os -g -ffunction-sections -fdata-sections -fno-common -Wall -Wextra -Wstrict-prototypes -Wa,-alms=build/openpgp-do.lst -DGNU_LINUX_EMULATION -DMEMORY_SIZE=1024 -DMHZ=72 -DBN256_C_IMPLEMENTATION -DUSE_SYS -D_GNU_SOURCE -MD -MP -MF .dep/openpgp-do.o.d -I. -I../polarssl/include -I../chopstx openpgp-do.c -o build/openpgp-do.o
gcc -c  -O3 -Os -g -ffunction-sections -fdata-sections -fno-common -Wall -Wextra -Wstrict-prototypes -Wa,-alms=build/flash.lst -DGNU_LINUX_EMULATION -DMEMORY_SIZE=1024 -DMHZ=72 -DBN256_C_IMPLEMENTATION -DUSE_SYS -D_GNU_SOURCE -MD -MP -MF .dep/flash.o.d -I. -I../polarssl/include -I../chopstx flash.c -o build/flash.o
gcc -c  -O3 -Os -g -ffunction-sections -fdata-sections -fno-common -Wall -Wextra -Wstrict-prototypes -Wa,-alms=build/bn.lst -DGNU_LINUX_EMULATION -DMEMORY_SIZE=1024 -DMHZ=72 -DBN256_C_IMPLEMENTATION -DUSE_SYS -D_GNU_SOURCE -MD -MP -MF .dep/bn.o.d -I. -I../polarssl/include -I../chopstx bn.c -o build/bn.o
gcc -c  -O3 -Os -g -ffunction-sections -fdata-sections -fno-common -Wall -Wextra -Wstrict-prototypes -Wa,-alms=build/mod.lst -DGNU_LINUX_EMULATION -DMEMORY_SIZE=1024 -DMHZ=72 -DBN256_C_IMPLEMENTATION -DUSE_SYS -D_GNU_SOURCE -MD -MP -MF .dep/mod.o.d -I. -I../polarssl/include -I../chopstx mod.c -o build/mod.o
gcc -c  -O3 -Os -g -ffunction-sections -fdata-sections -fno-common -Wall -Wextra -Wstrict-prototypes -Wa,-alms=build/modp256r1.lst -DGNU_LINUX_EMULATION -DMEMORY_SIZE=1024 -DMHZ=72 -DBN256_C_IMPLEMENTATION -DUSE_SYS -D_GNU_SOURCE -MD -MP -MF .dep/modp256r1.o.d -I. -I../polarssl/include -I../chopstx modp256r1.c -o build/modp256r1.o
gcc -c  -O3 -Os -g -ffunction-sections -fdata-sections -fno-common -Wall -Wextra -Wstrict-prototypes -Wa,-alms=build/jpc_p256r1.lst -DGNU_LINUX_EMULATION -DMEMORY_SIZE=1024 -DMHZ=72 -DBN256_C_IMPLEMENTATION -DUSE_SYS -D_GNU_SOURCE -MD -MP -MF .dep/jpc_p256r1.o.d -I. -I../polarssl/include -I../chopstx jpc_p256r1.c -o build/jpc_p256r1.o
gcc -c  -O3 -Os -g -ffunction-sections -fdata-sections -fno-common -Wall -Wextra -Wstrict-prototypes -Wa,-alms=build/ec_p256r1.lst -DGNU_LINUX_EMULATION -DMEMORY_SIZE=1024 -DMHZ=72 -DBN256_C_IMPLEMENTATION -DUSE_SYS -D_GNU_SOURCE -MD -MP -MF .dep/ec_p256r1.o.d -I. -I../polarssl/include -I../chopstx ec_p256r1.c -o build/ec_p256r1.o
gcc -c  -O3 -Os -g -ffunction-sections -fdata-sections -fno-common -Wall -Wextra -Wstrict-prototypes -Wa,-alms=build/call-ec_p256r1.lst -DGNU_LINUX_EMULATION -DMEMORY_SIZE=1024 -DMHZ=72 -DBN256_C_IMPLEMENTATION -DUSE_SYS -D_GNU_SOURCE -MD -MP -MF .dep/call-ec_p256r1.o.d -I. -I../polarssl/include -I../chopstx call-ec_p256r1.c -o build/call-ec_p256r1.o
gcc -c  -O3 -Os -g -ffunction-sections -fdata-sections -fno-common -Wall -Wextra -Wstrict-prototypes -Wa,-alms=build/modp256k1.lst -DGNU_LINUX_EMULATION -DMEMORY_SIZE=1024 -DMHZ=72 -DBN256_C_IMPLEMENTATION -DUSE_SYS -D_GNU_SOURCE -MD -MP -MF .dep/modp256k1.o.d -I. -I../polarssl/include -I../chopstx modp256k1.c -o build/modp256k1.o
gcc -c  -O3 -Os -g -ffunction-sections -fdata-sections -fno-common -Wall -Wextra -Wstrict-prototypes -Wa,-alms=build/jpc_p256k1.lst -DGNU_LINUX_EMULATION -DMEMORY_SIZE=1024 -DMHZ=72 -DBN256_C_IMPLEMENTATION -DUSE_SYS -D_GNU_SOURCE -MD -MP -MF .dep/jpc_p256k1.o.d -I. -I../polarssl/include -I../chopstx jpc_p256k1.c -o build/jpc_p256k1.o
gcc -c  -O3 -Os -g -ffunction-sections -fdata-sections -fno-common -Wall -Wextra -Wstrict-prototypes -Wa,-alms=build/ec_p256k1.lst -DGNU_LINUX_EMULATION -DMEMORY_SIZE=1024 -DMHZ=72 -DBN256_C_IMPLEMENTATION -DUSE_SYS -D_GNU_SOURCE -MD -MP -MF .dep/ec_p256k1.o.d -I. -I../polarssl/include -I../chopstx ec_p256k1.c -o build/ec_p256k1.o
gcc -c  -O3 -Os -g -ffunction-sections -fdata-sections -fno-common -Wall -Wextra -Wstrict-prototypes -Wa,-alms=build/call-ec_p256k1.lst -DGNU_LINUX_EMULATION -DMEMORY_SIZE=1024 -DMHZ=72 -DBN256_C_IMPLEMENTATION -DUSE_SYS -D_GNU_SOURCE -MD -MP -MF .dep/call-ec_p256k1.o.d -I. -I../polarssl/include -I../chopstx call-ec_p256k1.c -o build/call-ec_p256k1.o
gcc -c  -O3 -Os -g -ffunction-sections -fdata-sections -fno-common -Wall -Wextra -Wstrict-prototypes -Wa,-alms=build/mod25638.lst -DGNU_LINUX_EMULATION -DMEMORY_SIZE=1024 -DMHZ=72 -DBN256_C_IMPLEMENTATION -DUSE_SYS -D_GNU_SOURCE -MD -MP -MF .dep/mod25638.o.d -I. -I../polarssl/include -I../chopstx mod25638.c -o build/mod25638.o
gcc -c  -O3 -Os -g -ffunction-sections -fdata-sections -fno-common -Wall -Wextra -Wstrict-prototypes -Wa,-alms=build/ecc-edwards.lst -DGNU_LINUX_EMULATION -DMEMORY_SIZE=1024 -DMHZ=72 -DBN256_C_IMPLEMENTATION -DUSE_SYS -D_GNU_SOURCE -MD -MP -MF .dep/ecc-edwards.o.d -I. -I../polarssl/include -I../chopstx ecc-edwards.c -o build/ecc-edwards.o
gcc -c  -O3 -Os -g -ffunction-sections -fdata-sections -fno-common -Wall -Wextra -Wstrict-prototypes -Wa,-alms=build/ecc-mont.lst -DGNU_LINUX_EMULATION -DMEMORY_SIZE=1024 -DMHZ=72 -DBN256_C_IMPLEMENTATION -DUSE_SYS -D_GNU_SOURCE -MD -MP -MF .dep/ecc-mont.o.d -I. -I../polarssl/include -I../chopstx ecc-mont.c -o build/ecc-mont.o
gcc -c  -O3 -Os -g -ffunction-sections -fdata-sections -fno-common -Wall -Wextra -Wstrict-prototypes -Wa,-alms=build/sha512.lst -DGNU_LINUX_EMULATION -DMEMORY_SIZE=1024 -DMHZ=72 -DBN256_C_IMPLEMENTATION -DUSE_SYS -D_GNU_SOURCE -MD -MP -MF .dep/sha512.o.d -I. -I../polarssl/include -I../chopstx sha512.c -o build/sha512.o
gcc -c  -O3 -Os -g -ffunction-sections -fdata-sections -fno-common -Wall -Wextra -Wstrict-prototypes -Wa,-alms=build/random.lst -DGNU_LINUX_EMULATION -DMEMORY_SIZE=1024 -DMHZ=72 -DBN256_C_IMPLEMENTATION -DUSE_SYS -D_GNU_SOURCE -MD -MP -MF .dep/random.o.d -I. -I../polarssl/include -I../chopstx random.c -o build/random.o
gcc -c  -O3 -Os -g -ffunction-sections -fdata-sections -fno-common -Wall -Wextra -Wstrict-prototypes -Wa,-alms=build/neug.lst -DGNU_LINUX_EMULATION -DMEMORY_SIZE=1024 -DMHZ=72 -DBN256_C_IMPLEMENTATION -DUSE_SYS -D_GNU_SOURCE -MD -MP -MF .dep/neug.o.d -I. -I../polarssl/include -I../chopstx neug.c -o build/neug.o
gcc -c  -O3 -Os -g -ffunction-sections -fdata-sections -fno-common -Wall -Wextra -Wstrict-prototypes -Wa,-alms=build/sha256.lst -DGNU_LINUX_EMULATION -DMEMORY_SIZE=1024 -DMHZ=72 -DBN256_C_IMPLEMENTATION -DUSE_SYS -D_GNU_SOURCE -MD -MP -MF .dep/sha256.o.d -I. -I../polarssl/include -I../chopstx sha256.c -o build/sha256.o
gcc -c  -O3 -g -Wall -Wextra -Wstrict-prototypes -Wa,-alms=build/bignum.lst -DGNU_LINUX_EMULATION -DMEMORY_SIZE=1024 -DMHZ=72 -DBN256_C_IMPLEMENTATION -DUSE_SYS -D_GNU_SOURCE -MD -MP -MF .dep/bignum.o.d -I. -I../polarssl/include -I../chopstx ../polarssl/library/bignum.c -o build/bignum.o
gcc -c  -O3 -Os -g -ffunction-sections -fdata-sections -fno-common -Wall -Wextra -Wstrict-prototypes -Wa,-alms=build/rsa.lst -DGNU_LINUX_EMULATION -DMEMORY_SIZE=1024 -DMHZ=72 -DBN256_C_IMPLEMENTATION -DUSE_SYS -D_GNU_SOURCE -MD -MP -MF .dep/rsa.o.d -I. -I../polarssl/include -I../chopstx ../polarssl/library/rsa.c -o build/rsa.o
gcc -c  -O3 -Os -g -ffunction-sections -fdata-sections -fno-common -Wall -Wextra -Wstrict-prototypes -Wa,-alms=build/aes.lst -DGNU_LINUX_EMULATION -DMEMORY_SIZE=1024 -DMHZ=72 -DBN256_C_IMPLEMENTATION -DUSE_SYS -D_GNU_SOURCE -MD -MP -MF .dep/aes.o.d -I. -I../polarssl/include -I../chopstx ../polarssl/library/aes.c -o build/aes.o
gcc -c  -O3 -Os -g -ffunction-sections -fdata-sections -fno-common -Wall -Wextra -Wstrict-prototypes -Wa,-alms=build/entry-gnu-linux.lst -DGNU_LINUX_EMULATION -DMEMORY_SIZE=1024 -DMHZ=72 -DBN256_C_IMPLEMENTATION -DUSE_SYS -D_GNU_SOURCE -MD -MP -MF .dep/entry-gnu-linux.o.d -I. -I../polarssl/include -I../chopstx ../chopstx/entry-gnu-linux.c -o build/entry-gnu-linux.o
gcc -c  -O3 -Os -g -ffunction-sections -fdata-sections -fno-common -Wall -Wextra -Wstrict-prototypes -Wa,-alms=build/chopstx.lst -DGNU_LINUX_EMULATION -DMEMORY_SIZE=1024 -DMHZ=72 -DBN256_C_IMPLEMENTATION -DUSE_SYS -D_GNU_SOURCE -MD -MP -MF .dep/chopstx.o.d -I. -I../polarssl/include -I../chopstx ../chopstx/chopstx.c -o build/chopstx.o
gcc -c  -O3 -Os -g -ffunction-sections -fdata-sections -fno-common -Wall -Wextra -Wstrict-prototypes -Wa,-alms=build/eventflag.lst -DGNU_LINUX_EMULATION -DMEMORY_SIZE=1024 -DMHZ=72 -DBN256_C_IMPLEMENTATION -DUSE_SYS -D_GNU_SOURCE -MD -MP -MF .dep/eventflag.o.d -I. -I../polarssl/include -I../chopstx ../chopstx/eventflag.c -o build/eventflag.o
gcc -c  -O3 -Os -g -ffunction-sections -fdata-sections -fno-common -Wall -Wextra -Wstrict-prototypes -Wa,-alms=build/chx-gnu-linux.lst -DGNU_LINUX_EMULATION -DMEMORY_SIZE=1024 -DMHZ=72 -DBN256_C_IMPLEMENTATION -DUSE_SYS -D_GNU_SOURCE -MD -MP -MF .dep/chx-gnu-linux.o.d -I. -I../polarssl/include -I../chopstx ../chopstx/mcu/chx-gnu-linux.c -o build/chx-gnu-linux.o
gcc -c  -O3 -Os -g -ffunction-sections -fdata-sections -fno-common -Wall -Wextra -Wstrict-prototypes -Wa,-alms=build/sys-gnu-linux.lst -DGNU_LINUX_EMULATION -DMEMORY_SIZE=1024 -DMHZ=72 -DBN256_C_IMPLEMENTATION -DUSE_SYS -D_GNU_SOURCE -MD -MP -MF .dep/sys-gnu-linux.o.d -I. -I../polarssl/include -I../chopstx ../chopstx/mcu/sys-gnu-linux.c -o build/sys-gnu-linux.o
gcc -c  -O3 -Os -g -ffunction-sections -fdata-sections -fno-common -Wall -Wextra -Wstrict-prototypes -Wa,-alms=build/usb-usbip.lst -DGNU_LINUX_EMULATION -DMEMORY_SIZE=1024 -DMHZ=72 -DBN256_C_IMPLEMENTATION -DUSE_SYS -D_GNU_SOURCE -MD -MP -MF .dep/usb-usbip.o.d -I. -I../polarssl/include -I../chopstx ../chopstx/mcu/usb-usbip.c -o build/usb-usbip.o
gcc -c  -O3 -Os -g -ffunction-sections -fdata-sections -fno-common -Wall -Wextra -Wstrict-prototypes -Wa,-alms=build/adc-gnu-linux.lst -DGNU_LINUX_EMULATION -DMEMORY_SIZE=1024 -DMHZ=72 -DBN256_C_IMPLEMENTATION -DUSE_SYS -D_GNU_SOURCE -MD -MP -MF .dep/adc-gnu-linux.o.d -I. -I../polarssl/include -I../chopstx ../chopstx/contrib/adc-gnu-linux.c -o build/adc-gnu-linux.o
gcc -c  -O3 -Os -g -ffunction-sections -fdata-sections -fno-common -Wall -Wextra -Wstrict-prototypes -Wa,-alms=build/ackbtn-gnu-linux.lst -DGNU_LINUX_EMULATION -DMEMORY_SIZE=1024 -DMHZ=72 -DBN256_C_IMPLEMENTATION -DUSE_SYS -D_GNU_SOURCE -MD -MP -MF .dep/ackbtn-gnu-linux.o.d -I. -I../polarssl/include -I../chopstx ../chopstx/contrib/ackbtn-gnu-linux.c -o build/ackbtn-gnu-linux.o
gcc   -o build/gnuk build/main.o build/call-rsa.o build/usb_desc.o build/usb_ctrl.o build/usb-ccid.o build/openpgp.o build/ac.o build/openpgp-do.o build/flash.o build/bn.o build/mod.o build/modp256r1.o build/jpc_p256r1.o build/ec_p256r1.o build/call-ec_p256r1.o build/modp256k1.o build/jpc_p256k1.o build/ec_p256k1.o build/call-ec_p256k1.o build/mod25638.o build/ecc-edwards.o build/ecc-mont.o build/sha512.o build/random.o build/neug.o build/sha256.o build/bignum.o build/rsa.o build/aes.o build/entry-gnu-linux.o build/chopstx.o build/eventflag.o build/chx-gnu-linux.o build/sys-gnu-linux.o build/usb-usbip.o build/adc-gnu-linux.o build/ackbtn-gnu-linux.o  -lpthread
gniibe at iwagami:~/work/gnuk/gnuk12/src$ ./build/gnuk
Gnuk (emulation with USBIP), a GnuPG USB Token implementation
Copyright (C) 2021 Free Software Initiative of Japan
This is free software under GPLv3+.
USBIP thread started.
You can use this by attaching following commands:
    # modprobe vhci_hcd
    # usbip attach -r 127.0.0.1 -b 1-1
User interaction thread for AckBtn started.
^C
gniibe at iwagami:~/work/gnuk/gnuk12/src$ exit
-------------------------- Terminal #2
root at iwagami:/# modprobe vhci_hcd
root at iwagami:/# usbip attach -r 127.0.0.1 -b 1-1
root at iwagami:/# usbip port
Imported USB devices
====================
Port 00: <Port in Use> at Full Speed(12Mbps)
       unknown vendor : unknown product (0000:0000)
       3-1 -> usbip://127.0.0.1:3240/1-1
           -> remote bus/dev 000/000
-------------------------- Terminal #3
gniibe at iwagami:~/work/gnuk/gnuk12/tests$ py.test-3 -x
================================================================== test session starts ===================================================================
platform linux -- Python 3.9.1+, pytest-3.10.1, py-1.7.0, pluggy-0.8.0
rootdir: /home/gniibe/work/gnuk/gnuk12/tests, inifile:
collected 416 items                                                                                                                                      

test_000_empty_card.py ..............................                                                                                              [  7%]
test_001_personalize_card.py .....................................................                                                                 [ 19%]
test_002_personalize_reset.py ............                                                                                                         [ 22%]
test_003_remove_keys.py ...                                                                                                                        [ 23%]
test_004_reset_pw3.py ....                                                                                                                         [ 24%]
test_005_personalize_admin_less.py ............................................................................                                    [ 42%]
test_009_keygen.py ...........                                                                                                                     [ 45%]
test_011_kdf_full.py ..........................................................................                                                    [ 63%]
test_016_kdf_single.py ..........................................................................                                                  [ 81%]
test_021_personalize_admin_less.py ............................................................................                                    [ 99%]
test_025_kdf_none.py ...                                                                                                                           [100%]

============================================================== 416 passed in 84.70 seconds ===============================================================
gniibe at iwagami:~/work/gnuk/gnuk12/tests$ 
--------------------------

Enjoy,
-- 


From pollo at debian.org  Sat Mar  6 22:35:08 2021
From: pollo at debian.org (=?UTF-8?Q?Louis-Philippe_V=c3=a9ronneau?=)
Date: Sat, 6 Mar 2021 16:35:08 -0500
Subject: Changing the default Pin Retry number
Message-ID: <92291dbc-8f00-b19f-336d-6ae5fb956ae2@debian.org>

Hi!

I've setup a Nitro Start and I was wondering if there is a way to change
the default Pin Retry number? 3 is a little low for me and I'd prefer to
use 5.

I've found this, but it seems to be Yubikey specific, as it doesn't work
for my token:

https://developers.yubico.com/ykneo-openpgp/PinRetries.html

Cheers,

-- 
  ???????
  ???????  Louis-Philippe V?ronneau
  ??????   pollo at debian.org / veronneau.org
  ???

-------------- next part --------------
A non-text attachment was scrubbed...
Name: OpenPGP_signature
Type: application/pgp-signature
Size: 840 bytes
Desc: OpenPGP digital signature
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20210306/c2c2be87/attachment.sig>

From szczepan at nitrokey.com  Mon Mar  8 18:15:30 2021
From: szczepan at nitrokey.com (Szczepan Zalega | Nitrokey)
Date: Mon, 8 Mar 2021 18:15:30 +0100
Subject: Changing the default Pin Retry number
In-Reply-To: <92291dbc-8f00-b19f-336d-6ae5fb956ae2@debian.org>
References: <92291dbc-8f00-b19f-336d-6ae5fb956ae2@debian.org>
Message-ID: <8bc60fb3-8f31-f7d4-67a5-0ff758ba0149@nitrokey.com>

On 3/6/21 10:35 PM, Louis-Philippe V?ronneau wrote:
> I've setup a Nitro Start and I was wondering if there is a way to change
> the default Pin Retry number? 3 is a little low for me and I'd prefer to
> use 5.
> 
> I've found this, but it seems to be Yubikey specific, as it doesn't work
> for my token:
> 
> https://developers.yubico.com/ykneo-openpgp/PinRetries.html
> 

Hi!

Nitrokey Start / GNUK does not offer such feature unfortunately. You can
however rebuild the firmware with the changed constant named
PASSWORD_ERRORS_MAX [1][2]. Maximum value should fit into 1 byte (less
than 256).
At [5] you should find the build script for development, and [6] used
for the release.

Procedure like mentioned in the linked docs could be realized by adding
a custom command, like the INS_SET_IDENTITY - see [3][4].

Best regards,
Szczepan


[1] src/openpgp-do.c:44
[2]
https://github.com/Nitrokey/nitrokey-start-firmware/blob/gnuk1.2-regnual-fix/src/openpgp-do.c#L44
[3]
https://github.com/Nitrokey/nitrokey-start-firmware/blob/gnuk1.2-regnual-fix/src/openpgp.c#L1547
[4]
https://github.com/Nitrokey/nitrokey-start-firmware/blob/gnuk1.2-regnual-fix/src/openpgp.c#L914
[5]
https://github.com/Nitrokey/nitrokey-start-firmware/blob/gnuk1.2-regnual-fix/docker/Makefile
[6]
https://github.com/Nitrokey/nitrokey-start-firmware/blob/gnuk1.2-regnual-fix/prebuilt/build_all.sh

-- 
Szczepan Zalega
Senior Software Developer

Nitrokey GmbH
https://www.nitrokey.com

Email: szczepan at nitrokey.com
Nickname: szszszsz

Rheinstr. 10 C, 14513 Teltow, Germany
CEO / Gesch?ftsf?hrer: Jan Suhr
Register: AG Potsdam, HRB 32882 P
VAT ID / USt-IdNr.: DE300136599



From gniibe at fsij.org  Mon Apr  5 04:22:19 2021
From: gniibe at fsij.org (NIIBE Yutaka)
Date: Mon, 05 Apr 2021 11:22:19 +0900
Subject: Gnuk 1.2.18
Message-ID: <877dlhtqqs.fsf@iwagami.gniibe.org>

Hello,

Gnuk 1.2.18 is released.

	tag release/1.2.18
	Tagger: NIIBE Yutaka <gniibe at fsij.org>
	Date:   Fri Apr 2 16:59:10 2021 +0900
	commit 98119dc991b95052e80c647b1d6ccc59705c7729

This release is from STABLE-BRANCH-1-2 branch.

I's a release for minor bug fixes.  It fixed a bug for key generation
introduced in the previous release.  Now, too/upgrade_bypasswd.py has
a check if configuration matches.


It's April, new school year started in Japan.  For those who try, new
algos (Ed448 and X448) are available in master.  I think I'm going to
remove RSA from master soon.
-- 


From gniibe at fsij.org  Mon Apr  5 04:34:47 2021
From: gniibe at fsij.org (NIIBE Yutaka)
Date: Mon, 05 Apr 2021 11:34:47 +0900
Subject: Gnuk 1.2.18
Message-ID: <875z11tq60.fsf@iwagami.gniibe.org>

Hello,

Gnuk 1.2.18 is released.

	tag release/1.2.18
	Tagger: NIIBE Yutaka <gniibe at fsij.org>
	Date:   Fri Apr 2 16:59:10 2021 +0900
	commit 98119dc991b95052e80c647b1d6ccc59705c7729

This release is from STABLE-BRANCH-1-2 branch.

I's a release for minor bug fixes.  It fixed a bug for key generation
introduced in the previous release.  Now, too/upgrade_bypasswd.py has
a check if configuration matches.


It's April, new school year started in Japan.  For those who try, new
algos (Ed448 and X448) are available in master.  I think I'm going to
remove RSA from master soon.
-- 


From bertrand at jacquin.bzh  Wed Apr 28 14:11:28 2021
From: bertrand at jacquin.bzh (Bertrand Jacquin)
Date: Wed, 28 Apr 2021 13:11:28 +0100
Subject: [PATCH] regnual: add missing header
Message-ID: <20210428121128.410972-1-bertrand@jacquin.bzh>

  regnual.c:32:1: note: ?memset? is declared in header ?<string.h>?
---
 regnual/regnual.c | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/regnual/regnual.c b/regnual/regnual.c
index 16326e2199ae..e296d51bc53e 100644
--- a/regnual/regnual.c
+++ b/regnual/regnual.c
@@ -26,6 +26,8 @@
  * ReGNUal
  */
 
+#include <string.h>
+
 #include "types.h"
 #include "usb_lld.h"
 #include "sys.h"


From bdonat2019 at fau.edu  Sun Aug 29 17:22:44 2021
From: bdonat2019 at fau.edu (Beby Donat)
Date: Sun, 29 Aug 2021 11:22:44 -0400
Subject: Hello
Message-ID: <CACNZHiKe8nhcqRuGwPeuvJ1RX3O2Vu05R5n-5C52BimSrL9nvA@mail.gmail.com>


-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20210829/f9f94c8a/attachment.html>

From bdonat2019 at fau.edu  Sun Aug 29 17:22:07 2021
From: bdonat2019 at fau.edu (Beby Donat)
Date: Sun, 29 Aug 2021 11:22:07 -0400
Subject: Hello
Message-ID: <CACNZHiKLuV=tOJeBc1-L0EkKKpzy=Q4bu0b1=J-HArPSwj9QdA@mail.gmail.com>


-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20210829/b678fe3d/attachment.html>

From gniibe at fsij.org  Thu Oct 14 04:54:04 2021
From: gniibe at fsij.org (NIIBE Yutaka)
Date: Thu, 14 Oct 2021 11:54:04 +0900
Subject: Chopstx 1.20 / Chopstx 2.3
Message-ID: <87zgrc2u5v.fsf@akagi.fsij.org>

Hello,

Chopstx 1.20 is released.

	tag release/1.20
	Tagger: NIIBE Yutaka <gniibe at fsij.org>
	Date:   Tue Oct 12 11:23:36 2021 +0900
	commit a6b96fe434db9fd525cbec0b1c02e910fa2bdb1e

This release is from STABLE-BRANCH-1 branch.


Chopstx 2.3 is released.

	tag release/2.3
	Tagger: NIIBE Yutaka <gniibe at fsij.org>
	Date:   Tue Oct 12 11:12:22 2021 +0900
	commit 9977bac71561482120dcdf3f2d948411112fd46b

This release is from master branch.


For both releases, changes are only for the USB driver of GNU/Linux
emulation.  I fixed the value of URB_DATA_SIZE, so that Gnuk can work
with PC/SC.
-- 


From gniibe at fsij.org  Thu Oct 14 04:57:14 2021
From: gniibe at fsij.org (NIIBE Yutaka)
Date: Thu, 14 Oct 2021 11:57:14 +0900
Subject: Gnuk 1.2.19
Message-ID: <87wnmg2u0l.fsf@akagi.fsij.org>

Hello,

Gnuk 1.2.19 is released.

	tag release/1.2.19
	Tagger: NIIBE Yutaka <gniibe at fsij.org>
	Date:   Tue Oct 12 11:44:06 2021 +0900
	commit 57fdadf283c3dca08bada3b65cd0fcbe8eda3d4e

This release is from STABLE-BRANCH-1-2 branch.

GNU/Linux emulation now works with PC/SC.
-- 


From hase at hase.net  Fri Dec 31 23:26:18 2021
From: hase at hase.net (Hartmut Semken)
Date: Fri, 31 Dec 2021 23:26:18 +0100
Subject: Gnuk on bluepill: I am missing something
Message-ID: <e2903ea9-977e-1798-de91-74b583b66d2f@hase.net>

Hi,

I am new to the list.

Could not find a solution in the archives, so here it goes

I tried multiple Bluepills I have on hand; none work for me.

One particular device reports only 64k Flash and here openocd shows an 
error; this is somewhat expected.

But even on the 128k versions, I do not see the Bluepill enumeratre on 
USB at all.

I got a recent version of gnuk:

[hase at hase-station gnuk]$ cat VERSION
release/1.2.15

configure and make and flashing run just fine

[hase at hase-station gnuk]$ ./configure --vidpid=234b:0000 --target=BLUE_PILL

[hase at hase-station gnuk]$ make clean && make -j16

[hase at hase-station gnuk]$ openocd -f interface/stlink.cfg -f 
target/stm32f1x.cfg -c init -c "reset halt" -c "stm32f1x unlock 0" -c 
"reset halt" -c "program build/gnuk.elf verify reset exit"

Open On-Chip Debugger 0.11.0-rc2
Licensed under GNU GPL v2
For bug reports, read
 ??? http://openocd.org/doc/doxygen/bugs.html
Info : auto-selecting first available session transport "hla_swd". To 
override use 'transport select <transport>'.
Info : The selected transport took over low-level target control. The 
results might differ compared to plain JTAG/SWD
Info : clock speed 1000 kHz
Info : STLINK V2J37M26 (API v2) VID:PID 0483:374B
Info : Target voltage: 3.261660
Info : stm32f1x.cpu: hardware has 6 breakpoints, 4 watchpoints
Info : starting gdb server for stm32f1x.cpu on 3333
Info : Listening on port 3333 for gdb connections
target halted due to debug-request, current mode: Thread
xPSR: 0x01000000 pc: 0x0800025c msp: 0x20005000
Info : device id = 0x20036410
Info : flash size = 128kbytes
stm32x unlocked.
INFO: a reset or power cycle is required for the new settings to take 
effect.

target halted due to debug-request, current mode: Thread
xPSR: 0x01000000 pc: 0x0800025c msp: 0x20005000
target halted due to debug-request, current mode: Thread
xPSR: 0x01000000 pc: 0x0800025c msp: 0x20005000
** Programming Started **
** Programming Finished **
** Verify Started **
** Verified OK **
** Resetting Target **
shutdown command invoked

Yet, the programmed Bluepill does not show up on USB. Not at all.

What am I missing here?


merci bien

hase




From marian.buschsieweke at ovgu.de  Sat Jan  1 16:32:31 2022
From: marian.buschsieweke at ovgu.de (Marian Buschsieweke)
Date: Sat, 01 Jan 2022 16:32:31 +0100
Subject: Gnuk on bluepill: I am missing something
In-Reply-To: <e2903ea9-977e-1798-de91-74b583b66d2f@hase.net>
References: <e2903ea9-977e-1798-de91-74b583b66d2f@hase.net>
Message-ID: <80B923E9-7FCA-41C6-A9F4-9D141C5210F6@ovgu.de>

Hi,

are those multiple BluePills from different vendors, or all obtained from a single source?

Note that even the "genuine" BluePills feature an low-end STM32F103 that officially only has 64 KiB flash and no USB peripheral. But at least for me all genuine STM32F1 used in BluePulls like boards did have a USB peripheral and full 128 KiB flash, despite only reporting 64 KiB. And I personally doubt that ST would change production at this point. But I could imagine that ST does binning and sells MCUs with a broken USB peripheral as the cheaper variant that doesn't officially have a USB peripheral.

Please also keep in mind that quite a few fake MCUs have entered the marked, which might not be fully compatible to the original one. If I recall correctly there was an article about fake STM32F1xx clones on hackaday some time ago that compared a couple of fake MCUs and if I recall correctly it also gave tips on how to tell genuine ones apart from fake ones. So I recommend to rule out that you just tried fake/faulty MCUs first using the tips in that article and testing with known-to-work binaries. (E.g. I think black magic probe provides prebuild binaries of their releases - but I'm not sure about that.)

Also note that some old BluePills were populated with a wrong resistor value at the USB data lines. I personally never had issues as my PCs apparently are very forgiving about out of spec resistor values, but I heard not all machines are that forgiving. So maybe try it on a different PC as well.

Please post an update if you figured the issue out - I got curious :)

Kind regards,
Marian

On 31 December 2021 23:26:18 CET, Hartmut Semken <hase at hase.net> wrote:
>Hi,
>
>I am new to the list.
>
>Could not find a solution in the archives, so here it goes
>
>I tried multiple Bluepills I have on hand; none work for me.
>
>One particular device reports only 64k Flash and here openocd shows an 
>error; this is somewhat expected.
>
>But even on the 128k versions, I do not see the Bluepill enumeratre on 
>USB at all.
>
>I got a recent version of gnuk:
>
>[hase at hase-station gnuk]$ cat VERSION
>release/1.2.15
>
>configure and make and flashing run just fine
>
>[hase at hase-station gnuk]$ ./configure --vidpid=234b:0000 --target=BLUE_PILL
>
>[hase at hase-station gnuk]$ make clean && make -j16
>
>[hase at hase-station gnuk]$ openocd -f interface/stlink.cfg -f 
>target/stm32f1x.cfg -c init -c "reset halt" -c "stm32f1x unlock 0" -c 
>"reset halt" -c "program build/gnuk.elf verify reset exit"
>
>Open On-Chip Debugger 0.11.0-rc2
>Licensed under GNU GPL v2
>For bug reports, read
> ??? http://openocd.org/doc/doxygen/bugs.html
>Info : auto-selecting first available session transport "hla_swd". To 
>override use 'transport select <transport>'.
>Info : The selected transport took over low-level target control. The 
>results might differ compared to plain JTAG/SWD
>Info : clock speed 1000 kHz
>Info : STLINK V2J37M26 (API v2) VID:PID 0483:374B
>Info : Target voltage: 3.261660
>Info : stm32f1x.cpu: hardware has 6 breakpoints, 4 watchpoints
>Info : starting gdb server for stm32f1x.cpu on 3333
>Info : Listening on port 3333 for gdb connections
>target halted due to debug-request, current mode: Thread
>xPSR: 0x01000000 pc: 0x0800025c msp: 0x20005000
>Info : device id = 0x20036410
>Info : flash size = 128kbytes
>stm32x unlocked.
>INFO: a reset or power cycle is required for the new settings to take 
>effect.
>
>target halted due to debug-request, current mode: Thread
>xPSR: 0x01000000 pc: 0x0800025c msp: 0x20005000
>target halted due to debug-request, current mode: Thread
>xPSR: 0x01000000 pc: 0x0800025c msp: 0x20005000
>** Programming Started **
>** Programming Finished **
>** Verify Started **
>** Verified OK **
>** Resetting Target **
>shutdown command invoked
>
>Yet, the programmed Bluepill does not show up on USB. Not at all.
>
>What am I missing here?
>
>
>merci bien
>
>hase
>
>
>
>_______________________________________________
>Gnuk-users mailing list
>Gnuk-users at gnupg.org
>https://lists.gnupg.org/mailman/listinfo/gnuk-users

-- 
Via smartphone.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20220101/0892bb69/attachment.html>

From bertrand at jacquin.bzh  Sun Mar 20 14:51:30 2022
From: bertrand at jacquin.bzh (Bertrand Jacquin)
Date: Sun, 20 Mar 2022 13:51:30 +0000
Subject: Gnuk 1.2.19 fails to build with gcc-11.2.1
Message-ID: <YjcxYopK7pC9YDfX@lady-voodoo.scabb>

Hi,

Gnuk 1.2.19 fails to build with gcc-11.2.1 due to type conflict:

  arm-none-eabi-gcc -O2 -g -Wa,-alms=regnual.lst -fpie -Wall -Wextra -Wstrict-prototypes -I . -I ../chopstx -fno-common -mcpu=cortex-m3 -mthumb -DTHUMB -mno-thumb-interwork -DMEMORY_SIZE=20 -DMHZ=72 -DFREE_STANDING   -c -o regnual.o regnual.c
  In file included from regnual.c:31:
  types.h:1:23: error: conflicting types for ?size_t?; have ?long unsigned int?
      1 | typedef unsigned long size_t;
        |                       ^~~~~~
  In file included from /usr/arm-none-eabi/include/sys/reent.h:14,
                   from /usr/arm-none-eabi/include/string.h:11,
                   from regnual.c:29:
  /usr/lib/gcc/arm-none-eabi/11.2.1/include/stddef.h:209:23: note: previous declaration of ?size_t? with type ?size_t? {aka ?unsigned int?}
    209 | typedef __SIZE_TYPE__ size_t;
        |                       ^~~~~~

It it safe to assume that type used by gnuk should be redefined to avoid
conflict with compiler provided types ?

Cheers,
Bertrand

-- 
Bertrand


From gniibe at fsij.org  Tue Mar 22 07:38:59 2022
From: gniibe at fsij.org (NIIBE Yutaka)
Date: Tue, 22 Mar 2022 15:38:59 +0900
Subject: Gnuk 1.2.19 fails to build with gcc-11.2.1
In-Reply-To: <YjcxYopK7pC9YDfX@lady-voodoo.scabb>
References: <YjcxYopK7pC9YDfX@lady-voodoo.scabb>
Message-ID: <87bkxya3uk.fsf@jumper.gniibe.org>

Hello,

Thank you for your report.

Bertrand Jacquin wrote:
>   In file included from regnual.c:31:
>   types.h:1:23: error: conflicting types for ?size_t?; have ?long unsigned int?
>       1 | typedef unsigned long size_t;
>         |                       ^~~~~~
>   In file included from /usr/arm-none-eabi/include/sys/reent.h:14,
>                    from /usr/arm-none-eabi/include/string.h:11,
>                    from regnual.c:29:
>   /usr/lib/gcc/arm-none-eabi/11.2.1/include/stddef.h:209:23: note: previous declaration of ?size_t? with type ?size_t? {aka ?unsigned int?}
>     209 | typedef __SIZE_TYPE__ size_t;
>         |                       ^~~~~~
>
> It it safe to assume that type used by gnuk should be redefined to avoid
> conflict with compiler provided types ?

ABI wise, it is same; Both are 32-bit unsigned integer.

You can just remove the definition of size_t in regnual/types.h.
I'll fix.


Initially, when Gnuk started, I assumed freestanding environment.  That
is, an environment with no C library.  That's why we have the header
file regnual/types.h and declaration of memset in regnural.c.

It worked, for a while, in the past.

But GCC changed (or clarified its requirement for freestanding
environment).  GCC requires the freestanding environment to provide
memcpy/memmove/memset/memcmp functions.

Instead of providing the required functions, I moved to use newlib for
that.

Note that most parts of Gnuk (for MCU) never depends on C library,
still.

Now, Gnuk supports emulation, in this case, it uses GNU C library.
(regnual only runs on MCU, not emulation.)
-- 


From bertrand at jacquin.bzh  Sat Mar 26 21:26:14 2022
From: bertrand at jacquin.bzh (Bertrand Jacquin)
Date: Sat, 26 Mar 2022 20:26:14 +0000
Subject: [PATCH] regnual: remove duplicate type declaration
In-Reply-To: <87bkxya3uk.fsf@jumper.gniibe.org>
References: <87bkxya3uk.fsf@jumper.gniibe.org>
Message-ID: <20220326202614.967371-1-bertrand@jacquin.bzh>

  In file included from regnual.c:31:
  types.h:1:23: error: conflicting types for ?size_t?; have ?long unsigned int?
      1 | typedef unsigned long size_t;
        |                       ^~~~~~
  In file included from /usr/arm-none-eabi/include/sys/reent.h:14,
                   from /usr/arm-none-eabi/include/string.h:11,
                   from regnual.c:29:
  /usr/lib/gcc/arm-none-eabi/11.2.1/include/stddef.h:209:23: note: previous declaration of ?size_t? with type ?size_t? {aka ?unsigned int?}
    209 | typedef __SIZE_TYPE__ size_t;
        |
---
 regnual/regnual.c | 2 --
 regnual/types.h   | 4 ----
 2 files changed, 6 deletions(-)

diff --git a/regnual/regnual.c b/regnual/regnual.c
index e296d51bc53e..fbc6064874ac 100644
--- a/regnual/regnual.c
+++ b/regnual/regnual.c
@@ -32,8 +32,6 @@
 #include "usb_lld.h"
 #include "sys.h"
 
-extern void *memset (void *s, int c, size_t n);
-
 extern void set_led (int);
 extern int flash_write (uint32_t dst_addr, const uint8_t *src, size_t len);
 extern int flash_protect (void);
diff --git a/regnual/types.h b/regnual/types.h
index 6527e0ba206c..0f70f97d0556 100644
--- a/regnual/types.h
+++ b/regnual/types.h
@@ -1,5 +1,3 @@
-typedef unsigned long size_t;
-
 typedef unsigned char uint8_t;
 typedef unsigned short uint16_t;
 typedef unsigned int uint32_t;
@@ -7,5 +5,3 @@ typedef unsigned int uintptr_t;
 
 #define TRUE  1
 #define FALSE 0
-
-#define NULL  0


From vagrant at debian.org  Mon Apr 11 23:18:11 2022
From: vagrant at debian.org (Vagrant Cascadian)
Date: Mon, 11 Apr 2022 14:18:11 -0700
Subject: Bug#1008573: gpg-agent -managed SSH keys stored in Yubikeys
 cannot be used with OpenSSH 8.9
In-Reply-To: <875ynfqz3c.fsf@contorta>
References: <5e2d865f-96fa-4455-b3f5-6cceb147f4ea@www.fastmail.com>
 <5e2d865f-96fa-4455-b3f5-6cceb147f4ea@www.fastmail.com>
 <875ynfqz3c.fsf@contorta>
Message-ID: <87y20bpbe4.fsf@contorta>

On 2022-04-11, Vagrant Cascadian wrote:
> On 2022-03-28, Philippe Gr?goire wrote:
>> After upgrading openssh-client to 8.9p1, Yubikey-managed SSH keys
>> can no longer be used. After downgrading to 1:8.4p1-5, it works.
>> I believe this is due to recent changes in OpenSSH 8.9 regarding
>> ssh-agent communication protocol which GnuPG hasn't yet picked up,
>> but haven't found anything on GnuPG's bug tracker.
>
>> $ ssh example.com
>> sign_and_send_pubkey: signing failed for ED25519 "cardno:XXXXXXXX" from agent: agent refused operation
>> username at example.com's password:
>
> Same problem with Gnuk, presumably multiple or all smartcards are
> affected?

According to some folks on irc.oftc.net #debian-devel, not all
smartcards are affected, we're the lucky ones!

I am using a fairly old build of gnuk, maybe newer firmware versions
have been made compatible somehow... ?


> Although I was until today using openssh 8.9 just fine, it wasn't until
> the openssh 9.0 upgrade that it stopped working for me...

For me, downgrading to openssh 1:8.9p1-3 seems to work fine.

I've marked that version of openssh as hold for now, but that feels very
wrong. :/


live well,
  vagrant
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 227 bytes
Desc: not available
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20220411/7a822554/attachment.sig>

From gniibe at fsij.org  Mon Apr 25 04:54:48 2022
From: gniibe at fsij.org (NIIBE Yutaka)
Date: Mon, 25 Apr 2022 11:54:48 +0900
Subject: Gnuk 1.2.20 and Chopstx 1.21
Message-ID: <87levtrhxj.fsf@akagi.fsij.org>

Hello,

Chopstx 1.21 is released.

	tag release/1.21
	Tagger: NIIBE Yutaka <gniibe at fsij.org>
	Date:   Fri Apr 22 11:14:57 2022 +0900
	commit e12a7e0bb3f004c7bca41cfdb24c8b66daf3db89

This release is from STABLE-BRANCH-1 branch.

Gnuk 1.2.20 is released.

	tag release/1.2.20
	Tagger: NIIBE Yutaka <gniibe at fsij.org>
	Date:	Fri Apr 22 11:20:32 2022 +0900
	commit 9d3c08bd2beb73ce942b016d4328f0a596096c02

This release is from STABLE-BRANCH-1-2 branch.

Those are maintenance releases.  Newer compiler is more strict, so, I
need to care about clear semantics of pointer uses (I didn't care in the
past).


If you still uses Gnuk Token < 1.2.16, the change in 1.2.16 may be
useful, with the use case of newer OpenSSH, which uses
sntrup761x25519-sha512 at openssh.com.  It requires larger data to be
signed. 

=========================================
* Major changes in Gnuk 1.2.16

  Released 2020-09-10, by NIIBE Yutaka

[...]
** Ed25519 signing allowing longer message
For OpenPGP, it does hashing on host side before requesting signing to
the device.  Thus, the length of message to be signed is limited and
determined by the hash algorithm.  That's good feature of OpenPGP.  On
the other hand, there is a use case, like OpenSSH certificate signing,
where the length of message is a kind of arbitrary.  Even though Gnuk
(or OpenPGP card protocol itself) has limitation, we removed the
length check against EDDSA_HASH_LEN_MAX at cmd_pso.
=========================================

scdaemon fix is also needed, it will be in GnuPG 2.3.6.  It is tracked
by:
    https://dev.gnupg.org/T5935
-- 


From tdtemccna at gmail.com  Thu Aug 11 08:38:57 2022
From: tdtemccna at gmail.com (Turritopsis Dohrnii Teo En Ming)
Date: Thu, 11 Aug 2022 14:38:57 +0800
Subject: How did Edward Joseph Snowden use GnuPG to uncover the secrets of the
 National Security Agency?
Message-ID: <CACsrZYbCzfeQt6N0LWVaKgQcF1iqHV2jgCJkLJ+RHaBfiXFi5Q@mail.gmail.com>

Subject: How did Edward Joseph Snowden use GnuPG to uncover the
secrets of the National Security Agency?

Good day from Singapore,

[QUOTE]

Arguing that you don't care about the right to privacy because you
have nothing to hide is no different from saying you don't care about
free speech because you have nothing to say. ? Edward Snowden

Using encryption helps to protect your privacy and the privacy of the
people you communicate with. Encryption makes life difficult for bulk
surveillance systems. GnuPG is one of the tools that Snowden used to
uncover the secrets of the NSA.

[/QUOTE]

How did Edward Joseph Snowden use GnuPG to uncover the secrets of the
National Security Agency?

I am very interested to know. Are there any detailed write-ups?

Thank you.

Regards,

Mr. Turritopsis Dohrnii Teo En Ming
Targeted Individual in Singapore
11 Aug 2022 Thursday
Blogs:
https://tdtemcerts.blogspot.com
https://tdtemcerts.wordpress.com


From gniibe at fsij.org  Thu Oct  6 05:30:35 2022
From: gniibe at fsij.org (NIIBE Yutaka)
Date: Thu, 06 Oct 2022 12:30:35 +0900
Subject: Chopstx new branch STABLE-BRANCH-2 and version 2.4.
Message-ID: <87wn9dvdb8.fsf@akagi.fsij.org>

Hello,

I forgot to send an announcement, so, here it goes.

In July, Chopstx 2.4 was released.

	tag release/2.4
	Tagger: NIIBE Yutaka <gniibe at fsij.org>
	Date:   Mon Jul 18 11:10:01 2022 +0900
	commit 2693fd9ec255db9690abd5ad212e2a269be82521

I created the branch STABLE-BRANCH-2 for 2.x series.

Major change in 2.4 is: I decided to use picolibc in rules.mk, because
all we need is string functions.  You can still use newlib by modifying
rules.mk.

I did a mistake for STABLE-BRANCH-2, when I developed using multiple
machines.  I wrongly pushed non-ff changes forcibly, forgetting I pushed
changes already.  If you follow STABLE-BRANCH-2 branch, please do:

	$ git reset --hard 2693fd9
	$ git pull

This means that I don't include changes in master to STABLE-BRANCH-2.


Because I had (possibly, wrong) impression of multi-core MCU will be
more common, I started SMP support in master.  It will be 3.x series.
Now, it somehow works for GNU/Linux emulation.

AFAIK: Sony Spresense has six cores, RP2040 is dual-core, and some
versions of ESP32 are also dual-core.  (For 64-bit, Kendryte K210
and K510 are dual-core.)

It was my misunderstanding that there is (will be) ESP32 with dual-core
RISC-V.


			*	*	*

My original intention was use of Chopstx 2 for Gnuk 2, with RISC-V MCU.

However, while the MCU, GD32VF103, is good for general use, I don't
think it's good for the particular use case of Gnuk Token, since reading
out the flash ROM may be more easier.  So, my initial plan was canceled.

In this summer, I evaluated CH32V103 from WCH, another RISC-V MCU, which
is a bit slower than GD32VF103.  Unfortunately, its "ISP" protocol is
not good for the use case of Gnuk Token, either, even if the situation
is better than GD32VF103.  In its ISP protocol, by the verify command,
the chunk size is 8-byte long.  Since guessing 8-byte data for all
possibilities takes long time, it's considered safe for general use.
For Gnuk, it were good if the chunk size was 64-byte long or longer.
-- 


From jscott at posteo.net  Tue Nov  8 02:05:39 2022
From: jscott at posteo.net (John Scott)
Date: Tue, 08 Nov 2022 01:05:39 +0000
Subject: More technical information on the NeuG and its protocol
Message-ID: <460dda2be6b4f56118cf47b1940f583ca62af514.camel@posteo.net>

Hi all,

My question doesn't pertain to Gnuk, but to NeuG. I think the NeuG seems
like a wonderful device to get acquainted with lower-level programming,
and I'd like to write a utility to exercise all of its features.

However, the NeuG source goes over my head. I'm aware of the need to set
the terminal line discipline, but I'm looking for things like:
 * ways to control the LED
 * Linux ioctl()'s I should be aware of
 * how to make the Fraucheky disk visible again

If anyone has tips for programming with OpenPGP smartcards like the
Gnuk, which I happen to own as well, that would also be appreciated, as
I know those still have an accessible hardware random number generator.
(Can anyone recommend a good resource on PKCS#11? Maybe that's what I
want.)

Thanks all!
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 252 bytes
Desc: This is a digitally signed message part
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20221108/9eb31852/attachment.sig>

From frederic.suel at free.fr  Fri Jun 30 20:03:23 2023
From: frederic.suel at free.fr (=?UTF-8?B?RnLDqWTDqXJpYyBTVUVM?=)
Date: Fri, 30 Jun 2023 20:03:23 +0200
Subject: Utility of NEUG or Gomti with new LRNG code
Message-ID: <2250df59-f5d3-cf42-3281-dbc6705f79bd@free.fr>

Hi!

*Ref 1* : https://www.chronox.de/lrng/doc/lrng.pdf

*Ref 2* : 
https://www.bsi.bund.de/SharedDocs/Downloads/EN/BSI/Publications/Studies/LinuxRNG/LinuxRNG_EN_V5_4.html

Until yet, we can use NEUG with user space utility call rng-tools. But 
since kernel 5.18 and the refondation of the Linux Random Number 
Generator (Ref 1) by stephan Muller ( smueller at chronox.de), it seems 
that : /dev/urandom and /dev/random are the same after initial RNG 
initialization (https://wiki.archlinux.org/title/Rng-tools) and (Ref 2 
page 15 : "/When accessing /dev/random, random numbers are only 
generated if the entropy pool or the ChaCha20 DRNG received at least 256 
bits of initial entropy. After reaching that threshold of 256 bits of 
entropy once, /dev/random will operate non-blocking for the lifetime of 
the system and thus operate identically //to /dev/urandom../")

The BSI (Deutschland Digital Sicher / Budesamt f?r Sicherheit in der 
Informationstecnik) make regular analysis of the Linux Random Number 
Generator (Ref 2) and it's conclusions are that :

-- the new RNG is not as efficient as it's older impl?mentation

-- few sources of entropy are correct for entropy boot process (Ref 2 ?6.1)

--? When injecting new seed data from user space by either the IOCTL or 
by writing into either /dev/random or /dev/urandom, the seed data is 
added to the input pool. It remains unused there until the base ChaCha20 
DRNG decides it is time to reseed (Ref 2 page 58).

So, it would be interesting to use NEUG and in the futur Gomti as 
hardware generator (Ref 2 pages 39 & 51). It would be interesting for 
early boot process (Ref 2 page 85) and normal process.? It seems to 
replace user space rngd daemon : "/Ref 2 page 39 : The Linux kernel 
contains an additional entropy collection mechanism for in-kernel 
hardware-RNG device drivers. Before the advent of the 
add_hwgenerator_randomness function, the user space rngd daemon was 
required to transport random bits from /dev/hwrng ? the interface to the 
hardware-RNG framework ? to /dev/random. With the functionality 
described in the following, this detour via user space is //no longer 
needed./"

It is possible, right now, to use it (NEUG, Gomti) as hardware generator 
and how, or will it be possible in the futur ?

Best regards


-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20230630/0f64b2e2/attachment.html>

From gniibe at fsij.org  Mon Jul  3 08:19:37 2023
From: gniibe at fsij.org (NIIBE Yutaka)
Date: Mon, 03 Jul 2023 15:19:37 +0900
Subject: Utility of NEUG or Gomti with new LRNG code
In-Reply-To: <2250df59-f5d3-cf42-3281-dbc6705f79bd@free.fr>
References: <2250df59-f5d3-cf42-3281-dbc6705f79bd@free.fr>
Message-ID: <87mt0dfreu.fsf@akagi.fsij.org>

Hello,

https://debconf23.debconf.org/talks/8-gomti-a-collection-of-pll-based-true-rng-on-fpga/

Fr?d?ric SUEL <frederic.suel at free.fr> wrote:
> *Ref 1* : https://www.chronox.de/lrng/doc/lrng.pdf
>
> *Ref 2* : 
> https://www.bsi.bund.de/SharedDocs/Downloads/EN/BSI/Publications/Studies/LinuxRNG/LinuxRNG_EN_V5_4.html

To my knowledge:

    * The LRNG is not (yet) in the standard kernel.

    * Some people use the code to get FIPS certification of the system
      (or similar government compliance).

      * Please ask RHEL, SuSE, and Canonical people for the situation.

My point is that while it is named "Linux Random Number Generator", it's
not always available.

If your interest is for FIPS certification or government compliance,
as far as I know, nobody (including me) tries NeuG USB device to be
FIPS certified.

> It is possible, right now, to use it (NEUG, Gomti) as hardware generator 
> and how, or will it be possible in the futur ?

Currently, I don't know.  It highly depends on how the LRNG is composed
(sorry, I don't know the detail).  If it's needed in the earlier boot
stage, the dependency graph of subsystem matters; If an external entropy
source requires USB communication (like NeuG USB device does) to feed
into kernel, the USB subsystem should be available.

Besides, I'm afraid the LRNG allows use of an external device like NeuG
or whatever.

If your use case with LRNG is for FIPS certified system, naturally, such
a device should be also FIPS certified.


BTW, I haven't announce Gomti yet.  It's my new project for hardware
RNG.

Last week, I submitted a talk proposal to Debconf23.

Just FYI, here is the copy of my submission.
If accepted, it will be:
https://debconf23.debconf.org/talks/8-gomti-a-collection-of-pll-based-true-rng-on-fpga/
(not yet available)

==========================

Gomti: A collection of PLL-based True RNG on FPGA

Speaker: NIIBE Yutaka

Track: Security

Type: Short talk (20 minutes)

Gomti [0] is a collection of PLL-based True Random Number Generator.
Currently, we have implementations for FPGA: ice40 HX8K and Gowin
GW1NR-9/C.  With Gomti, we can build a good USB TRNG device, for example,
using TEC0117 board.

In 2013, I released NeuG 1.0 [1], an implementation of TRNG on
STM32F103, based on the sampling noise of ADC.  It has been useful in
the situation where no good noise source is available.  I had an
presentation in Debconf15 [2].  While it is empirically useful, it lacks
mathematical or physical model.

Around 2015, there were projects like OneRNG [3] and ChaosKey [4] which
is based on diode noise source.

In 2022, I sought around TRNG technology again, with following constraints:

    - Easier to implement (cost-wise, technology-wise)
    - Patent free
    - Better reproducibility
    - Build-able with common parts
    - Build-able with free tool (as in freedom)

Given the situation we have a good free tool for FPGA (Yosys and nextpnr
[5]), I realized that PLL-based TRNG can be built fulfilling the
constraints above, reading papers of [6], [7], and [8].

People who have an interest around hardware development and FPGA can
enjoy Gomti to build their own USB TRNG device.  Security geeks may find
a practical and interesting source of entropy.

Let us discuss about reproducible and transparent random number generation.

[0] Gomti: https://sr.ht/~gniibe/gomti/

[1] NeuG: https://www.gniibe.org/memo/development/gnuk/rng/neug.html

[2] More Entropy, Please: https://summit.debconf.org/debconf15/meeting/265/more-entropy-please/

[3] OneRNG: https://onerng.info/

[4] ChaosKey: https://altusmetrum.org/ChaosKey/

[5] Yosys and nextpnr https://yosyshq.net/yosys/ https://github.com/YosysHQ/nextpnr

[6] Viktor Fischer & Milo? Drutarovsk?

True Random Number Generator Embedded in Reconfigurable Hardware
2002
https://doi.org/10.1007/3-540-36400-5_30

[7] Florent Bernard, Viktor Fischer and Boyan Valtchanov

Mathematical model of physical RNGs based on coherent sampling
2010
https://doi.org/10.2478/v10127-010-0001-1

[8] Milo? Drutarovsk? and Martin Simka and Viktor Fischer and Frederic Celle

A Simple PLL-Based True Random Number Generator for Embedded Digital Systems
2004
http://www.cai.sk/ojs/index.php/cai/article/view/442
-- 


From gniibe at fsij.org  Wed Sep  6 04:44:20 2023
From: gniibe at fsij.org (NIIBE Yutaka)
Date: Wed, 06 Sep 2023 11:44:20 +0900
Subject: Chopstx 2.4 and Gnuk 2.1
Message-ID: <87pm2whvgb.fsf@akagi.fsij.org>

Hello,

Chopstx 2.5 was released in STABLE-BRANCH-2.

	tag release/2.5
	Tagger: NIIBE Yutaka <gniibe at fsij.org>
	Date:   Tue Sep 5 10:14:51 2023 +0900
	commit d934006a4ac40946fea9ee97fed5f21990ff5228

It includes drivers (USB and ADC) for GD32VF103.  Perhaps, NeuG can run
on GD32VF103.  (I don't think it's good idea to run Gnuk on GD32VF103,
because its flash ROM content can be accessed easily.)

Please note that it now uses picolibc in rules.mk.  If you
want to use newlib, you need to modify the rules.mk.

In this summer, I checked CH32V203 from WCH (RISC-V MCU), which looks
good.

    https://github.com/openwch/ch32v20x/tree/main/Datasheet

I don't evaluate the board with the chip (yet).  I wonder if its ISP
protocol can be secure.  I have a look at:

    https://github.com/ch32-rs/wchisp

But I can't find technical document for the ISP protocol from vendor.
If anyone knows, please let me know.

And then, Gnuk 2.1 was released.

	tag release/2.1
	Tagger: NIIBE Yutaka <gniibe at fsij.org>
	Date:   Tue Sep 5 14:52:54 2023 +0900
	commit c7a98b7d13d770a6850f4306f801e57d8be26481

>From NEWS, here is major changes in Gnuk 2.1

* Ed448 and X448 support.
Ed448 and X448 support are added.  This support is experimental.

* Removal of RSA support.
RSA support has been removed.

* Removal of NIST P-256 support.
NIST P-256 curve support has been removed.

* Removal of debug option at configure (--enable-debug).
Debug option with CDC-ACM has been removed.  Please have a JTAG/SWD
debugger and use GDB.

* Removal of highly experimental pinpad support.
Pinpad support has been removed.

* Removal of old test.
We had old tests under "test/" directory which used python-nose.  We
switched to pytest and it's now under "tests/" directory.

* Replace AES implementation for encrypting secret keys on flash.
Secret keys on flash is encrypted with AES-GCM-SIV.  We now use
AES-256 implementation of our own.

* Change of authentication for firmware upgrade.
In Gnuk 1.2, we registered an RSA public key for firmware upgrade.
The RSA key is used by Gnuk Token to do challenge-response
authentication, so that only the secret key holder of RSA can do the
firmware upgrade.  In Gnuk 2, PIN authentication for Admin is used
for firmware upgrade.

* Upgrade of Chopstx
We use Chopstx 2.5.  It uses picolibc (instead of newlib).


Basically, many removal of old code.  Please note that RSA has gone (as
well as NIST P-256).

Ed448/X448 is introduced.  I thought that AES with 128-bit doesn't match
to encrypt the secret keys for Ed448/X448 (when we consider the weakest
link).  So, I use AES-256 now.  I thought that AEAD scheme should be
used.  My choice here is AES-GCM-SIV.  (In Gnuk 1, the secret key is
encrypted by AES CFB, and it has a checksum.)


I tested Gnuk 2.1 with GNU/Linux emulation, FST-01, and FST-01SZ.
Please use JTAG/SWD debugger to install Gnuk 2.1.  Installing by
upgrade_by_passwd.py is a bit compilicated, because the method is
different between Gnuk 1.2 and Gnuk 2.1.  If your Gnuk Token runs Gnuk
1.2, you need to use the upgrade_by_passwd.py tool of Gnuk 1.2.


			*	*	*


For ECC support, I think that GD32F103 (or STM32F103) is still good.  If
its ISP protocol is good, CH32V203 from WCH would be next candidate.

Then, I'm considering PQC support.  There are two technical issues.

(1) Time (by its hybrid scheme)

PQC will be used together with existing ECC.  If naively implemented, it
means that it takes twice longer time.  We would need to use twice
better (performance wise) chip for Gnuk Token.  Well, those
cryptographic computations could be done in parallel, so more cores or
more chips can be used.

I have been looking around the MCU chips for more cores.  IIUC, the
bandwidth of flash memory is one of major limitations.  If more cores,
better cache mechanism is needed.  But... having cache to the code means
that we need to consider side-channel attack.

GD32F103 or GD32VF103 runs on SRAM (or no-wait cycle flash).  If
something like GD32F103/GD32VF103 with multiple cores, it's promising.


(2) Space

PQC requires more memory.  Memory size would be no problem, but the size
in communication matters.  USB communication itself has no problem, but
I'm afraid that it's a bit difficult to keep using smartcard
interface/abstraction.


BTW, I'll join Debconf23.

Happy Hacking,
-- 


From gnupg.org at terminada.io  Wed Oct 11 09:24:19 2023
From: gnupg.org at terminada.io (Terminada)
Date: Wed, 11 Oct 2023 17:24:19 +1000
Subject: Suitability of STM32L432KC?
Message-ID: <3691da8c-2e29-47bd-a5ca-95c43280387e@terminada.io>

Hi NIIBE Yutaka,

I am wondering about the suitability of STM32L432KC chip if I was to 
build a FST-01SZ equivalent.

The datasheet https://www.st.com/resource/en/datasheet/stm32l432kc.pdf
Says:

"Core: Arm? 32-bit Cortex?-M4 CPU with FPU,Adaptive real-time 
accelerator (ART Accelerator?) allowing 0-wait-state execution
from Flash memory, frequency up to 80 MHz, MPU, 100DMIPS and DSP 
instructions"

"The STM32L432xx devices embed several protection mechanisms for 
embedded Flash memory and SRAM: readout protection, write protection, 
proprietary code readout protection and Firewall."

Would this be a better ARM processor to use than the one used in 
FST-01SZ?  Or would you recommend something else?

I have a FST-01SZ currently, which I use daily, but I need more.

Thanks for all your work.


From gniibe at fsij.org  Thu Oct 12 02:41:02 2023
From: gniibe at fsij.org (NIIBE Yutaka)
Date: Thu, 12 Oct 2023 09:41:02 +0900
Subject: Suitability of STM32L432KC?
In-Reply-To: <3691da8c-2e29-47bd-a5ca-95c43280387e@terminada.io>
References: <3691da8c-2e29-47bd-a5ca-95c43280387e@terminada.io>
Message-ID: <87il7czn8h.fsf@akagi.fsij.org>

Hello,

In the development history of mine, I tried:

	STM32L432
        GD32VF103

But I don't use them for Gnuk.  Let me explain.


Terminada <gnupg.org at terminada.io> wrote:
> I am wondering about the suitability of STM32L432KC chip if I was to 
> build a FST-01SZ equivalent.

Chopstx has support of STM32L432 for its core, USART driver and USB
driver.  I use STM32L432 for my card reader implementation (named TTXS),
using Chopstx.

In this situation, if we will implement RNG driver for STM32L432 or port
the ADC driver (for NeuG), it is possible to *run* Gnuk on the MCU.

I didn't do that, however, because I'm not confident enough if it can
run securely.

The code of Gnuk assumes the MCU is *not* that good, that is,

	- without (better) branch predictor
	- without cache (or flash accelerator)

In other words, our unique/peculiar approach is: assuming use of
not-that-good MCU, we can keep the code simpler.

Please note that, in the code of Gnuk:

	- The execution path may depend on secret values.
	- It may have table access which depends on secret values.

This is "feature", not bug.

> "Core: Arm? 32-bit Cortex?-M4 CPU with FPU,Adaptive real-time 
> accelerator (ART Accelerator?) allowing 0-wait-state execution
> from Flash memory, frequency up to 80 MHz, MPU, 100DMIPS and DSP 
> instructions"

My concern is possible side-channel attacks against this accelerator.


IIUC, GD32F103 (on FST-01SZ) has SRAM and SPI Flash ROM, and the
contents of Flash are copied into SRAM at boot.  Table access with
secret values is considered secure on the MCU (against possible
side-channel attacks).
-- 


From gnupg.org at terminada.io  Thu Oct 12 06:14:21 2023
From: gnupg.org at terminada.io (Terminada)
Date: Thu, 12 Oct 2023 14:14:21 +1000
Subject: Suitability of STM32L432KC?
In-Reply-To: <87il7czn8h.fsf@akagi.fsij.org>
References: <3691da8c-2e29-47bd-a5ca-95c43280387e@terminada.io>
 <87il7czn8h.fsf@akagi.fsij.org>
Message-ID: <fdcb8674-7f83-48b5-b91d-09e54353d54a@terminada.io>

On 12/10/23 10:41, NIIBE Yutaka wrote:>
> The code of Gnuk assumes the MCU is *not* that good, that is,
> 
> 	- without (better) branch predictor
> 	- without cache (or flash accelerator)
> 
> In other words, our unique/peculiar approach is: assuming use of
> not-that-good MCU, we can keep the code simpler.
> 
> Please note that, in the code of Gnuk:
> 
> 	- The execution path may depend on secret values.
> 	- It may have table access which depends on secret values.
> 
> This is "feature", not bug.
> 
>> "Core: Arm? 32-bit Cortex?-M4 CPU with FPU,Adaptive real-time
>> accelerator (ART Accelerator?) allowing 0-wait-state execution
>> from Flash memory, frequency up to 80 MHz, MPU, 100DMIPS and DSP
>> instructions"
> 
> My concern is possible side-channel attacks against this accelerator.
> 
> 
> IIUC, GD32F103 (on FST-01SZ) has SRAM and SPI Flash ROM, and the
> contents of Flash are copied into SRAM at boot.  Table access with
> secret values is considered secure on the MCU (against possible
> side-channel attacks).

Very interesting.  I think I understand what you are saying at a high 
level.  But, please explain a bit more.  I am not sure how to word my 
questions given my more limited understanding:

How does the password used to unlock the smartcard (Gnuk) result in the 
secret values being more secure for memory access?

Does STM32L432's ART Accelerator undermine this because the compiler 
will optimise the binary for the ART Accelerator?

Does this mean that the processor used in FST-01SZ is less susceptible 
to side channel attacks compared to a Trezor One device (STM32F10XRXT6) 
or even the more recent Trezor T device (STM32F427VIT6)?  See this link 
about breaking Trezor One: 
https://www.ledger.com/blog/breaking-trezor-one-with-sca

 >
 > In the development history of mine, I tried:
 >
 >       STM32L432
 >       GD32VF103
 >
 > But I don't use them for Gnuk.  Let me explain.
 >

What do you use now?

I am happy with my FST-01SZ boards subject to not knowing how secure 
they are against various attacks.  However, I was unable to re-program 
my FST-01 and FST-01G boards until I realised that I needed to trigger a 
reset by shorting pins NRST and VSSA on the processor whilst trying to 
keep the ST-Link V2 programmer connected.  That was a bit tricky but I 
eventually re-programmed them all to Gnuk version 2.1.

I am motivated to make some Gunk tokens because it is impossible to 
purchase any FST-01SZ or similar from anywhere.  The board design looks 
reasonably simple and I should be able to solder the IC by hand, but if 
I am going to go to the trouble of doing this, I thought I might get the 
most appropriate processor for the task.

So what would you recommend now?  I am particularly concerned to get the 
most secure, least easily attacked, processor chip.  I don't care if it 
will cost a few dollars more.

Another thing I would be very interested in achieving is to be able to 
use my Gnuk token to sign Cardano blockchain transactions.  The keys 
used on Cardano are ed25519 keys and the hashing algorithm used is 
Blake2b.  There would be significant Cardano community support for 
getting this to work and there is funding available to pay for 
development expenses through project Catalyst. (https://projectcatalyst.io/)
This video from one developer illustrates that the missing features, 
from what is already implemented in Gnuk, are likely quite minimal. 
(Maybe only the Blake2b hashing algorithm?): https://youtu.be/rVdpUpavLgM
--


From gnupg.org at terminada.io  Fri Oct 13 16:20:34 2023
From: gnupg.org at terminada.io (Terminada)
Date: Sat, 14 Oct 2023 00:20:34 +1000
Subject: Second passphrase feature request
Message-ID: <b894cd53-0dca-4a75-8932-55ed06e02057@terminada.io>

I am interested by some extra functionality that the Trezor devices 
provide.  These devices store a key on them and require a passphrase for 
unlocking similar to Gnuk.  But they also allow you to enter _any_ 
additional passphrase to generate new keys by combining the second 
passphrase entered with the existing stored key.

This second passphrase does not get stored on the device and simply gets 
entered each time.  If you enter a different second passphrase then you 
will produce a different key.  Bitcoin, Cardano, and other blockchains 
generate their keys from a 12 or 24 word seed phrase.  This second 
passphrase is like an additional seed word that gets combined with the 
existing seed words to produce a new key.

This second passphrase makes the physical device, in a way, un-hackable 
because it is not even stored, anywhere.  And entering anything will 
still produce a valid key.  However the process is deterministic in that 
entering the same second passphrase will always generate the same key.

The other benefit of this second passphrase is that in effect you can 
generate an unlimited number of keys from the base key.  Also, entering 
the empty passphrase produces the base key.

Would there be a way to add such a feature to Gnuk and gnupg?

Is there some way to generate a new gpg key from an existing one if 
given some additional data (second passphrase)?
--


From gnupg.org at terminada.io  Fri Oct 27 00:26:54 2023
From: gnupg.org at terminada.io (gnupg.org at terminada.io)
Date: Fri, 27 Oct 2023 08:26:54 +1000
Subject: Second passphrase feature request
In-Reply-To: <b894cd53-0dca-4a75-8932-55ed06e02057@terminada.io>
References: <b894cd53-0dca-4a75-8932-55ed06e02057@terminada.io>
Message-ID: <fdc70eee-4bec-4166-a387-0e46eab9b66e@terminada.io>

This video outlines how it is easy to extract the key from Trezor T 
devices which use a similar chip to FST-01SZ:  https://youtu.be/50eiA-75NMY

But, using a second passphrase to generate the required key each time 
would protect against such attacks because this second passphrase would 
not be stored anywhere.


From gniibe at fsij.org  Fri Oct 27 02:22:35 2023
From: gniibe at fsij.org (NIIBE Yutaka)
Date: Fri, 27 Oct 2023 09:22:35 +0900
Subject: Second passphrase feature request
In-Reply-To: <b894cd53-0dca-4a75-8932-55ed06e02057@terminada.io>
References: <b894cd53-0dca-4a75-8932-55ed06e02057@terminada.io>
Message-ID: <87bkckx6b8.fsf@akagi.fsij.org>

Hello,

I answer in different order of you asked.

It sounds like you have a specific use case in mind, and I'm not sure if
use of Gnuk Token is appropriate for that.

Terminada <gnupg.org at terminada.io> wrote:
> Is there some way to generate a new gpg key from an existing one if 
> given some additional data (second passphrase)?

Technically, it is possible to use data of a private key to derive
another.  I don't think there is an existing tool for OpenPGP to help
this use case.

> Would there be a way to add such a feature to Gnuk and gnupg?

It would be.  For Gnuk, it sounds like you are suggesting (or expecting)
another design of token, like FIDO2, which has a secret in a device to
derive (possibly many) keys.  (Sorry, I don't know about how Trezor
devices are implemented.)

It would be good to add a feature to GnuPG, which supports generating
OpenPGP key from externally generated raw private key material (by some
derivation mechanism using secret like existing private key (in OpenPGP
format or whatever)).

Currently, GnuPG has a limited support to generate OpenPGP key from
existing card key.  This feature could be generalized/enhanced.

> I am interested by some extra functionality that the Trezor devices 
> provide.

In Gnuk, passphrase is not stored in the device, at all.  Passphrase is
used to decrypt your key on the device.
-- 


From gnupg.org at terminada.io  Fri Oct 27 04:29:32 2023
From: gnupg.org at terminada.io (gnupg.org at terminada.io)
Date: Fri, 27 Oct 2023 12:29:32 +1000
Subject: Second passphrase feature request
In-Reply-To: <87bkckx6b8.fsf@akagi.fsij.org>
References: <b894cd53-0dca-4a75-8932-55ed06e02057@terminada.io>
 <87bkckx6b8.fsf@akagi.fsij.org>
Message-ID: <c7d2419f-6ca4-4ceb-9370-d1f5d5267f57@terminada.io>

On 27/10/23 10:22, NIIBE Yutaka wrote>
> It sounds like you have a specific use case in mind, and I'm not sure if
> use of Gnuk Token is appropriate for that.

Well, it would be good to include implementation of the Blake2b hashing 
algorithm because then a simple device like FST-01SZ could also be used 
for signing blockchain transactions on Cardano, which uses ed25519 keys.

> 
> Technically, it is possible to use data of a private key to derive
> another.  I don't think there is an existing tool for OpenPGP to help
> this use case.

Yes, that would be a good feature because it would achieve three advantages:

1. It would remove the limitation of 3 key storage.  Since different 
second passphrase would generate different keys, effectively a single 
device can manage an infinite number of keys (limited only by unique 
second passphrases).

2. It would make the secret key storage more secure, or even 
un-crackable depending on strength of the second passphrase since the 
device would then really only be storing a partial key or seed.

3. It would enable plausible deniability.  Since every possible second 
passphrase would generate a valid key.  If subjected to a "wrench 
attack" the user can reveal a valid key but this may not be his most 
valuable key.

Eg: A User can prepare a throw away key in advance for disclosure in the 
event of a "wrench attack" and say that this is "the" key he uses with 
this smartcard.  The attacker has no way of knowing if that assertion is 
correct or not because he would see a working key.  The user can 
plausibly deny that he has any other key available from this particular 
smartcard.

By contrast, the way GnuPG used with FST-01SZ works today, an attacker 
will know immediately if the correct PIN is entered because the software 
will tell him.

> 
>> Would there be a way to add such a feature to Gnuk and gnupg?
> 
> It would be.  For Gnuk, it sounds like you are suggesting (or expecting)
> another design of token, like FIDO2, which has a secret in a device to
> derive (possibly many) keys.  (Sorry, I don't know about how Trezor
> devices are implemented.)

I don't think FST-01SZ hardware needs to be changed.  Though maybe there 
are ways to simply add a secure element IC to the FST-01SZ design to 
improve the security of the partial key storage.  I don't know how 
feasible this would be or even if it would be worth doing.

> 
> It would be good to add a feature to GnuPG, which supports generating
> OpenPGP key from externally generated raw private key material (by some
> derivation mechanism using secret like existing private key (in OpenPGP
> format or whatever)).
> 
> Currently, GnuPG has a limited support to generate OpenPGP key from
> existing card key.  This feature could be generalized/enhanced.
> 

Excellent.  Would you consider adding this feature?

Note that adding this second passphrase feature can have zero impact on 
current usage patterns for users that didn't want to use it.  This is 
because using an empty passphrase would simply use the key stored, 
unchanged.  You could simply add a menu option to enable this second 
passphrase feature so the user is prompted to enter a second passphrase. 
  If the feature is not enabled, then the empty second passphrase is 
always used without any prompting, which would provide the exact same 
usage pattern as current.

This is exactly how the Trezor devices work with their second passphrase 
feature.

> 
> In Gnuk, passphrase is not stored in the device, at all.  Passphrase is
> used to decrypt your key on the device.

OK, I think that is better than what the Trezor devices are doing for 
key storage.

However, as Gnuk is currently implemented, if the key was copied from 
the device still in it's encrypted state, is it possible to know when 
the data is successfully decrypted by applying AES decryption with 
guessed PINs?  IE: Can you know when successfully decrypted because you 
see a specific header byte sequence?


From gniibe at fsij.org  Fri Oct 27 08:03:38 2023
From: gniibe at fsij.org (NIIBE Yutaka)
Date: Fri, 27 Oct 2023 15:03:38 +0900
Subject: Second passphrase feature request
In-Reply-To: <c7d2419f-6ca4-4ceb-9370-d1f5d5267f57@terminada.io>
References: <b894cd53-0dca-4a75-8932-55ed06e02057@terminada.io>
 <87bkckx6b8.fsf@akagi.fsij.org>
 <c7d2419f-6ca4-4ceb-9370-d1f5d5267f57@terminada.io>
Message-ID: <877cn8wqit.fsf@akagi.fsij.org>

Hello,

I will read your suggestion later.  For now, let me reply to a question.

gnupg.org at terminada.io wrote:
> However, as Gnuk is currently implemented, if the key was copied from 
> the device still in it's encrypted state, is it possible to know when 
> the data is successfully decrypted by applying AES decryption with 
> guessed PINs?  IE: Can you know when successfully decrypted because you 
> see a specific header byte sequence?

Let me explain.

Terms:
	KDF: Key Derivation Function
	KEK: Key Encoding Key
	DEK: Data Encoding Key
	AEAD: Authenticated Encryption

Here is a figure:

    Passphrase --[KDF on your computer + on the device]--> KEK

    KEK --> [AES decryption] --> DEK
                   ^ 
    Encrypted      |
     key      -----/
                          
    DEK --> [AEAD decryption] --> private key material
                   ^ 
    Encrypted      |
     private key --/
     with
     authentication tag
    (stored in the flash memory of the device)

With AEAD, it determines that the decrypted data has correct or not.

In the situation where the all data is extracted from MCU (somehow),
brute force attack with guessed DEK (or KEK) is possible, and brute
force attack with guessed passphrase is possible, too.

With Gnuk, computation of KEK is done togerther with the host computer
and the device (when configured correctly).

KDF on the device side uses (32-bit from 96-bit) unique ID of MCU.

When the host computer is cracked, passphrase might be known.  In this
case, private key material may be aquired using the passphrase, and
the information (or guessing) of unique ID.

When the USB communication is tapped and monitored, partially computed
KEK might be known.  In this case, private key material may be aquired
by a bit of brute force attack with partially computed KEK, and the
information (or guessing) of unique ID.
-- 


From simon at josefsson.org  Fri Oct 27 09:17:21 2023
From: simon at josefsson.org (Simon Josefsson)
Date: Fri, 27 Oct 2023 09:17:21 +0200
Subject: Second passphrase feature request
In-Reply-To: <c7d2419f-6ca4-4ceb-9370-d1f5d5267f57@terminada.io> (gnupg org's
 message of "Fri, 27 Oct 2023 12:29:32 +1000")
References: <b894cd53-0dca-4a75-8932-55ed06e02057@terminada.io>
 <87bkckx6b8.fsf@akagi.fsij.org>
 <c7d2419f-6ca4-4ceb-9370-d1f5d5267f57@terminada.io>
Message-ID: <87v8as1qm6.fsf@kaka.sjd.se>

gnupg.org at terminada.io writes:

> 1. It would remove the limitation of 3 key storage.  Since different
> second passphrase would generate different keys, effectively a single 
> device can manage an infinite number of keys (limited only by unique
> second passphrases).

This is like the FIDO-approach: no storage requirement on the device
except for possibly crypto-related incremental counters.  It is quite
orthogonal to the current GNUK design, but I think GNUK could be
extended to support it: replace reading the encrypted key material with
reading a blob from the machine together with a second passphrase and
use some it together with a device-specific key to decrypt it before
use.  Reading the blob from the machine isn't critical: if storage is
available, it can use blob from GNUK storage instead.

The Tillitis Key -- https://tillitis.se/ -- follow this approach, and
has Ed25519 signing for SSH working.  It could be extended to support
OpenPGP too under the FIDO-model.

/Simon
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 255 bytes
Desc: not available
URL: <https://lists.gnupg.org/pipermail/gnuk-users/attachments/20231027/17b55cc7/attachment.sig>

From pinghigh24678 at outlook.com  Wed Nov 15 03:27:22 2023
From: pinghigh24678 at outlook.com (D Tibrella)
Date: Wed, 15 Nov 2023 02:27:22 +0000
Subject: About the Compatibility of GNUK 2.1 Firmware with ST Link v2
In-Reply-To: <TYCP286MB3618E0E48B4E755C10A1CC61FDB1A@TYCP286MB3618.JPNP286.PROD.OUTLOOK.COM>
References: <TYCP286MB3618E0E48B4E755C10A1CC61FDB1A@TYCP286MB3618.JPNP286.PROD.OUTLOOK.COM>
Message-ID: <TYCP286MB36183008F3D872A746641723FDB1A@TYCP286MB3618.JPNP286.PROD.OUTLOOK.COM>

I'm making a GNUK token with a ST Link v2 (maybe a replica but with genuine STM32F103C8T6) with GNUK 2.1. But I encountered a prompt of 'card error' while generating the key/executing the KEYTOCARD command. When using GNUK 1.2.20 firmware, it can function normally, so it should not be a problem with flash memory size. (The firmware volume of this version is nearly 30 kb larger than that of version 2.1)

The MCU is genuine because ST-Link Utility could identify and update it. And I have tried burning in different ways and the results are the same (OpenOCD/tools from downloader manufacturer).

Build Environment:
arm-none-eabi-picolibc 1.8.5
arm-none-eabi-gcc 13.2.0

May I ask if you have had any experience with this problem?
Due to my limited free time, I may not be able to debug for a while. However, I will be happy to provide you with the information you need. English is not my first language. I apologise for any offence.

From gniibe at fsij.org  Wed Nov 15 05:27:40 2023
From: gniibe at fsij.org (NIIBE Yutaka)
Date: Wed, 15 Nov 2023 13:27:40 +0900
Subject: About the Compatibility of GNUK 2.1 Firmware with ST Link v2
In-Reply-To: <TYCP286MB36183008F3D872A746641723FDB1A@TYCP286MB3618.JPNP286.PROD.OUTLOOK.COM>
References: <TYCP286MB3618E0E48B4E755C10A1CC61FDB1A@TYCP286MB3618.JPNP286.PROD.OUTLOOK.COM>
 <TYCP286MB36183008F3D872A746641723FDB1A@TYCP286MB3618.JPNP286.PROD.OUTLOOK.COM>
Message-ID: <87r0krprnn.fsf@akagi.fsij.org>

Hello,

D Tibrella <pinghigh24678 at outlook.com> wrote:
> arm-none-eabi-gcc 13.2.0

I haven't tested GCC 13.2 yet.  It may be the cause.  I'll test when
it will be available in Debian.

Do you mean that Gnuk 1.2.20 built with arm-none-eabi-gcc 13.2.0 works?
-- 


From pinghigh24678 at outlook.com  Wed Nov 15 16:16:43 2023
From: pinghigh24678 at outlook.com (D Tibrella)
Date: Wed, 15 Nov 2023 15:16:43 +0000
Subject: About the Compatibility of GNUK 2.1 Firmware with ST Link v2
In-Reply-To: <87r0krprnn.fsf@akagi.fsij.org>
References: <TYCP286MB3618E0E48B4E755C10A1CC61FDB1A@TYCP286MB3618.JPNP286.PROD.OUTLOOK.COM>
 <TYCP286MB36183008F3D872A746641723FDB1A@TYCP286MB3618.JPNP286.PROD.OUTLOOK.COM>
 <87r0krprnn.fsf@akagi.fsij.org>
Message-ID: <TYCP286MB361853DC088D4B8EF00AA23CFDB1A@TYCP286MB3618.JPNP286.PROD.OUTLOOK.COM>

Hello, there is the latest test.

> I haven't tested GCC 13.2 yet.  It may be the cause.  I'll test when
it will be available in Debian.

I built GNUK 2.1 with arm-none-eabi-gcc version 12.2.1 20221205 (15:12.2.rel1-1) and picolibc-arm-none-eabi version 1.8-1. These packages are from the latest Debian 12 official apt software source. But I still get "Card Error" on the token.

Could you tell me the version of your toolchains?

From gniibe at fsij.org  Thu Nov 16 00:49:47 2023
From: gniibe at fsij.org (NIIBE Yutaka)
Date: Thu, 16 Nov 2023 08:49:47 +0900
Subject: About the Compatibility of GNUK 2.1 Firmware with ST Link v2
In-Reply-To: <TYCP286MB361853DC088D4B8EF00AA23CFDB1A@TYCP286MB3618.JPNP286.PROD.OUTLOOK.COM>
References: <TYCP286MB3618E0E48B4E755C10A1CC61FDB1A@TYCP286MB3618.JPNP286.PROD.OUTLOOK.COM>
 <TYCP286MB36183008F3D872A746641723FDB1A@TYCP286MB3618.JPNP286.PROD.OUTLOOK.COM>
 <87r0krprnn.fsf@akagi.fsij.org>
 <TYCP286MB361853DC088D4B8EF00AA23CFDB1A@TYCP286MB3618.JPNP286.PROD.OUTLOOK.COM>
Message-ID: <875y22r2zo.fsf@akagi.fsij.org>

Hello,

D Tibrella <pinghigh24678 at outlook.com> wrote:
> But I still get "Card Error" on the token.
>
> Could you tell me the version of your toolchains?

It is explained in the gnuk/README:

	binutils-arm-none-eabi	2.40-2+18+b1
	gcc-arm-none-eabi 	15:12.2.rel1-1
	picolibc-arm-none-eabi	1.8-1
	gdb-multiarch 		13.1-3

When I released Gnuk 2.1, I built Gnuk for FST-01 and FST-01SZ, those
are my daily use.  I also built Gnuk Emulation for GNU/Linux and tested.

If you applied some patches, please show us.
-- 


